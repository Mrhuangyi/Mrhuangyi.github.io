<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你的小黄^_^</title>
  <icon>https://www.gravatar.com/avatar/3a25a3ab34305615e80247defadfd4f6</icon>
  <subtitle>做一名有情怀的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangyiblog.com/"/>
  <updated>2018-04-18T11:13:32.531Z</updated>
  <id>http://huangyiblog.com/</id>
  
  <author>
    <name>Mr.Huangyi</name>
    <email>18757163093@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>素数问题</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://huangyiblog.com/算法和数据结构/素数问题/</id>
    <published>2018-04-18T11:12:48.000Z</published>
    <updated>2018-04-18T11:13:32.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p>  素数又称为质数，是指除了1和本身外，不能被其他数整除的一类数。</p><h3 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h3><p>直接遍历循环复杂度为O(n);<br>复杂度为O(sqrt(n))的算法;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简洁写法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="素数表的获取"><a href="#素数表的获取" class="headerlink" title="素数表的获取"></a>素数表的获取</h3><p>思路一： 根据判断素数的方法，直接从1~n进行枚举，若为素数则加入表中，枚举部分复杂度为O(n),判断素数部分复杂度为O(sqrt(n)),<br>所以总复杂度为O(n*sqrt(n)),该算法对于n小于10^5可以承受;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sqr = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqr;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">101</span>],num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[<span class="number">101</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isprime(i)) &#123;</span><br><span class="line">            prime[num++]=i;</span><br><span class="line">            p[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Find_Prime();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,prime[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路二：埃氏筛法，复杂度为O(nloglogn).<br>       欧拉筛法，复杂度为O(n).<br>素数筛法的关键在于筛字，即从小到大枚举所有数，对每一个素数，筛去它的所有倍数，剩下的均为素数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn],num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> p[maxn]=&#123;<span class="number">0</span>&#125;;<span class="comment">//如果i为素数，则p[i]为false,否则，p[i]为true</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find_Prime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            prime[num++]=i;<span class="comment">//将素数i存入数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;maxn;j+=i)&#123;<span class="comment">//筛去所有i的倍数，两个循环条件均不能加=</span></span><br><span class="line">                p[j]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Find_Prime();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,prime[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;素数&quot;&gt;&lt;a href=&quot;#素数&quot; class=&quot;headerlink&quot; title=&quot;素数&quot;&gt;&lt;/a&gt;素数&lt;/h2&gt;&lt;p&gt;  素数又称为质数，是指除了1和本身外，不能被其他数整除的一类数。&lt;/p&gt;
&lt;h3 id=&quot;素数判断&quot;&gt;&lt;a href=&quot;#素数判断&quot; cl
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>大整数运算</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    <id>http://huangyiblog.com/算法和数据结构/大整数运算/</id>
    <published>2018-04-18T11:10:41.000Z</published>
    <updated>2018-04-18T11:12:00.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大整数运算"><a href="#大整数运算" class="headerlink" title="大整数运算"></a>大整数运算</h1><p>  大整数的含义为：用基本数据类型无法存储其精度的整数，即没有办法用已有的数据类型来表示并计算，而需要去模拟加减乘除的过程，</p><h2 id="大整数的存储"><a href="#大整数的存储" class="headerlink" title="大整数的存储"></a>大整数的存储</h2><p>  使用数组存储，即整数的高位存储在数组的高位，整数的低位存储在数组的低位。由于运算时都是从整数的低位到高位进行枚举，<br>  所以顺序存储与该思维相合。<br>  注意点：当整数按字符串%s读入时是逆位存储的，所以需要反转至另一数组。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> d[<span class="number">1000</span>];</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  bign()&#123;</span><br><span class="line">  <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">  len = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)&#123;</span><br><span class="line">        a.d[i]=str[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">比较两个bign变量的大小：先判断两者的len大小，如果不相等，以长的</span><br><span class="line">为大；如果相等，则从高位到低位进行比较，直到出现某一位不等，结束比较。</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.len&gt;b.len) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.len&lt;b.len) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.d[i]&gt;b.d[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a.d[i]&lt;b.d[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>对两个数其中的每一位进行加法的步骤：将该位上的两个数字相加，得到的结果取个位数作为该位结果，取十位数作为新的进位<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bign</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> d[<span class="number">1000</span>];</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  bign()&#123;</span><br><span class="line">  <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">  len = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bign <span class="title">change</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">    bign a;</span><br><span class="line">    a.len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)&#123;</span><br><span class="line">        a.d[i]=str[a.len-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bign <span class="title">add</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry=<span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a.d[i]+b.d[i]+carry;</span><br><span class="line">        c.d[c.len++]=temp%<span class="number">10</span>;</span><br><span class="line">        carry=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">        c.d[c.len++]=carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(bign a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,a.d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">1000</span>],str2[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,str1,str2);</span><br><span class="line">    bign a=change(str1);</span><br><span class="line">    bign b=change(str2);</span><br><span class="line">    print(add(a,b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">上述写法两个对象都是非负整数，如果有一方是负的，可以在转换到数组这一步时</span><br><span class="line">去掉其负号，然后采用高精度减法；如果两个都是负的，就都去掉负号后采用高精度加法，最后加上负号。</span><br></pre></td></tr></table></figure></p><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p>步骤：对每一步，比较被减位和减位，如果不够减，则令被减位的高位减1，被减位加10在进行减法；如果够减，则直接减。<br>减法后高位可能有多余的0，要除去它们，但也要保证结果至少有一位数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bign <span class="title">sub</span><span class="params">(bign a,bign b)</span></span>&#123;</span><br><span class="line">        bign c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len||i&lt;b.len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a.d[i]&lt;b.d[i])&#123;</span><br><span class="line">                a.d[i+<span class="number">1</span>]--;</span><br><span class="line">                a.d[i]+=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.d[c.len++]=a.d[i]-b.d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(c.len<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            c.len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="高精度与低精度的乘法"><a href="#高精度与低精度的乘法" class="headerlink" title="高精度与低精度的乘法"></a>高精度与低精度的乘法</h3><p>步骤：取bign的某位与int型整体相乘，再与进位相加，所得结果的个位数作为该位结果，高位作为新的进位。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bign <span class="title">multi</span><span class="params">(bign a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    bign c;</span><br><span class="line">    <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a.d[i]*b+carry;</span><br><span class="line">        c.d[c.len++]=temp%<span class="number">10</span>;</span><br><span class="line">        carry=temp/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(carry!=<span class="number">0</span>)&#123;</span><br><span class="line">        c.d[c.len++]=carry%<span class="number">10</span>;</span><br><span class="line">        carry/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="高精度与低精度的除法"><a href="#高精度与低精度的除法" class="headerlink" title="高精度与低精度的除法"></a>高精度与低精度的除法</h3><p>步骤：上一步的余数乘以10加上该步的位，得到该步临时的被除数，将其与除数比较：如果不够除，则该位的商为0；如果够除，<br>则商即为对应的商，余数即为对应的余数。最后一步要注意高位可能有多余的0，要去除它们，但也要保证结果至少有一位数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bign <span class="title">divide</span><span class="params">(bign a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;r)</span></span>&#123;<span class="comment">//r为余数</span></span><br><span class="line">    bign c;</span><br><span class="line">    c.len=a.len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        r=r*<span class="number">10</span>+a.d[i];</span><br><span class="line">        <span class="keyword">if</span>(r&lt;b) c.d[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            c.d[i]=r/b;</span><br><span class="line">            r=r%b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c.len=<span class="number">1</span>&gt;=<span class="number">1</span>&amp;&amp;c.d[c.len<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">        c.len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大整数运算&quot;&gt;&lt;a href=&quot;#大整数运算&quot; class=&quot;headerlink&quot; title=&quot;大整数运算&quot;&gt;&lt;/a&gt;大整数运算&lt;/h1&gt;&lt;p&gt;  大整数的含义为：用基本数据类型无法存储其精度的整数，即没有办法用已有的数据类型来表示并计算，而需要去模拟加减乘除
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>为自己去去去“功利化”</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%8E%BB%E2%80%9C%E5%8A%9F%E5%88%A9%E5%8C%96%E2%80%9D/"/>
    <id>http://huangyiblog.com/随笔/为自己去去“功利化”/</id>
    <published>2018-04-18T06:48:31.000Z</published>
    <updated>2018-04-18T07:55:39.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="想找回纯粹的自己"><a href="#想找回纯粹的自己" class="headerlink" title="想找回纯粹的自己"></a>想找回纯粹的自己</h1><p>　　　不知从何时起，发现自己只剩下眼前的苟且，所谓的诗和远方早已不见踪影。不知是社会的悲哀，还是我自己的悲哀，从中学到大学，越发觉得自己成了一个精致的利己主义者。也许你会说人不为己天诛地灭，势利本就是人的一种本性，哪有那么多高尚者能为他人考虑多过为自己考虑。<br>　　　一个大学生，虽说不是什么９８５重点高校，但却仍旧找不到自己所真正热爱的，长时间为日后从事什么职业而迷茫岂不可笑。一路走来，自己始终缺乏主见与自信，每当周边的人鸡汤一撒，立马觉得，哇，这位大佬说的有道理，然后被人牵着鼻子一直走。高中生活就不提太多了，大家都是在高考的指挥棒下走过来的，相信高中是怎么一回事的清楚得很，成绩平平的我当时就读于本地现成的一所普通中学，和绝大多数同学一样，过完了普普通通的三年，你还别说，我们这普通高中管得还挺严，我可以说是老老实实地度过了高中三年，作为一个听话的好学生．．．当然是天天努力学习哈，老师说了，你现在混混日子，到时候就是人家去浙大，你去浙中大，哈哈哈。高二文理分科，尽管我高一文科学得比理科好多了，但还是毫不犹豫地选择了读理科，然后就是两年被学霸血虐的日子了，为什么选理科，大家都说了，理科好选专业呀，理科方便找工作呀．．高三一年埋头于题海，虽然成绩平平，但还是付出了不少的努力。<br>　　　高考结束后，查了成绩，语文竟然没及格，想想估计选择题没对几个吧，不过这都是过去式了。接着得开始选学校，选专业了吧。这时，又到了七大姑八大姨发挥作用的时候了，亲戚们一个个热心的为我出谋划策，学医吧，现在医生挺吃香，年纪大了，更是经验丰富；读师范吧，当老师多稳定，一年还有寒暑假；当时没想太多，一看自己这分数，怕是连杭师范，浙中大都没啥希望，但还是报了，记得浙中大这一栏，前面几个全是医学类药学类的，最后面加了个计算机还是医信，结果就来了浙中大的计算机专业，也算是被调剂来了吧。当时得到通知，家里人一看，一脸蒙蔽，在中医药学计算机？不是在逗我吧，中医药还有这专业？后面老姐无奈的说，计算机也还行吧，这几年互联网还蛮火，程序员工资也还不错，认真学就是了。进入学校，得知学校目标就是培养软件开发人员，听老师的，努力刷题敲代码才是王道呀，然后就走上了刷题的不归路，然而惭愧的表示，自己到现在也没敲多少代码．．不知道为什么，我总是充满焦虑，和老朋友聊天，人家就觉得我考虑的也太长远了，活好当下难道不是更重要吗？平时听多了房子，车子，甚至于学校里的老师也时不时与你感叹现实不易，言外之意，你现在不努力学习，毕业了那什么去找工作，找不到工作拿什么买房买车娶媳妇．．．现在不努力学习，怎么赚大钱，当大官．．呵呵，读大学的意义就只有这样了吗，混得好不好，就看钱多钱少？官大官小？为什么参加竞赛？为了拿奖呗？为什么要拿奖？为了保研呀，为了找份好工作呀！为什么要读研？为了以后找份更好的工作呀！为什么想找份更好的工作？希望自己经济独立，不为生活所迫！这一切看起来是这么自然，这么理所当然。功利心貌似也无可厚非，但这是我想要的吗？能不能让其在我的脑海中淡化点呢，能不能在我看电影的时候，想着的是剧情如何如何精彩；能不能在我看小说的时候，想着的是这个人物多么多么丰富，作者构思多么多么独特；能不能在我听音乐的时候，想着的是旋律多么多么动听，歌词多么多么感人。而不是动不动来一句，你做这些有什么用呢？很多事情难道一定得有用才值得去做吗？尊重差异化是我的原则之一，有的人并不适合当学霸，你别跟我提什么励志鸡汤，很多事情不是努力就能改变的。大学尽管已是一个小社会了，但能不能多保留点纯粹？当热爱运动的在球场上挥洒汗水，热爱阅读的沉浸在图书馆中，痴迷科研的废寝于实验室，热爱音乐的与吉他为伴，热爱美术的与画笔为伴，这时，身边能不能少点这样的声音，整天干这些有用吗？能赚到钱吗？能养你女朋友吗？当然了，也许是不能。对很多人来说，干一辈子还抵不上拆迁户一次拿的钱，《百年孤独》作者马尔克斯，早期创作时一直租着房子，而且付不起租金，当拿到了诺贝尔奖金时，他找到了房东，付给他欠下的房租，然而这个房东拒绝了。生活离不开物质，但不应被物质所绑架，希望见到老同学，他还会敞开心怀与我交谈，最重要最开心的是，我们还是当年的我们，只是长大了一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;想找回纯粹的自己&quot;&gt;&lt;a href=&quot;#想找回纯粹的自己&quot; class=&quot;headerlink&quot; title=&quot;想找回纯粹的自己&quot;&gt;&lt;/a&gt;想找回纯粹的自己&lt;/h1&gt;&lt;p&gt;　　　不知从何时起，发现自己只剩下眼前的苟且，所谓的诗和远方早已不见踪影。不知是社会的悲哀，
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>模式匹配</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>http://huangyiblog.com/算法和数据结构/模式匹配/</id>
    <published>2018-04-17T07:57:20.000Z</published>
    <updated>2018-04-17T08:01:16.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h2><p>1、 BF算法是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符与模式串P的第一个字符进行匹配，若相等，则继续比较S的第二个字符和P的第二个字符；若不相等，则比较S的第二个字符和P的第一个字符，其实相当于将整个模式串往后移了一位，依次比较下去，直到得出最后的匹配结果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BF_Find</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="built_in">string</span>&amp; t)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,count=<span class="number">0</span>;<span class="comment">//初始化  </span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.size())  <span class="comment">//未比较到串尾  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(s.at(i)==t.at(j)) <span class="comment">//继续比较后续字符  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            i++;  </span><br><span class="line">            j++;  </span><br><span class="line">            count++;&#125;  </span><br><span class="line">       <span class="keyword">else</span>   <span class="comment">//指针后退重新匹配  </span></span><br><span class="line">       &#123;  </span><br><span class="line">           i=i-j+<span class="number">1</span>;  </span><br><span class="line">           j=<span class="number">0</span>;  </span><br><span class="line">           count=<span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(count==t.size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"BF算法模式匹配成功,起始位置是:"</span>&lt;&lt;i-count+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">            <span class="keyword">return</span> (i-count+<span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"字符串匹配失败!"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>2、KMP算法与BF算法的区别就在于KMP算法巧妙的消除了指针i的回溯问题，只需确定下次匹配j的位置即可，使得问题的复杂度由O(mn)下降到O(m+n)。</p><p>在KMP算法中，为了确定在匹配不成功时，下次匹配时j的位置，引入了next[]数组，next[j]的值表示P[1…j-1]中最长的后缀等于相同字符序列的前缀的长度。</p><p>　 对于next[]数组的定义如下：</p><p>   （1) next[j] = 0（ j = 1）（t1与Si比较不相等时，下一步进行t1与Si+1的比较）</p><p>　 （2) next[j] = max(k)（1&lt;k&lt;j且 P[1…k-1]=P[j-k+1,j-1]）</p><p>{设next[j]=k;(1&lt;k&lt;j)</p><p>若tk=tj 则next[j+1]=k+1;即next[j+1]=next[j]+1;</p><p>若tk!=tj 则next[j+1]=next[k]+1;               </p><p>}</p><p>　 （3) next[j] = 1  (k=1)(不存在相同子串，下一步进行t1与si的比较)</p><p>因此KMP算法的思想就是：在匹配过程称，若发生不匹配的情况，则目标串的指针i不变，将模式串的指针j移动到next[j]的位置继续进行匹配；当指针j退至0时，指针i和指针j需同时增加1。也就是说，当发生不匹配的情况，让模式串继续往后移，而移动的位数就是模式串的长度-部分匹配值（最长相同前后缀的长度），因为BF里面每次指针i回溯，会导致符合匹配的字符再一次匹配，增大了时间开销。</p><p>求next数组是难点，一般有递推法（用一个while循环）和直接法两种。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BF_Find</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="built_in">string</span>&amp; t)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,count=<span class="number">0</span>;<span class="comment">//初始化  </span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;s.size())  <span class="comment">//未比较到串尾  </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(s.at(i)==t.at(j)) <span class="comment">//继续比较后续字符  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            i++;  </span><br><span class="line">            j++;  </span><br><span class="line">            count++;&#125;  </span><br><span class="line">       <span class="keyword">else</span>   <span class="comment">//指针后退重新匹配  </span></span><br><span class="line">       &#123;  </span><br><span class="line">           i=i-j+<span class="number">1</span>;  </span><br><span class="line">           j=<span class="number">0</span>;  </span><br><span class="line">           count=<span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(count==t.size())  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"BF算法模式匹配成功,起始位置是:"</span>&lt;&lt;i-count+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">            <span class="keyword">return</span> (i-count+<span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"字符串匹配失败!"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="keyword">int</span> *next)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> len = s.size();  </span><br><span class="line">     next[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">     next[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">1</span>;  </span><br><span class="line">     <span class="keyword">while</span>(i &lt; len - <span class="number">1</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">            <span class="keyword">int</span> j = next[i];  </span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; s.at(j) != s.at(i)) j = next[j];  </span><br><span class="line">            <span class="keyword">if</span>(s.at(j) == s.at(i))  next[i + <span class="number">1</span>] = j + <span class="number">1</span>;<span class="comment">//根据next的定义推导出公式  </span></span><br><span class="line">            <span class="keyword">else</span> next[i + <span class="number">1</span>] = j;  </span><br><span class="line">            i++;  </span><br><span class="line">      &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getnextval</span><span class="params">(<span class="built_in">string</span> &amp; s,<span class="keyword">int</span> *next)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;  </span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> len=s.size();  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;len)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>||s.at(i)==s.at(j))&#123;  </span><br><span class="line">            ++i;++j;  </span><br><span class="line">            <span class="keyword">if</span> (s.at(i)!=s.at(j)) next[i]=j;  </span><br><span class="line">            <span class="keyword">else</span> next[i]=next[j];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> j=next[j];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP_Find</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="built_in">string</span>&amp;t)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"> <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;  </span><br><span class="line"> <span class="keyword">int</span> n =t.size();  </span><br><span class="line"> <span class="keyword">int</span> *next = <span class="keyword">new</span> <span class="keyword">int</span>[n];  </span><br><span class="line"> GetNext(t,next);  </span><br><span class="line"> <span class="keyword">while</span>(i&lt;s.size()&amp;&amp;j&lt;t.size()) <span class="comment">//两个串均未比较到串尾  </span></span><br><span class="line">  &#123;  </span><br><span class="line">     <span class="keyword">if</span>((j == <span class="number">0</span>)||(s.at(i)==t.at(j))) <span class="comment">//继续比较后续字符  </span></span><br><span class="line">              &#123;  </span><br><span class="line">                  i++;  </span><br><span class="line">                  j++;  </span><br><span class="line">              &#125;  </span><br><span class="line">              <span class="keyword">else</span>  </span><br><span class="line">              &#123;  </span><br><span class="line">                  j = next[j];<span class="comment">//模式串后移  </span></span><br><span class="line">              &#125;  </span><br><span class="line">   &#125; <span class="keyword">if</span>(j==t.size())  </span><br><span class="line">  &#123;  </span><br><span class="line">   <span class="keyword">int</span> index=i-t.size()+<span class="number">1</span>;  </span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"KMP算法：子串从长串的第"</span>&lt;&lt;index&lt;&lt;<span class="string">"位开始匹配成功!"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">   <span class="keyword">return</span> index;  </span><br><span class="line">  &#125;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"字符串匹配失败!"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> str1,str2;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入主串:"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str1;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入子串:"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;str2;  </span><br><span class="line">    KMP_Find(str1,str2);  </span><br><span class="line">    BF_Find(str1,str2);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;BF算法&quot;&gt;&lt;a href=&quot;#BF算法&quot; class=&quot;headerlink&quot; title=&quot;BF算法&quot;&gt;&lt;/a&gt;BF算法&lt;/h2&gt;&lt;p&gt;1、 BF算法是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符与模式串P的第一个字符进行匹配，若相等，则继续比
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>My movie list of 2017</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/My-movie-list-of-2017/"/>
    <id>http://huangyiblog.com/随笔/My-movie-list-of-2017/</id>
    <published>2018-04-16T08:18:54.000Z</published>
    <updated>2018-04-16T08:22:49.617Z</updated>
    
    <content type="html"><![CDATA[<ol><li>《肖申克的救赎》</li><li>《海边的曼彻斯特》</li><li>《梦与狂想的王国》</li><li>《辛德勒的名单》</li><li>《至爱梵高》</li><li>《熔炉》</li><li>《窃听风暴》</li><li>《美丽心灵》</li><li>《v字仇杀队》</li><li>《忠犬八公的故事》</li><li>《春光乍泄》</li><li>《钢琴家》</li><li>《阿甘正传》</li><li>《霸王别姬》</li><li>《沉默的羔羊系列》</li><li>《蝴蝶效应系列》</li><li>《杀人游戏》</li><li>《海洋》</li><li>《千钧一发》</li><li>《源代码》</li><li>《超脱》</li><li>《猫鼠游戏》</li><li>《心迷宫》</li><li>《寻梦环游记》</li><li>《猫妖记》</li><li>《芳华》</li><li>《奇幻森林》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;《肖申克的救赎》&lt;/li&gt;
&lt;li&gt;《海边的曼彻斯特》&lt;/li&gt;
&lt;li&gt;《梦与狂想的王国》&lt;/li&gt;
&lt;li&gt;《辛德勒的名单》&lt;/li&gt;
&lt;li&gt;《至爱梵高》&lt;/li&gt;
&lt;li&gt;《熔炉》&lt;/li&gt;
&lt;li&gt;《窃听风暴》&lt;/li&gt;
&lt;li&gt;《美丽心灵》&lt;/li&gt;
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视" scheme="http://huangyiblog.com/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>八大排序</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F/"/>
    <id>http://huangyiblog.com/算法和数据结构/八大排序/</id>
    <published>2018-04-13T07:38:10.000Z</published>
    <updated>2018-04-13T10:50:52.486Z</updated>
    
    <content type="html"><![CDATA[<ol><li>插入排序（直接插入排序、希尔排序）</li><li>交换排序（冒泡排序、快速排序）</li><li>选择排序（直接选择排序、堆排序）</li><li>归并排序</li><li>分配排序（基数排序）<br>所需辅助空间最多：归并排序<br>所需辅助空间最少：堆排序<br>平均速度最快：快速排序<br>不稳定：快速排序、希尔排序、堆排序<h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3>基本思想：在要排序的一组数中，假设前面（n-1）个数已经有序，现在要把第n个数插到前面的有序数中，使得这n个数也是有序的。如此反复循环，知道全部有序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">     <span class="keyword">int</span> j=i-<span class="number">1</span>;</span><br><span class="line">     temp=a[i];</span><br><span class="line">     <span class="keyword">for</span>(;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[j];j--)&#123;</span><br><span class="line">       a[j+<span class="number">1</span>]=a[j];<span class="comment">//将大于temp的值整体后移一位</span></span><br><span class="line">     &#125;</span><br><span class="line">     a[j+<span class="number">1</span>]=temp;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">     System.out.println(a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="希尔排序（最小增量排序）"><a href="#希尔排序（最小增量排序）" class="headerlink" title="希尔排序（最小增量排序）"></a>希尔排序（最小增量排序）</h3><p>基本思想：先将要排序的一组数按某个增量d分成若干组，每组中记录的下标相差d。对每组中全部元素进行直接插入排序，然后再用一个较小的增量对它进行分组，在每组中再进行直接插入排序。当增量减到1，进行直接插入排序后，排序完成。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellFort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">   <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">double</span> d1=a.length;</span><br><span class="line">   <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">     d1=Math.ceil(d1/<span class="number">2</span>);</span><br><span class="line">     <span class="keyword">int</span> d = (<span class="keyword">int</span>) d1;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;d;x++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=x+d;i&lt;a.length;i+=d)&#123;</span><br><span class="line">         <span class="keyword">int</span> j=i-d;</span><br><span class="line">         temp=a[i];</span><br><span class="line">         <span class="keyword">for</span>(;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[j];j-=d)&#123;</span><br><span class="line">           a[j+d]=a[j];</span><br><span class="line">         &#125;</span><br><span class="line">         a[j+d]=temp;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><p>基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> position=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">    position=i;</span><br><span class="line">    <span class="keyword">int</span> temp=a[i];</span><br><span class="line">    <span class="keyword">for</span>(;j&lt;a.length;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&lt;temp)&#123;</span><br><span class="line">        temp=a[j];</span><br><span class="line">        position=j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[position]=a[i];</span><br><span class="line">    a[i]=temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>基本思想：堆排序是一种树形选择排序，是对直接选择排序的优化。<br>堆的定义：具有n个元素的序列（h1,h2…hn）,当且仅当满足(hi&gt;=h2i,hi&gt;=2i+1)或(hi&lt;=h2i,hi&lt;=2i+1)(i=1,2,….,n/2)时称为堆。堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。<br>堆排序需要两个过程</p><ol><li>建堆</li><li>堆顶与堆的最后一个元素交换位置<br>这就对应了堆排序的两个函数</li><li>建堆</li><li>交换，从堆中踢出最大数</li><li>剩余结点再建堆，再交换踢出最大数</li><li>以此类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=data[i];</span><br><span class="line">    data[i]=data[j];</span><br><span class="line">    data[j]=tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">int</span> lastIndex)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="keyword">int</span> k=i;</span><br><span class="line">      <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</span><br><span class="line">        <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;</span><br><span class="line">          <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;</span><br><span class="line">            biggerIndex++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;</span><br><span class="line">          swap(data,k,biggerIndex);</span><br><span class="line">          k=biggerIndex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开始排序"</span>);</span><br><span class="line">    <span class="keyword">int</span> arrayLength=a.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i++)&#123;</span><br><span class="line">      buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);</span><br><span class="line">      swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);</span><br><span class="line">      System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">  </span><br><span class="line">    heapSort(a);</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>基本思想：在要排序的一组数中。对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。<br>即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">        temp=a[j];</span><br><span class="line">        a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">        a[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">  System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基本思想：选择一个基准元素，通常选择第一个元素或者最后一个元素，通过一趟扫描，将待排序序列分成两部分，一部分比基准元素小，一部分大于等于基准元素，此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] list,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=list[low];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">      <span class="keyword">while</span>(low&lt;high&amp;&amp;list[high]&gt;=tmp)&#123;</span><br><span class="line">        high--;</span><br><span class="line">      &#125;</span><br><span class="line">      list[low]=list[high];</span><br><span class="line">      <span class="keyword">while</span>(low&lt;high&amp;&amp;list[low]&lt;=tmp)&#123;</span><br><span class="line">        low++;</span><br><span class="line">      &#125;</span><br><span class="line">      list[high]=list[low];</span><br><span class="line">    &#125;</span><br><span class="line">    list[low]=tmp;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">      <span class="keyword">int</span> middle=getMiddle(list, low, high);</span><br><span class="line">      quickSort(list,low,middle-<span class="number">1</span>);</span><br><span class="line">      quickSort(list,middle+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a2.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      quickSort(a2,<span class="number">0</span>,a2.length-<span class="number">1</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">    </span><br><span class="line">     quick(a);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">       System.out.println(a[i]);</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>基本思想：归并排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后把子序列合并成整体有序序列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">      <span class="keyword">int</span> center=(left+right)/<span class="number">2</span>;</span><br><span class="line">      sort(data,left,center);</span><br><span class="line">      sort(data, center+<span class="number">1</span>, right);</span><br><span class="line">      merge(data,left,center,right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] data,<span class="keyword">int</span> left,<span class="keyword">int</span> center,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] tmpArr=<span class="keyword">new</span> <span class="keyword">int</span>[data.length];</span><br><span class="line">    <span class="keyword">int</span> mid=center+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> third=left;</span><br><span class="line">    <span class="keyword">int</span> tmp=left;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=center&amp;&amp;mid&lt;=right)&#123;</span><br><span class="line">      <span class="keyword">if</span>(data[left]&lt;=data[mid])&#123;</span><br><span class="line">        tmpArr[third++]=data[left++];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        tmpArr[third++]=data[mid++];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(mid&lt;=right)&#123;</span><br><span class="line">      tmpArr[third++]=data[mid++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=center)&#123;</span><br><span class="line">      tmpArr[third++]=data[left++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=right)&#123;</span><br><span class="line">      data[tmp]=tmpArr[tmp++];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">    sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>&#125;;</span><br><span class="line">   sort(a);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">     System.out.println(a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> max=array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array[i]&gt;max)&#123;</span><br><span class="line">      max=array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> time=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(max&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    max/=<span class="number">10</span>;</span><br><span class="line">    time++;</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;ArrayList&gt;queue=<span class="keyword">new</span> ArrayList&lt;ArrayList&gt;();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt;queue1=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    queue.add(queue1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;time;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;array.length;j++)&#123;</span><br><span class="line">      <span class="keyword">int</span> x= array[j]%(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i+<span class="number">1</span>)/(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, i);</span><br><span class="line">      ArrayList&lt;Integer&gt;queue2=queue.get(x);</span><br><span class="line">      queue2.add(array[j]);</span><br><span class="line">      queue.set(x,queue2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">10</span>;k++)&#123;</span><br><span class="line">      <span class="keyword">while</span>(queue.get(k).size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt;queue3=queue.get(k);</span><br><span class="line">        array[count]=queue3.get(<span class="number">0</span>);</span><br><span class="line">        queue3.remove(<span class="number">0</span>);</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;插入排序（直接插入排序、希尔排序）&lt;/li&gt;
&lt;li&gt;交换排序（冒泡排序、快速排序）&lt;/li&gt;
&lt;li&gt;选择排序（直接选择排序、堆排序）&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;分配排序（基数排序）&lt;br&gt;所需辅助空间最多：归并排序&lt;br&gt;所需辅助空间最少
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://huangyiblog.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>洛神赋</title>
    <link href="http://huangyiblog.com/%E6%91%98%E5%BD%95/%E6%B4%9B%E7%A5%9E%E8%B5%8B/"/>
    <id>http://huangyiblog.com/摘录/洛神赋/</id>
    <published>2018-04-13T06:27:03.000Z</published>
    <updated>2018-04-13T06:37:36.981Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/luoshenfu.jpg" alt="Alt text"></p><h1 id="洛神赋"><a href="#洛神赋" class="headerlink" title="洛神赋"></a>洛神赋</h1><p>　　　　　　　【作者】曹植 【朝代】魏晋<br>黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰：</p><p>余从京域，言归东藩。背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则末察，仰以殊观，睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯？若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王所见，无乃日乎？其状若何？臣愿闻之。”</p><p>余告之曰：“其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。仿佛兮若轻云之蔽月，飘摇兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜，明眸善睐，靥辅承权。瑰姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。</p><p>于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。壤皓腕于神浒兮，采湍濑之玄芝。余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修，羌习礼而明诗。抗琼［王弟］以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。</p><p>于是洛灵感焉，徙倚彷徨，神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。</p><p>尔乃众灵杂遢，命俦啸侣，或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神，凌波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。</p><p>于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔，鲸鲵踊而夹毂，水禽翔而为卫。</p><p>于是越北沚。过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮。哀一逝而异乡。无微情以效爱兮，献江南之明。虽潜处于太阳，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。</p><p>于是背下陵高，足往神留，遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵督。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。</p><p>备注：赋，是我国古代的一种文体，它讲究文采，韵律，兼具诗歌和散文性质。是以“铺采摛文，体物写志”为手段，侧重于写景，借景抒情。以“颂美”和“讽喻”为目的的一种有韵文体。它多用铺陈叙事的手法，赋必须押韵，这是赋区别于其他文体的一个主要特征。 起于战国，盛于两汉。赋最早出现于诸子散文中，叫”短赋“；以屈原为代表的”骚体“是诗向赋的过渡，叫”骚赋“；汉代正式确立了赋的体例，称为“辞赋”；魏晋以后，赋日益向骈文方向发展，叫做“骈赋”；唐代又由骈体转为律体，叫“律赋”；宋代用散文的形式写赋，称“文赋”。著名的赋体文章有司马相如的《子虚赋》，杜牧的《阿房宫赋》，欧阳修的《秋声赋》，苏轼的《赤壁赋》等。<br>作者曹植以浪漫主义的手法，通过梦幻的境界，描写人神之间的真挚爱情，但终因“人神殊道”无从结合而惆怅分离。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/luoshenfu.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;洛神赋&quot;&gt;&lt;a href=&quot;#洛神赋&quot; class=&quot;headerlink&quot; title=&quot;洛神赋&quot;&gt;&lt;/a&gt;洛神赋&lt;/h1&gt;&lt;p&gt;　　　　　　　【作者】曹植
      
    
    </summary>
    
      <category term="摘录" scheme="http://huangyiblog.com/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>长恨歌</title>
    <link href="http://huangyiblog.com/%E6%91%98%E5%BD%95/%E9%95%BF%E6%81%A8%E6%AD%8C/"/>
    <id>http://huangyiblog.com/摘录/长恨歌/</id>
    <published>2018-04-12T08:17:13.000Z</published>
    <updated>2018-04-12T08:35:46.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="长恨歌"><a href="#长恨歌" class="headerlink" title="　　　　　长恨歌"></a>　　　　　长恨歌</h1><p>　　　　　　　　　　　　　　　　　　【唐】　白居易<br>　　　　　　　　　　汉皇重色思倾国，御宇多年求不得。</p><p>　　　　　　　　　　杨家有女初长成，养在深闺人未识。</p><p>　　　　　　　　　　天生丽质难自弃，一朝选在君王侧。</p><p>　　　　　　　　　　回眸一笑百媚生，六宫粉黛无颜色。</p><p>　　　　　　　　　　春寒赐浴华清池，温泉水滑洗凝脂。</p><p>　　　　　　　　　　侍儿扶起娇无力，始是新承恩泽时。</p><p>　　　　　　　　　　云鬓花颜金步摇，芙蓉帐暖度春宵。</p><p>　　　　　　　　　　春宵苦短日高起，从此君王不早朝。</p><p>　　　　　　　　　　承欢侍宴无闲暇，春从春游夜专夜。</p><p>　　　　　　　　　　后宫佳丽三千人，三千宠爱在一身。</p><p>　　　　　　　　　　金屋妆成娇侍夜，玉楼宴罢醉和春。</p><p>　　　　　　　　　　姊妹弟兄皆列土，可怜光彩生门户。</p><p>　　　　　　　　　　遂令天下父母心，不重生男重生女。</p><p>　　　　　　　　　　骊宫高处入青云，仙乐风飘处处闻。</p><p>　　　　　　　　　　缓歌谩舞凝丝竹，尽日君王看不足。</p><p>　　　　　　　　　　渔阳鼙鼓动地来，惊破霓裳羽衣曲。</p><p>　　　　　　　　　　九重城阙烟尘生，千乘万骑西南行。</p><p>　　　　　　　　　　翠华摇摇行复止，西出都门百余里。</p><p>　　　　　　　　　　六军不发无奈何，宛转蛾眉马前死。</p><p>　　　　　　　　　　花钿委地无人收，翠翘金雀玉搔头。</p><p>　　　　　　　　　　君王掩面救不得，回看血泪相和流。</p><p>　　　　　　　　　　黄埃散漫风萧索，云栈萦纡登剑阁。</p><p>　　　　　　　　　　峨嵋山下少人行，旌旗无光日色薄。</p><p>　　　　　　　　　　蜀江水碧蜀山青，圣主朝朝暮暮情。</p><p>　　　　　　　　　　行宫见月伤心色，夜雨闻铃肠断声。</p><p>　　　　　　　　　　天旋地转回龙驭，到此踌躇不能去。</p><p>　　　　　　　　　　马嵬坡下泥土中，不见玉颜空死处。</p><p>　　　　　　　　　　君臣相顾尽沾衣，东望都门信马归。</p><p>　　　　　　　　　　归来池苑皆依旧，太液芙蓉未央柳。</p><p>　　　　　　　　　　芙蓉如面柳如眉，对此如何不泪垂。</p><p>　　　　　　　　　　春风桃李花开日，秋雨梧桐叶落时。</p><p>　　　　　　　　　　西宫南内多秋草，落叶满阶红不扫。</p><p>　　　　　　　　　　梨园弟子白发新，椒房阿监青娥老。</p><p>　　　　　　　　　　夕殿萤飞思悄然，孤灯挑尽未成眠。</p><p>　　　　　　　　　　迟迟钟鼓初长夜，耿耿星河欲曙天。</p><p>　　　　　　　　　　鸳鸯瓦冷霜华重，翡翠衾寒谁与共。</p><p>　　　　　　　　　　悠悠生死别经年，魂魄不曾来入梦。</p><p>　　　　　　　　　　临邛道士鸿都客，能以精诚致魂魄。</p><p>　　　　　　　　　　为感君王辗转思，遂教方士殷勤觅。</p><p>　　　　　　　　　　排空驭气奔如电，升天入地求之遍。</p><p>　　　　　　　　　　上穷碧落下黄泉，两处茫茫皆不见。</p><p>　　　　　　　　　　忽闻海上有仙山，山在虚无缥渺间。</p><p>　　　　　　　　　　楼阁玲珑五云起，其中绰约多仙子。</p><p>　　　　　　　　　　中有一人字太真，雪肤花貌参差是。</p><p>　　　　　　　　　　金阙西厢叩玉扃，转教小玉报双成。</p><p>　　　　　　　　　　闻道汉家天子使，九华帐里梦魂惊。</p><p>　　　　　　　　　　揽衣推枕起徘徊，珠箔银屏迤逦开。</p><p>　　　　　　　　　　云鬓半偏新睡觉，花冠不整下堂来。</p><p>　　　　　　　　　　风吹仙袂飘飘举，犹似霓裳羽衣舞。</p><p>　　　　　　　　　　玉容寂寞泪阑干，梨花一枝春带雨。</p><p>　　　　　　　　　　含情凝睇谢君王，一别音容两渺茫。</p><p>　　　　　　　　　　昭阳殿里恩爱绝，蓬莱宫中日月长。</p><p>　　　　　　　　　　回头下望人寰处，不见长安见尘雾。</p><p>　　　　　　　　　　惟将旧物表深情，钿合金钗寄将去。</p><p>　　　　　　　　　　钗留一股合一扇，钗擘黄金合分钿。</p><p>　　　　　　　　　　但教心似金钿坚，天上人间会相见。</p><p>　　　　　　　　　　临别殷勤重寄词，词中有誓两心知。</p><p>　　　　　　　　　　七月七日长生殿，夜半无人私语时。</p><p>　　　　　　　　　　在天愿作比翼鸟，在地愿为连理枝。</p><p>　　　　　　　　　　天长地久有时尽，此恨绵绵无绝期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;长恨歌&quot;&gt;&lt;a href=&quot;#长恨歌&quot; class=&quot;headerlink&quot; title=&quot;　　　　　长恨歌&quot;&gt;&lt;/a&gt;　　　　　长恨歌&lt;/h1&gt;&lt;p&gt;　　　　　　　　　　　　　　　　　　【唐】　白居易&lt;br&gt;　　　　　　　　　　汉皇重色思倾国，御宇多年求不得。&lt;
      
    
    </summary>
    
      <category term="摘录" scheme="http://huangyiblog.com/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>好了歌</title>
    <link href="http://huangyiblog.com/%E6%91%98%E5%BD%95/%E5%A5%BD%E4%BA%86%E6%AD%8C/"/>
    <id>http://huangyiblog.com/摘录/好了歌/</id>
    <published>2018-04-11T13:09:09.000Z</published>
    <updated>2018-04-11T13:13:29.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红楼梦原文"><a href="#红楼梦原文" class="headerlink" title="红楼梦原文"></a>红楼梦原文</h1><p>甄士隐知投人不著，心中未免悔恨，再兼上年惊唬，急忿怨痛已伤，暮年之人，贫病交攻，竟渐渐的露出那下世的光景来。可巧这日拄了拐杖挣到街前散散心时，忽见那边来了一个跛足道人，疯癫落拓，麻鞋鹑衣，口内念着几句言词道：</p><h3 id="世人都晓神仙好，惟有功名忘不了！"><a href="#世人都晓神仙好，惟有功名忘不了！" class="headerlink" title="世人都晓神仙好，惟有功名忘不了！"></a>世人都晓神仙好，惟有功名忘不了！</h3><h3 id="古今将相在何方？荒冢一堆草没了。"><a href="#古今将相在何方？荒冢一堆草没了。" class="headerlink" title="古今将相在何方？荒冢一堆草没了。"></a>古今将相在何方？荒冢一堆草没了。</h3><h3 id="世人都晓神仙好，只有金银忘不了！"><a href="#世人都晓神仙好，只有金银忘不了！" class="headerlink" title="世人都晓神仙好，只有金银忘不了！"></a>世人都晓神仙好，只有金银忘不了！</h3><h3 id="终朝只恨聚无多，及到多时眼闭了。"><a href="#终朝只恨聚无多，及到多时眼闭了。" class="headerlink" title="终朝只恨聚无多，及到多时眼闭了。"></a>终朝只恨聚无多，及到多时眼闭了。</h3><h3 id="世人都晓神仙好，只有娇妻忘不了！"><a href="#世人都晓神仙好，只有娇妻忘不了！" class="headerlink" title="世人都晓神仙好，只有娇妻忘不了！"></a>世人都晓神仙好，只有娇妻忘不了！</h3><h3 id="君生日日说恩情，君死又随人去了。"><a href="#君生日日说恩情，君死又随人去了。" class="headerlink" title="君生日日说恩情，君死又随人去了。"></a>君生日日说恩情，君死又随人去了。</h3><h3 id="世人都晓神仙好，只有儿孙忘不了！"><a href="#世人都晓神仙好，只有儿孙忘不了！" class="headerlink" title="世人都晓神仙好，只有儿孙忘不了！"></a>世人都晓神仙好，只有儿孙忘不了！</h3><h3 id="痴心父母古来多，孝顺儿孙谁见了？"><a href="#痴心父母古来多，孝顺儿孙谁见了？" class="headerlink" title="痴心父母古来多，孝顺儿孙谁见了？"></a>痴心父母古来多，孝顺儿孙谁见了？</h3><p>士隐听了，便迎上来道：“你满口说些甚么？只听见些‘好了’‘好了’。”那道人笑道：“你若果听见‘好了’二字，还算你明白。可知世上万般，好便是了，了便是好。若不了，便不好；若要好，须是了。我这歌儿便名《好了歌》。”士隐本是有夙慧的，一闻此言，心中早已彻悟，因笑道：“且住！待我将你这《好了歌》注解出来何如？”道人笑道：“你就请解。”士隐乃说道：<br>陋室空堂，当年笏满床。<br>衰草枯杨，曾为歌舞场。<br>蛛丝儿结满雕梁，绿纱今又糊在蓬窗上。<br>说甚么脂正浓、粉正香，如何两鬓又成霜？<br>昨日黄土陇头送白骨，今宵红灯帐底卧鸳鸯。<br>金满箱，银满箱，展眼乞丐人皆谤。<br>正叹他人命不长，那知自己归来丧！<br>训有方，保不定日后作强梁。<br>择膏粱，谁承望流落在烟花巷！<br>因嫌纱帽小，致使锁枷杠，<br>昨怜破袄寒，今嫌紫蟒长。<br>乱烘烘你方唱罢我登场，反认他乡是故乡。<br>甚荒唐，到头来都是为他人作嫁衣裳。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;红楼梦原文&quot;&gt;&lt;a href=&quot;#红楼梦原文&quot; class=&quot;headerlink&quot; title=&quot;红楼梦原文&quot;&gt;&lt;/a&gt;红楼梦原文&lt;/h1&gt;&lt;p&gt;甄士隐知投人不著，心中未免悔恨，再兼上年惊唬，急忿怨痛已伤，暮年之人，贫病交攻，竟渐渐的露出那下世的光景来。可巧这日
      
    
    </summary>
    
      <category term="摘录" scheme="http://huangyiblog.com/categories/%E6%91%98%E5%BD%95/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://huangyiblog.com/算法和数据结构/归并排序/</id>
    <published>2018-04-11T10:23:35.000Z</published>
    <updated>2018-04-11T10:38:56.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>  最基本的2-路归并排序。<br>  原理：将序列两两分组，将序列归并为[n/2]个组，组内单独排序；然后将这些组再两两归并，<br>  生成[n/4]个组，组内在单独排序；以此内推，直到只剩下一个组为止。<br>  时间复杂度为O(nlogn)<br>例：将序列{66,12,33,57,64,27,18}进行2路归并排序</p><ol><li><p>第一趟</p>{ { 12,66 },{ 33,57 },{ 27,64 },{ 18 } }</li><li><p>第二题</p>{ { 12,33,57,66 },{ 18,27,64 } }</li><li><p>第三趟{12,18,27,33,57,64,66}</p></li></ol><ul><li><p>递归实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> l1,<span class="keyword">int</span> r1,<span class="keyword">int</span> l2,<span class="keyword">int</span> r2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l1,j=l2;</span><br><span class="line">    <span class="keyword">int</span> temp[maxn],index=<span class="number">0</span>;<span class="comment">//temp临时存放合并后的数组，index为其下标</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=r1&amp;&amp;j&lt;=r2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</span><br><span class="line">            temp[index++]=a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp[index++]=a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=r1) temp[index++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r2) temp[index++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">        a[l1+i]=temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">    mergeSort(a,left,mid); <span class="comment">//左子区间归并排序</span></span><br><span class="line">    mergeSort(a,mid+<span class="number">1</span>,right);<span class="comment">//右子区间归并排序</span></span><br><span class="line">    merge(a,left,mid,mid+<span class="number">1</span>,right); 将左右子区间合并</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非递归实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> step=<span class="number">2</span>;step/<span class="number">2</span>&lt;=n;step*=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i+=step)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=i+step/<span class="number">2</span><span class="number">-1</span>;  </span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=n)&#123;     <span class="comment">//sort(a+i,a+min(i+step,n+1));</span></span><br><span class="line">            merge(a,i,mid,mid+<span class="number">1</span>,min(i+step<span class="number">-1</span>,n))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;p&gt;  最基本的2-路归并排序。&lt;br&gt;  原理：将序列两两分组，将序列归并为[n/2]个组，组内单独排序；然后将这些组再两两归
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>区间贪心</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83/"/>
    <id>http://huangyiblog.com/算法和数据结构/区间贪心/</id>
    <published>2018-04-11T09:44:16.000Z</published>
    <updated>2018-04-11T09:53:13.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>  贪心是用来解决一类最优化问题，并希望由局部最优策略来推得全局最优结果的算法思想。<br>  贪心算法使用的问题一定满足最优子结构性质，即一个问题的最优解可以由它的子问题的最优解有效地构造出来。</p><h2 id="区间不相交问题："><a href="#区间不相交问题：" class="headerlink" title="区间不相交问题："></a>区间不相交问题：</h2><p>  给出n个开区间(x,y),从中选择尽可能多的区间，使得这些开区间两两没有交集。<br>  首先考虑最简单的情况，即开区间I1被开区间I2包含，那么I1显然是最好的选择，因为这样就有更大的空间去容纳其他区间。<br>  之后将所有开区间按左端点x从大到小排序，总是先选择左端点最大的区间。当然也可以考虑选择右端点最小的区间。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inteval</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Inteval a,Inteval b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> a.x&gt;b.x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q[i].x,&amp;q[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(q,q+n,cmp);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>,lastx = q[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].y&lt;=lastx)&#123;</span><br><span class="line">                lastx=q[i].x;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="区间选点问题："><a href="#区间选点问题：" class="headerlink" title="区间选点问题："></a>区间选点问题：</h2><p>  给出n个闭区间[x,y],求最少需要确定多少个点，才能使每个闭区间中都至少存在一个点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;贪心&quot;&gt;&lt;a href=&quot;#贪心&quot; class=&quot;headerlink&quot; title=&quot;贪心&quot;&gt;&lt;/a&gt;贪心&lt;/h1&gt;&lt;p&gt;  贪心是用来解决一类最优化问题，并希望由局部最优策略来推得全局最优结果的算法思想。&lt;br&gt;  贪心算法使用的问题一定满足最优子结构性质，即
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>ZCMU2034</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ZCMU-2034/"/>
    <id>http://huangyiblog.com/算法和数据结构/ZCMU-2034/</id>
    <published>2018-04-11T07:30:33.000Z</published>
    <updated>2018-04-11T09:47:21.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阶乘计算"><a href="#阶乘计算" class="headerlink" title="阶乘计算"></a>阶乘计算</h1><p>Time Limit: 1 Sec  Memory Limit: 128 MB<br>Submit: 43  Solved: 34<br>[Submit][Status][Web Board]<br>Description<br>输入一个正整数n，输出n!的值。<br>其中n!=1<em> 2 </em> 3 <em>…</em>n。<br>算法描述<br>n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。<br>将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。<br>首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p><p>Input<br>　　输入包含一个正整数n，n&lt;=1000。</p><p>Output<br>　　输出n!的准确值。</p><p>Sample Input<br>10<br>Sample Output<br>3628800<br>HINT<br>Source<br>基础练习</p><p>相当于是大数的阶乘，也就是基本类型存不下，需要用数组来进行模拟。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">3000</span>],i,j,n;  </span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>,s;  </span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </span><br><span class="line">    a[<span class="number">0</span>]=<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3000</span>;j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            s=a[j]*i+c;  </span><br><span class="line">            a[j]=s%<span class="number">10</span>;  </span><br><span class="line">            c=s/<span class="number">10</span>;<span class="comment">//保留进位  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2999</span>;i&gt;=<span class="number">0</span>;i--)  </span><br><span class="line">        <span class="keyword">if</span>(a[i])  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阶乘计算&quot;&gt;&lt;a href=&quot;#阶乘计算&quot; class=&quot;headerlink&quot; title=&quot;阶乘计算&quot;&gt;&lt;/a&gt;阶乘计算&lt;/h1&gt;&lt;p&gt;Time Limit: 1 Sec  Memory Limit: 128 MB&lt;br&gt;Submit: 43  Solved:
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ZCMU" scheme="http://huangyiblog.com/tags/ZCMU/"/>
    
  </entry>
  
  <entry>
    <title>ZCMU-1620</title>
    <link href="http://huangyiblog.com/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/ZCMU-1620/"/>
    <id>http://huangyiblog.com/算法和数据结构/ZCMU-1620/</id>
    <published>2018-04-10T13:11:41.000Z</published>
    <updated>2018-04-10T13:46:54.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1620-全排列"><a href="#1620-全排列" class="headerlink" title="1620: 全排列"></a>1620: 全排列</h2><p>Time Limit: 1 Sec  Memory Limit: 128 MB<br>Submit: 198  Solved: 89<br>[Submit][Status][Web Board]<br>Description<br>给定n个数 a[0] , a[1] …….. a[n-1], 输出其全排列。</p><p>Input<br>第一行输入一个数n，（n&lt;7）</p><p>接下来一行输入n个数。</p><p>Output<br>按字典序从小到大输出全排列</p><p>Sample Input<br>3<br>1 2 3<br>3<br>1 2 2<br>Sample Output<br>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1<br>1 2 2<br>2 1 2<br>2 2 1<br>HINT</p><ul><li><p>全排列，枚举排列常用的方法有两种：一种是递归枚举，另一种是用STL中的next_permutation</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_permutation</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> *p,<span class="keyword">int</span> *a,<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!i||p[i]!=p[i<span class="number">-1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ok=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cur;j++)<span class="keyword">if</span>(a[j]==p[i]) c1++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) <span class="keyword">if</span>(p[i]==p[j]) c2++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(c1&lt;c2)&#123;</span><br><span class="line">            a[cur]=p[i];</span><br><span class="line">            print_permutation(n,p,a,cur+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,p[<span class="number">10</span>],a[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p,p+n);</span><br><span class="line">        print_permutation(n,p,a,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n<span class="number">-1</span>]);</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a,a+n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1620-全排列&quot;&gt;&lt;a href=&quot;#1620-全排列&quot; class=&quot;headerlink&quot; title=&quot;1620: 全排列&quot;&gt;&lt;/a&gt;1620: 全排列&lt;/h2&gt;&lt;p&gt;Time Limit: 1 Sec  Memory Limit: 128 MB&lt;br&gt;S
      
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://huangyiblog.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ZCMU" scheme="http://huangyiblog.com/tags/ZCMU/"/>
    
  </entry>
  
  <entry>
    <title>《控方证人》观后感</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E3%80%8A%E6%8E%A7%E6%96%B9%E8%AF%81%E4%BA%BA%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>http://huangyiblog.com/随笔/《控方证人》观后感/</id>
    <published>2018-04-03T06:41:00.000Z</published>
    <updated>2018-04-03T07:58:35.104Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/1522739023761.png" alt="Alt text"><br>  　　这个周末有点小忙哈哈，没办法，得准备Ｊａｖａ课件呀，好歹也是个愚人节呢，得让自己放松下，于是花了点时间看了部老电影《控方证人》，一部上世纪６０年代的电影，一部黑白片。我一般不大会特意去找某部电影，一些早已被广为认可的经典我会时不时抽几部欣赏欣赏，很少有令我失望过，当然，这次也不例外。<br>  　　很好的一部剧情片，惊悚我倒没怎么感觉到，但不得不说，一流的演员以及一流的剧本让我佩服不已，至少我是被骗到了，结局在我的意料之外，当然中间确实有些困惑的地方，我很理解为什么沃尔的妻子竟然当起了控方证人。影片开始，个性鲜明的律师威尔弗里德爵士便出现在荧幕上，很有意思的一个家伙，一看到雪茄就耐不住想吸上一口，看似嘴不饶人，其实内心善良热诚。他身边的护士尽管一天到晚啰里啰嗦招人烦，却也是真正为威尔弗里德爵士的健康着想。紧接着，剧情展开，控方与被告的辩论也即将展开。<br>  　　我为什么说我被骗到了，起初我真的认为沃尔是无辜的，是被冤枉的，富婆的死只是被某个入室抢劫犯误杀了，紧接着，伟大的威尔弗里德爵士作为正义的化身，冒着身体旧病复发的风险为沃尔展开辩护，然后一步步过关斩将，去的胜利，沃尔无罪释放！看，结局多么美好，但细想一番，若真是如此，这剧情片恐怕也难成为经典了。开头的警巡，包括之后的女佣，这两人的证词在我看来都很正常，警巡，按照职业习惯进行了正常的回答。至于女佣，势利的姿态可以说是展现的很充分，哈哈，这世上没有无缘无故的恨，沃尔的出现让本该属于她的遗产瞬间成为一场空，他恨透了沃尔，巴不得看着他上绞刑架．．但后一位控方证人让我难以理解，那就是沃尔的妻子克里斯汀，她的出现让我困惑，我相信威尔弗里德爵士当时也是和我相似的心情。看似恩爱的夫妻有什么理由说反目就反目呢，难道之前的感情本就是虚假的？没看到结尾，我真的没猜到这对夫妻竟然都在演戏，在法庭上演了一出精彩的戏。只不过人人喊打的克里斯汀确是陷入爱情的有心人，而看似无辜的沃尔才是花心大萝卜，才是真凶。法律规定，嫌疑人的妻子是无法为其辩护的，证词无效，于是克里斯汀就想到了该当控告，直到最后决定判决的那几分情书信纸，也不过只是她的计划一部分。好可怕的一个女人，竟然铁定了心犯伪证罪也要救这样一个花心大萝卜，难以理解。两个人一唱一和的一出戏，骗过了整个法庭，我没有想到，沃尔竟然真的杀了富婆，更没想到克里斯汀知道是他杀了富婆还要牺牲自己就他，更没想到两人的感情，谁是真心，谁是假意让我一脸蒙蔽，人生如戏，全靠演技呀！哈哈哈～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/1522739023761.png&quot; alt=&quot;Alt text&quot;&gt;&lt;br&gt;  　　这个周末有点小忙哈哈，没办法，得准备Ｊａｖａ课件呀，好歹也是个愚人节呢，得让自己放松下，于是花了点时间看了部老电影《控方证人》，一部上世纪６０年代的电影，一部黑
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视" scheme="http://huangyiblog.com/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>我的2017书单</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%88%91%E7%9A%842017%E4%B9%A6%E5%8D%95/"/>
    <id>http://huangyiblog.com/随笔/我的2017书单/</id>
    <published>2018-04-01T03:00:34.000Z</published>
    <updated>2018-04-01T08:19:34.836Z</updated>
    
    <content type="html"><![CDATA[<p>1、《平凡的世界》<br>2、《霜冷长河》<br>3、《霍乱时期的爱情》<br>4、《文化苦旅》<br>5、《千年一叹》<br>6、《许三观卖血记》<br>7、《白夜行》<br>8、《嫌疑人X的献身》<br>9、《解忧杂货店》<br>10、《资治通鉴》<br>11、《活着》<br>12、《三体》<br>13、《百年孤独》<br>14、《活着为了讲述》<br>15、《人生》<br>16、《偷影子的人》<br>17、《黄金时代》<br>18、《无声告白》<br>19、《小王子》<br>20、《夜莺与玫瑰》<br>21、《飘》<br>22、《海边的卡夫卡》<br>23、《东方快车上的谋杀案》<br>24、《挪威的森林》<br>25、《雪国》<br>26、《不能承受的生命之轻》<br>27、《恶意》<br>28、《陶庵梦忆》<br>29、《红楼梦》<br>30、《沉默的大多数》<br>31、《少年维特的烦恼》<br>32、《傲慢与偏见》<br>33、《麦田里的守望者》<br>34、《北岛诗集》<br>35、《顾城诗集》<br>36、《海子诗集》<br>37、《余光中散文诗集》<br>38、《鳄鱼街》<br>39、《自由在高处》<br>40、《愿你与这世界温暖相拥》<br>41、《很高兴见到你》<br>42、《无证之罪》<br>43、《白马山庄杀人事件》<br>44、《浮士德》<br>45、《老人与海》<br>46、《北鸢》<br>47、《菜根谭》<br>48、《单恋》<br>49、《鬼谷子》<br>50、《人类群星闪耀时》<br>51、《人间词话》<br>52、《古文观止》<br>53、《假面饭店》<br>54、《幻夜》<br>55、《看见》<br>56、《撒哈拉的故事》<br>57、《月亮和六便士》<br>58、《漫漫自由路》<br>59、《1984》<br>60、《1980年代的爱情》<br>61、《本草纲目》<br>62、《傅雷家书》<br>63、《我们三》<br>64、《围城》<br>65、《钱钟书传》<br>66、《草房子》<br>67、《我的职业是小说家》<br>68、《爱你就像爱生命》<br>69、《这些人那些事》<br>70、《明朝那些事》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、《平凡的世界》&lt;br&gt;2、《霜冷长河》&lt;br&gt;3、《霍乱时期的爱情》&lt;br&gt;4、《文化苦旅》&lt;br&gt;5、《千年一叹》&lt;br&gt;6、《许三观卖血记》&lt;br&gt;7、《白夜行》&lt;br&gt;8、《嫌疑人X的献身》&lt;br&gt;9、《解忧杂货店》&lt;br&gt;10、《资治通鉴》&lt;br&gt;11、《活着》
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>C++字符串操作</title>
    <link href="http://huangyiblog.com/%E6%8A%80%E6%9C%AF/C++%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>http://huangyiblog.com/技术/C++字符串操作/</id>
    <published>2018-03-31T08:55:28.000Z</published>
    <updated>2018-03-31T08:57:39.992Z</updated>
    
    <content type="html"><![CDATA[<p>1）字符串操作<br>strcpy(p, p1) 复制字符串<br>strncpy(p, p1, n) 复制指定长度字符串<br>strcat(p, p1) 附加字符串<br>strncat(p, p1, n) 附加指定长度字符串<br>strlen(p) 取字符串长度<br>strcmp(p, p1) 比较字符串<br>strcasecmp忽略大小写比较字符串<br>strncmp(p, p1, n) 比较指定长度字符串<br>strchr(p, c) 在字符串中查找指定字符<br>strrchr(p, c) 在字符串中反向查找<br>strstr(p, p1) 查找字符串<br>strpbrk(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找该集合的任一元素<br>strspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找不属于该集合的任一元素的偏移<br>strcspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找属于该集合的任一元素的偏移  </p><ul><li>具有指定长度的字符串处理函数在已处理的字符串之后填补零结尾符 </li></ul><p>2）字符串到数值类型的转换<br>strtod(p, ppend) 从字符串 p 中转换 double 类型数值，并将后续的字符串指针存储到 ppend 指向的 char* 类型存储。<br>strtol(p, ppend, base) 从字符串 p 中转换 long 类型整型数值，base 显式设置转换的整型进制，设置为 0 以根据特定格式判断所用进制，0x, 0X 前缀以解释为十六进制格式整型，0    前缀以解释为八进制格式整型<br>atoi(p) 字符串转换到 int 整型<br>atof(p) 字符串转换到 double 符点数<br>atol(p) 字符串转换到 long 整型 </p><p>void <em>memset(void </em>dest, int c, size_t count);<br>将dest前面count个字符置为字符c.  返回dest的值. </p><p>void <em>memmove(void </em>dest, const void *src, size_t count);<br>从src复制count字节的字符到dest. 如果src和dest出现重叠, 函数会自动处理.  返回dest的值. </p><p>void <em>memcpy(void </em>dest, const void *src, size_t count);<br>从src复制count字节的字符到dest. 与memmove功能一样, 只是不能处理src和dest出现重叠.  返回dest的值. </p><p>void <em>memchr(const void </em>buf, int c, size_t count);<br>在buf前面count字节中查找首次出现字符c的位置. 找到了字符c或者已经搜寻了count个字节, 查找即停止. 操作成功则返回buf中首次出现c的位置指针, 否则返回NULL. </p><p>void <em>_memccpy(void </em>dest, const void *src, int c, size_t count);<br>从src复制0个或多个字节的字符到dest. 当字符c被复制或者count个字符被复制时, 复制停止. </p><p>如果字符c被复制, 函数返回这个字符后面紧挨一个字符位置的指针. 否则返回NULL. </p><p>/<em>实现strcpy函数,将源串strSrc的内容复制到目标串strDest，返回值为指向目标串的指针</em>/<br>char <em>strcpy(char </em>strDest,const char <em>strSrc)//源字符串+const，表明其为输入参数<br>{<br>    assert((strDest!=NULL&amp;&amp;(strSrc!=NULL)));<br>    //对源地址和目的地址加非0判断<br>    char </em>address=strDest;<br>    while((<em>strDest++=</em>strSrc++)!=’\0’);<br>    return address;<br>}<br>/<em>实现strcat函数：将源串添加到str1的末尾，同时覆盖旧串末尾的’\0’,在新串末尾+’\0’,返回指向str1的指针。</em>/<br>char <em>strcat(char </em>str1,char <em>str2)<br>{<br>    char </em>p=str1;<br>    assert((str1!=NULL)&amp;&amp;(str2!=NULL));<br>    while(<em>str1!=’\0’)<br>        str1++;<br>    while(</em>str1++=<em>str2++);<br>    return p;<br>}<br>/</em>strcmp函数：比较str1和str2两个字符串的大小，若str1&gt;str2，则返回正数；若str1&lt;str2，则返回负数；若str1==str2，则返回0。<em>/<br>int strcmp(const char </em>str1,const char <em>str2)<br>{<br>    assert((str1!=NULL)&amp;&amp;(str2!=NULL));<br>    while(</em>str1&amp;&amp;<em>str2&amp;&amp;(</em>str1==<em>str2))<br>    {<br>        str1++;<br>        str2++;<br>    }<br>    return </em>str1-<em>str2;<br>}<br>void memset(void </em>s,int c,size_t n) //将已开辟内存空间s的首n个字节的值设为c<br>{<br>    assert(s!=NULL);<br>    char <em>tmp=(char </em>)s;<br>    while(n–)<br>    {<br>        <em>tmp++=(char)c;<br>    }<br>    return s;<br>}<br>void memcpy(void </em>dest,const void <em>src,size_t n)//从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中<br>{<br>    assert(dest!=NULL&amp;&amp;src!=NULL);<br>    char </em>tmpdest=(char <em>)dest;<br>    char </em>tmpsrc=(char <em>)src;<br>    while(n– &gt;0)        </em>tmpdest++=*tmpsrc++;<br>    return dest;<br>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1）字符串操作&lt;br&gt;strcpy(p, p1) 复制字符串&lt;br&gt;strncpy(p, p1, n) 复制指定长度字符串&lt;br&gt;strcat(p, p1) 附加字符串&lt;br&gt;strncat(p, p1, n) 附加指定长度字符串&lt;br&gt;strlen(p) 取字符串长度&lt;b
      
    
    </summary>
    
      <category term="技术" scheme="http://huangyiblog.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="C/C++" scheme="http://huangyiblog.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>我的2016电影</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%88%91%E7%9A%842016%E7%94%B5%E5%BD%B1/"/>
    <id>http://huangyiblog.com/随笔/我的2016电影/</id>
    <published>2018-03-31T05:12:25.000Z</published>
    <updated>2018-04-01T08:20:57.154Z</updated>
    
    <content type="html"><![CDATA[<p>1、《马力和马克思》<br>2、《怦然心动》<br>3、《天堂电影院》<br>4、《海上钢琴师》<br>5、《教父系列》<br>6、《控方证人》<br>7、《千与千寻》<br>8、《从你的全世界路过》<br>9、《战狼2》<br>10、《金刚狼3》<br>11、《大话西游系列》<br>12、《鬼子来了》<br>13、《让子弹飞》<br>14、《天才枪手》<br>15、《比利比恩的中场战事》<br>16、《麦兜的故事》<br>17、《美国丽人》<br>18、《泰坦尼克号》<br>19、《阿飞正传》<br>20、《x森林系列》<br>21、《辩护人》<br>22、《记忆碎片》<br>23、《哈尔的移动城堡》<br>24、《烈日灼心》<br>25、《一条狗的使命》<br>26、《致命魔术》<br>27、《星际穿越》<br>28、《驯龙高手》<br>29、《幸福终点站》<br>30、《时空恋旅人》<br>31、《致命ID》<br>32、《你的名字》<br>33、《幽灵公主》<br>34、《盗梦空间》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、《马力和马克思》&lt;br&gt;2、《怦然心动》&lt;br&gt;3、《天堂电影院》&lt;br&gt;4、《海上钢琴师》&lt;br&gt;5、《教父系列》&lt;br&gt;6、《控方证人》&lt;br&gt;7、《千与千寻》&lt;br&gt;8、《从你的全世界路过》&lt;br&gt;9、《战狼2》&lt;br&gt;10、《金刚狼3》&lt;br&gt;11、《大话西游系
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视" scheme="http://huangyiblog.com/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>我的2016书单</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%88%91%E7%9A%842016%E4%B9%A6%E5%8D%95/"/>
    <id>http://huangyiblog.com/随笔/我的2016书单/</id>
    <published>2018-03-29T11:35:37.000Z</published>
    <updated>2018-04-01T11:48:59.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你好-这是我的2016书单。"><a href="#你好-这是我的2016书单。" class="headerlink" title="你好,这是我的2016书单。"></a>你好,这是我的2016书单。</h1><p>1、《一句顶一万句》<br>2、《寻路中国》<br>3、《人类简史》<br>4、《一只特立独行的猪》<br>5、《三国演义》<br>6、《世说新语》<br>7、《战国策》<br>8、《春风沉醉的夜晚》<br>9、《水浒传》<br>10、《茶花女》<br>11、《天黑以后》<br>12、《悟空传》<br>13、《苦妓回忆录》<br>14、《不属于我们的世纪》<br>15、《身份的焦虑》<br>16、《追忆似水年华》<br>17、《约翰克里斯多夫》<br>18、《无名的裘德》<br>19、《高老头》<br>20、《浮生六记》<br>21、《二手时间》<br>22、《洗澡》<br>23、《爱情和其他魔鬼》<br>24、《芳华》<br>25、《冰与火之歌》<br>26、《远山淡影》<br>27、《目送》<br>28、《自深深处》<br>29、《巨人的陨落》<br>30、《余华短篇集》<br>31、《基督山伯爵》<br>32、《三个火枪手》<br>33、《和喜欢的一切在一起》<br>34、《弗兰克尔自传》<br>35、《重新认识你自己》<br>36、《二十四史》<br>37、《长恨歌》<br>38、《面包树上的女人》<br>39、《追随你的心》<br>40、《不能不去爱的两件事》<br>41、《在这复杂世界里》<br>42、《坏小孩》<br>43、《季羡林私人史》<br>44、《金瓶梅》<br>45、《孤独六讲》<br>46、《我们生活在巨大的差距里》<br>47、《分身》<br>48、《宿命》<br>49、《快乐是在心里》<br>50、《我的精神家园》<br>51、《万历十五年》<br>52、《撒切尔夫人传》<br>53、《飞鸟集》<br>54、《幻灭》<br>55、《当我跑步时我谈些什么》<br>56、《富爸爸、穷爸爸》<br>57、《雅舍小品》<br>58、《一个女子恋爱的时候》<br>59、《从一到无穷大》<br>60、《虚无的十字架》<br>61、《资本论》<br>62、《白说》<br>63、《在细雨中呼喊》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你好-这是我的2016书单。&quot;&gt;&lt;a href=&quot;#你好-这是我的2016书单。&quot; class=&quot;headerlink&quot; title=&quot;你好,这是我的2016书单。&quot;&gt;&lt;/a&gt;你好,这是我的2016书单。&lt;/h1&gt;&lt;p&gt;1、《一句顶一万句》&lt;br&gt;2、《寻路中国》
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>满江红</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%BB%A1%E6%B1%9F%E7%BA%A2/"/>
    <id>http://huangyiblog.com/随笔/满江红/</id>
    <published>2018-03-29T11:35:37.000Z</published>
    <updated>2018-04-01T12:54:56.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="满江红–岳飞"><a href="#满江红–岳飞" class="headerlink" title="　　　　满江红–岳飞"></a>　　　　满江红–岳飞</h1><p>　　　　　　　　怒发冲冠，<br>　　　　　　凭栏处，潇潇雨歇。<br>　　　　　　　　抬望眼，<br>　　　　　　　　仰天长啸，<br>　　　　　　　　壮怀激烈。<br>　　　　　　　三十功名尘与土，<br>　　　　　　　八千里路云和月。<br>　　　　　　某等闲，白了少年头，<br>　　　　　　　　　空悲切，<br>　　　　　　　　　靖康耻，<br>　　　　　　　　　犹未雪。<br>　　　　　　　　　臣子恨，<br>　　　　　　　　　何时灭！<br>　　　　　　　　　驾长车，<br>　　　　　　　　踏破贺兰山缺。<br>　　　　　　　　壮志饥餐胡虏肉，<br>　　　　　　　　笑谈渴饮匈奴血。<br>　　　　　　　待从头，收拾旧山河，<br>　　　　　　　　　朝天阙。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;满江红–岳飞&quot;&gt;&lt;a href=&quot;#满江红–岳飞&quot; class=&quot;headerlink&quot; title=&quot;　　　　满江红–岳飞&quot;&gt;&lt;/a&gt;　　　　满江红–岳飞&lt;/h1&gt;&lt;p&gt;　　　　　　　　怒发冲冠，&lt;br&gt;　　　　　　凭栏处，潇潇雨歇。&lt;br&gt;　　　　　　　　抬望
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="阅读" scheme="http://huangyiblog.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
