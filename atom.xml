<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你的小黄^_^</title>
  <icon>https://www.gravatar.com/avatar/3a25a3ab34305615e80247defadfd4f6</icon>
  <subtitle>做一名有情怀的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangyiblog.com/"/>
  <updated>2018-11-21T14:47:31.960Z</updated>
  <id>http://huangyiblog.com/</id>
  
  <author>
    <name>Mr.Huangyi</name>
    <email>18757163093@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何为Nginx服务器配置ssl证书</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E4%B8%BANginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
    <id>http://huangyiblog.com/业务开发/如何为Nginx服务器配置ssl证书/</id>
    <published>2018-11-21T13:14:42.000Z</published>
    <updated>2018-11-21T14:47:31.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何为Nginx服务器配置ssl证书"><a href="#如何为Nginx服务器配置ssl证书" class="headerlink" title="如何为Nginx服务器配置ssl证书"></a>如何为Nginx服务器配置ssl证书</h1><p>&emsp;&emsp;我前不久才把自己的hexo博客部署到阿里云服务器上，买的学生机LAMP6.0.1,操作系统是centos，部署成功后就去申请备案，备案前期的资料审核还是快的，最后一步管局审核写着不超过20天，结果真的过了20天才发信息来审核通过…<br>&emsp;&emsp;之前的审核过程中，你的域名是不能进行访问，只能通过IP地址访问网站。审核通过后你可以通过http进行访问,但是不能通过进行https:进行访问。所以我们先来看看这两者的区别。</p><h2 id="http与https的基本定义"><a href="#http与https的基本定义" class="headerlink" title="http与https的基本定义"></a>http与https的基本定义</h2><p>HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><p>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p><h2 id="http与https的区别"><a href="#http与https的区别" class="headerlink" title="http与https的区别"></a>http与https的区别</h2><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，这就是https的诞生。<br>阿里云官网的回答</p><blockquote><p>HTTP是过去很长一段时间我们经常用到的一种传输协议。HTTP协议传输的数据都是未加密的，这就意味着用户填写的密码、账号、交易记录等机密信息都是明文，随时可能被泄露、窃取、篡改，从而被黑客加以利用，因此使用HTTP协议传输隐私信息非常不安全。</p></blockquote><blockquote><p>HTTPS是一种基于SSL协议的网站加密传输协议，网站安装SSL证书后，使用HTTPS加密协议访问，可激活客户端浏览器到网站服务器之间的SSL加密通道(SSL协议)，实现高强度双向加密传输，防止传输数据被泄露或篡改。简单讲，HTTPS=HTTP+SSL，即HTTPS是HTTP的安全版。</p></blockquote><p>HTTPS加密、加密、及验证过程，如下图所示：<br><img src="https://user-gold-cdn.xitu.io/2017/3/26/a480d891b7240325055da1e6b2f75ac3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="alt"></p><p>按照网上博客的资料，两者主要有以下具体区别：<br>1、HTTPS更安全：HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议的信息明文传输安全；</p><p>2、HTTPS需要申请证书：HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费，费用大概与.com域名差不多，每年需要大约几十元的费用。而常见的HTTP协议则没有这一项；</p><p>3、端口不同：HTTP使用的是大家最常见的80端口，而HTTPS连接使用的是443端口；</p><p>4、状态不同：HTTP的连接很简单，是无状态的。而HTTPS协议是SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全；</p><h2 id="为Nginx服务器配置ssl证书具体步骤"><a href="#为Nginx服务器配置ssl证书具体步骤" class="headerlink" title="为Nginx服务器配置ssl证书具体步骤"></a>为Nginx服务器配置ssl证书具体步骤</h2><p>一：购买并申请免费证书</p><p>前往阿里云域名控制台–&gt;进入域名管理–&gt;申请免费开启ssl证书<br>这个过程比较快，一般申请成功后不需要多久证书就会发到你的证书控制台。<br>在证书控制台下载Nginx版本证书，下载到本地的是一个压缩文件，解压后里面包含.pem文件是证书文件，.key文件是证书的私钥文件（申请证书时如果没有选择系统创建CSR，则没有该文件）。</p><p>二、进入服务器配置Nginx.conf<br>按照官方文档，我们首先进入服务器的Nginx目录下，新建一个目录cert<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir cert</span><br></pre></td></tr></table></figure></p><p>目录建完以后就需要把你之前下载的证书解压后的文件都拷贝到该目录下面。从本地拷贝文件到远程服务器可以用scp命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /Users/study/xxxxx root@xxx:/etc/nginx/cert</span><br></pre></td></tr></table></figure></p><p>我当时没注意，结果直接把整个文件夹给拷进去了，这样一来等会编辑文件路径的时候就不能忘了修改。<br>拷贝结束后就可以编辑Nginx.conf文件进行配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    ssl on;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    ssl_certificate   cert/a.pem;</span><br><span class="line">    ssl_certificate_key  cert/a.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我主要提几个初次接触的小白容易碰到的问题：</p><ul><li>include /etc/nginx/default.d/*.conf;这一行不需要取消注释</li><li>server_name 可以改为你自己的域名</li><li><p>location/{}里面的root注意要填写你当时配置的项目位置。</p><p>配置好以后保存并退出。<br>之后重新加载并启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure></li></ul><p>这里很多人一开始可能会出现启动失败的错误，这时不要慌，我的建议是最好学会查看日志文件，看看命令行提示报了什么错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p>我碰到过的有一种是属于80端口被某个进程占用，当时我是直接强制杀死该进程解决的。其他启动失败的原因多数是你nginx.conf文件配置出错了，比如如法错误，多了什么或少了什么。<br>我当时启动成功后采用https方式访问域名，结果一直都是显示Nginx welcome的首页面，这里其实就是我之前提到过的location/{}里面写错了。当时还有点慌，因为我不记得我把自己的hexo放在哪里了，但还好，把Nginx.conf往上翻就能找到我以前配置过的hexo的root信息，直接复制下来即可。</p><p>到这里，证书配置基本就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何为Nginx服务器配置ssl证书&quot;&gt;&lt;a href=&quot;#如何为Nginx服务器配置ssl证书&quot; class=&quot;headerlink&quot; title=&quot;如何为Nginx服务器配置ssl证书&quot;&gt;&lt;/a&gt;如何为Nginx服务器配置ssl证书&lt;/h1&gt;&lt;p&gt;&amp;emsp;
      
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>普通人如何稳固对自我价值的认同感</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%99%AE%E9%80%9A%E4%BA%BA%E5%A6%82%E4%BD%95%E7%A8%B3%E5%9B%BA%E5%AF%B9%E8%87%AA%E6%88%91%E4%BB%B7%E5%80%BC%E7%9A%84%E8%AE%A4%E5%90%8C%E6%84%9F/"/>
    <id>http://huangyiblog.com/随笔/普通人如何稳固对自我价值的认同感/</id>
    <published>2018-11-07T06:01:18.000Z</published>
    <updated>2018-11-07T07:35:06.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="普通人自我认同感很低怎么办？"><a href="#普通人自我认同感很低怎么办？" class="headerlink" title="普通人自我认同感很低怎么办？"></a>普通人自我认同感很低怎么办？</h1><p>&emsp;&emsp;最近又到了清华本科特将评选的日子，看了他们的简历，众多网友耐不住了。纷纷调侃“神仙打架”又开始了。<br>&emsp;&emsp;不过毕竟神仙们打架对我们这些普通人影响其实并不是很大，毕竟距离太远了（指实力上的距离）。大多数人自我认同感低，其实还是因为身边的人，再加上各种网文贩卖焦虑，比如之前的某某单车创始人企业被收购，90后已经实现财务自由。于是有了你已被同龄人抛弃了之类的…在目前经济为王的社会里，各种浮躁的心态层出不穷，不论是在校的学生，还是在企业里的白领，似乎无时无刻不在焦虑着。为什么焦虑，因为怀疑，因为对自我价值的怀疑，导致对自己所做的努力，所做的事情同样产生怀疑。<br>&emsp;&emsp;首先焦虑是正常的，对自己有所怀疑也是正常的。但注意我标题注明的是你几乎已经怀疑过了度。也就是说你甚至已经有些不认同自我价值了。到了这一步，问题其实已然不小。我想写这篇随笔，自然不是因为空想就想到了这么个话题。而是我自己就属于迷茫，不自信的一类人中的一个典型。不知道解决方案，但是写这篇随笔可以让我反思，让我平视，然后再次让自己正常的融入到学习生活中去。能达到这一点就足够。<br>&emsp;&emsp;不同年龄段的人烦恼各不相同，但心态缺失类似的。我正处于学生时代的后期了，倘若不读研，那么在学校的日子几乎按着指头数也能数过来了。学校里终究还只是个象牙塔，与社会的庞杂相比还是相对单纯的多了，至少涉及物质层面的问题会少很多。说撑了无非就是些各种奖学金，助学金之类的。当然，不排除很多人爱慕虚荣，喜欢攀比。许多人的焦虑可能更多来自于学习。学渣与学霸之间的爱恨情仇似乎是学生时代过不去的一道坎也。当你看到身边的某某学霸又拿了个竞赛大奖，某某保研到了国内C9高效，某某某还在纠结于几个知名大厂的offer该选哪个时，你可能会有些触动，你可能还不知道自己想干嘛，毕业了工作能找到吗？上述几个例子自然是少数人，但是当你看到自己的同学如此优秀，你应该怀抱什么样的心态？嫉妒？自卑？蔑视？这里其实已经体现了自我认同感偏低的外因，那就是身边的人光芒四射，你找不到自己了。<br>&emsp;&emsp;有一点还是要明确。我是相信存在智商碾压这回事的。努力确实是个好东西，但是收获未必如你所期望的，毕竟这个过程还得乘上个系数，不然就不存在我在最开头提到的“神仙打架的事情”了。那么好，如今你可能和我一样有些焦虑，有些自我怀疑，害怕自己和身边的神仙差距越来越大，怎么处理。在此之前，你或许也还算努力吧，上课认真听讲，课后也会去翻翻书，你也为了目标有所付出。但是这离你想要的生活并未接近多少。再想想，要不随大流，一起开几把黑，打打王者，看看小说，让自己过得轻松点不行么？嘻嘻，当然没问题，而且要注意，打王者，看小说等等操作与我的问题并不矛盾，很简单，玩游戏就会影响自我认同感吗？没啥关系吧？刚刚前几天LG还拿了世界总决赛冠军呢，多少高校宿舍，朋友圈里的男同胞在自豪的呐喊。那么问题在哪呢？如果这么想，反正我这么菜，还不如上课开开黑，让自己过得舒坦点何乐而不为。这里有个前提，你默认了自己是个菜鸟(自黑的除外)，你从心底里认为了自己不是个优秀的人，即使努力了也是菜鸟一枚，这就有了问题。你并不怎么认同自己，导致你不愿为了些什么东西制定个小计划，小目标什么的，持之以恒的去做点什么。这就糟糕了。<br>&emsp;&emsp;当你开始转变，开始有所努力，慢慢认同自己的时候，你可能一不当心就陷入了另一个误区。那就是自我欺骗。你开始渐渐相信自己其实也很优秀，自己的存在不说对很多人，但对身边的人也还有点价值。于是你开始努力学习，认真生活，你希望让自己变得更加优秀，你希望放大自己的价值。你可能每天都有在刷算法题，你可能每天都在看技术书学习。然而过了段时间，你发现你刷了很多题，但问你一个算法原理你却还是云里雾里，你看了很多课外书，但问你个知识点你却是两眼发呆。你以为每天都在努力，那么自然每天都在收获，结果却是在原地踏步。这就会让你产生盲目的自我认同感。我们拿阅读技术书举例。你读过这本书，并不代表你读懂了，你读懂一个技术点，并不代表你会用了，你已经能够实践了，能够用了，并不代表你已经会变通了，因为你不了解它的底层是什么原理，只知道代码这么写会产生这样的效果。<br>&emsp;&emsp;当你发现了误区，你又开始慢慢转变，你希望让假懂慢慢变成真懂，你希望自己不是假优秀，而是确实肚子里有点货，，慢慢慢慢，可能情况就会有所好转，只要能一步步走上正轨，那么对自我价值的认同感自然也就慢慢上来了。到后面，或许会这么想，“神仙”们的确很厉害，但我在陆地上当个”将军”也不错，“马云、王健林”们的确有钱，而我虽然实现不了财务自由，但也勉强够用了。有勇气平视大家，才能交到好朋友哦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;普通人自我认同感很低怎么办？&quot;&gt;&lt;a href=&quot;#普通人自我认同感很低怎么办？&quot; class=&quot;headerlink&quot; title=&quot;普通人自我认同感很低怎么办？&quot;&gt;&lt;/a&gt;普通人自我认同感很低怎么办？&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近又到了清华本科特
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>回顾自己部署hexo博客的血泪史</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E5%9B%9E%E9%A1%BE%E8%87%AA%E5%B7%B1%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%A1%80%E6%B3%AA%E5%8F%B2/"/>
    <id>http://huangyiblog.com/随笔/回顾自己部署hexo博客的血泪史/</id>
    <published>2018-10-29T14:52:02.000Z</published>
    <updated>2018-10-29T14:57:40.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾下自己使用hexo博客踩过的坑"><a href="#回顾下自己使用hexo博客踩过的坑" class="headerlink" title="回顾下自己使用hexo博客踩过的坑"></a>回顾下自己使用hexo博客踩过的坑</h1><blockquote><p>从一开始接触hexo博客到现在也过去好几个月了，在很多大佬看来搭建部署个个人博客是个很小儿科的事情，但对我这样一个菜鸟来说陆陆续续的几乎是采坑无数，现在回想起来都是泪啊，尤其是碰到一些bug，百度谷歌都找不到你想要的解答时，真的绝望的感觉。我这次虽然是坐个总结，但时间过去很久了，一些具体的bug，以及处理代码我就不写出来了，所以如果你想在这里看到一些实操干货的话，可能要失望了，毕竟我写的不是教程。</p></blockquote><p>我使用hexo博客主要经历了如下几个阶段：</p><ul><li>下载hexo，选择主题，编辑配置文件，部署到GitHub</li><li>想优化主题，自定义了一些css样式，加入了一些插件</li><li>后面换了电脑，想要在多终端协同管理hexo</li><li>纠结于GitHub pages 访问速度不给力，考虑CDN，最后还是想部署到阿里云服务器。　<a id="more"></a></li></ul><p>　　一开始和很多人一样活跃于博客园，ＣＳＤＮ等第三方博客平台，那是还是大学刚开学的时候吧，还不怎么写博客，到了后面偶尔也学一些大佬写点题解啥的，但也并不积极。到了大二，学的东西、课程越来越多，内容越积越多，但显而易见的是，我们不可能记住所有内容，如何有效的总结知识点，最好将书上的变成自己的，如何深入理解，如何提升自己的写作水平，总的来说，写博客还是一个不错的提升自己的方式。可这时，可能是想追求个性，想有一个自己的个人博客，当时主要就想到了ＷｏｒｄＰｒｅｓｓ和ｈｅｘｏ，但是用ＷｏｒｄＰｒｅｓｓ还是要买域名和云服务器，虽说阿里云和腾讯云等服务商对学生的优惠力度都很大，但我最初并不是很想花钱，于是选择了ｈｅｘｏ。选择ｈｅｘｏ其实也有很多好处，帮我入门了ｇｉｔ和ＧｉｔＨｕｂ。决定以后，边去网上找各种教程，下载ｎｏｄｅ、ｈｅｘｏ、ｎｅｘｔ主题等等，之后配置文件，然后ｈｅｘｏ　ｎｅｗ　ｐｏｓｔ，ｈｅｘｏ　ｓ，测试效果，这个过程中，出过一些小问题，但最后都能够成功部署，只是有一个小ｂｕｇ。部署成果后，导航栏的几个主要图标无法正常显示，我一直不明白到底是哪里出了问题，因为每一步都是按照网上的教程操作的，谷歌了好久也没解决。当时没辙，我就去问了我们的ｗｅｂ老师，然而老师说他也没搞过这个，所以并不了解，但是还是给出了建议，因为大部分ｂｕｇ，９９％前人肯定都遇到过，可以先去谷歌百度搜，实在不行可以去知乎等社区提问。我后面就去知乎发表提问，并要求了几位内行人回答，期初也没得到我想要的解答，但几天过去，总算是等来了我想要的。问题其实很简单，还是配置文件上没有填正确，之所以没有填正确。有两个主要原因：１版本问题，２自己不注意看官方注释。首先网上给出的教程并没有问题，但我完全照搬就出了问题，因为他们针对的版本与我再用的版本并不一样，而恰好我的版本在导航栏配置哪里格式有所区别，导致最后图标无法正常显示。总之，倒腾了半天，最后总算还顺利，我发布了自己的第一篇博客并且成功部署到了ＧｉｔＨｕｂ，网页上也能正常浏览。<br>　　我当时选择的是ｎｅｘｔ主题，我很喜欢这样简约大方的风格，大量留白，不花里胡哨，同时也能够满足我的需求，我只想写写东西，这样的就已经足够。但是还不够，我想往里面加点东西，改点东西。这个过程，也很心累，因为我前端没好好学，而页面设计这方面涉及的主要都是前端的点。我修改了一些样式，字体，颜色什么的，接了网易云嵌入式链接，开头评论功能，增加友链，用七牛做图床等等，总之就是各种折腾。有时看了自己改的很不满意又得想办法改回去。这个过程有一点很重要，就是了解ｈｅｘｏ主题的整体框架配置，知道哪个文件夹，哪个文件主要是负责哪一块的！<br>　　后面我买了台二手ＭＢＰ，想在这台电脑上也能管理发布ｈｅｘｏ博客，于是又想办法，在网上各种搜教程，如何在两台电脑上管理ｈｅｘｏ。最后的解决方案是利用ＧｉｔＨｕｂ分支，新建一个分支，然后将原电脑上所需的本地文件拷到新电脑，在新电脑上把内容ｐｕｓｈ到相应分支。这个过程也很不容易，主要是我不怎么理解ＧｉｔＨｕｂ的分支操作，哎，但还算好吧，没有花太多时间。<br>　　又过了一段时间，随之我发布的博客内容越来越多，而ＧｉｔＨｕｂ　ｐａｇｅｓ的访问速度又不稳定，有时还很令人纠结，这我就受不了了，我想着怎么才能加速访问，比较ＧｉｔＨｕｂ是国外的服务器，虽然免费给你一定空间使用，但访问速度我真的不满意。网上有说把博客再部署到ＣＯＤｉｎｇ上面的，也有说用ＣＤＮ的，我考虑过ＣＤＮ，当时选的是加速乐，但是生效要很久，我也没测试效果如何。最后想着趁现在自己还是学生，干脆去阿里云买个云服务器得了。服务器买了以后，问题又来了，如何将本地博客迁移到云服务器上了，这个过程有时让我掉了一堆头发。一开始就出了问题，按照网上的教程，我装好ｎｏｄｅ，ｇｉｔ，ｈｅｘｏ，Ｎｇｉｎｘ等等所需的软件，但是当我启动Ｎｇｉｎｘ的时候一直出错，无法启动，最初人物是自己在编辑．ｃｏｎｆ文件的时候可能哪里多了分号点号啥的，一直没搞清楚问题是啥，到后面干脆重置了虚拟机，将各种软件重新装了一遍。这是再次启动Ｎｇｉｎｘ，还是启动不了，真是崩溃的心都有了，没辙，只好按照命令行的提示，查看日志提示是哪里有ｂｕｇ，你别说，我这种菜鸟一开始看提示都还不大看得懂，只好又将提示代码复制到谷歌搜解答，但是这还不能马上搜到，因为有些时候一段提示信息可能会对应一堆可能的ｂｕｇ，但我这次还算运气可以吧。最后的结论是我的服务器上８０端口ｈｔｔｐｄ被占用，也就是说Ａｐａｃｈｅ和Ｎｇｉｎｘ不能同时启用吧，之后便停用８０端口，然后重新加载Ｎｇｉｎｘ，在游览器输入服务器ＩＰ，总算是见到了ｗｅｌｃｏｍｅ的页面了，松了一口气呀。之后要做的就是新建ｇｉｔ库，配置ｇｉｔｈｏｏｋｓ，配置Ｎｇｉｎｘ的ｓｅｒｖｅｒ的ｌｏｃａｔｉｏｎ等等，然后修改本地ｈｅｘｏ的．ｃｏｎｆｉｇ文件，然后将博客部署到服务器上。到这里你在输入ＩＰ到游览器便能够看到你的博客了。<br>　　上面就是我倒腾ｈｅｘｏ的主要历程，但是还有个问题要讲下，那就是域名，域名我很早就买了，也是在阿里云上买的，当时就是解析到了ＧｉｔＨｕｂ的ＸＸＸ．ｇｉｔｈｕｂ．ｉｏ，这样输入域名也能访问我的博客，另外由于访问的是国外服务器，所以我的域名也没有备案，换句话说，其实我也备不了案，因为我没有买服务器，也就没有备案服务号。后来我买了服务器就想着干脆也去备案下吧．．结果一开始我就觉得好烦，得我自己去打印核验单邮寄到贵州，还得用阿里云的幕布拍照，总觉得麻烦。现在还在备案中．．．　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;回顾下自己使用hexo博客踩过的坑&quot;&gt;&lt;a href=&quot;#回顾下自己使用hexo博客踩过的坑&quot; class=&quot;headerlink&quot; title=&quot;回顾下自己使用hexo博客踩过的坑&quot;&gt;&lt;/a&gt;回顾下自己使用hexo博客踩过的坑&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;从一开始接触hexo博客到现在也过去好几个月了，在很多大佬看来搭建部署个个人博客是个很小儿科的事情，但对我这样一个菜鸟来说陆陆续续的几乎是采坑无数，现在回想起来都是泪啊，尤其是碰到一些bug，百度谷歌都找不到你想要的解答时，真的绝望的感觉。我这次虽然是坐个总结，但时间过去很久了，一些具体的bug，以及处理代码我就不写出来了，所以如果你想在这里看到一些实操干货的话，可能要失望了，毕竟我写的不是教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我使用hexo博客主要经历了如下几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载hexo，选择主题，编辑配置文件，部署到GitHub&lt;/li&gt;
&lt;li&gt;想优化主题，自定义了一些css样式，加入了一些插件&lt;/li&gt;
&lt;li&gt;后面换了电脑，想要在多终端协同管理hexo&lt;/li&gt;
&lt;li&gt;纠结于GitHub pages 访问速度不给力，考虑CDN，最后还是想部署到阿里云服务器。
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Github" scheme="http://huangyiblog.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>《软技能》代码之外的生存指南读后思考</title>
    <link href="http://huangyiblog.com/%E9%98%85%E8%AF%BB/%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD%E3%80%8B%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E8%AF%BB%E5%90%8E%E6%80%9D%E8%80%83/"/>
    <id>http://huangyiblog.com/阅读/《软技能》代码之外的生存指南读后思考/</id>
    <published>2018-10-26T09:46:46.000Z</published>
    <updated>2018-11-01T08:11:16.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一本非技术非管理只谈人的书。"><a href="#一本非技术非管理只谈人的书。" class="headerlink" title="一本非技术非管理只谈人的书。"></a>一本非技术非管理只谈人的书。</h1><p><img src="http://pc5wd3ju6.bkt.clouddn.com/ruanjineng.jpg" alt="alt"></p><p> 　　昨天花了点时间看完了这本《软技能》，主要面向的是软件开发人员如何提升自己的软实力，如何更好的发展与生活，整本书洋洋洒洒几百页，但是除了提到一些Java，c等语言的名词之外并没有一行代码，没有技术干货，也不是教你如何走上管理层的。总体来说，书籍的内容涵盖面很广，但都不是很深入，也算适合我这种初级阶段的小白人员学习。属于实用类的书籍吧，虽然有些内容略有鸡汤意味，但总体还行，大多都是些切实可行的建议。</p><a id="more"></a><blockquote><p>“在我刚开始从事编程工作时，软件开发人员的典型形象就是一个书呆子，瘦骨嶙峋，戴着一副厚厚的眼镜，活脱一付笔尖保护套的模样。现在，这一形象似乎已经改变，不过是变得更糟了。如今，很多人认为，软件开发人员都是胖胖的男士，留着络腮胡子，穿着一件脏兮兮的白色T恤还吃着比萨。”</p></blockquote><p>摘录来自: [美] John Z. Sonmez. “软技能：代码之外的生存指南。”</p><p>　　上面一段话摘录自书中第６篇首页，有点夸张，其实我很不喜欢经常人为的给某个群体贴上标签，这免不了的会以偏概全。但不论是程序员自黑，还是他黑，仿佛程序员这个群体就是给人一种书呆子、木讷、呆板、低情商的感觉。很多时候这是种调侃，不否人生活中也有很多程序员多才多艺，交际活跃，但既然会在大众之中产生这样的印象，就需要引起我们的警觉。我首先就是想到了自己，我是个什么样的形象呢？嗯，确实有点呆，内敛，不注重健身，瘦骨嶙峋，不爱社交，宅男一枚，不会打扮自己．．．天哪，我都不敢细想，但从我个人体验来看，很多ＣＳ专业的同学也没比我好多少（我这里主要指程序员，因为很多ＣＳ专业的学生从一开始就决定了自己以后并不打算从事软件开发的工作）。我不知道这只是性格原因还是的确跟所学专业有关，但这本书最大的目的就是让你走出技术，关注技术之外的点。注意，没有人说技术就不重要，但很多时候，在职场发展中技术往往不是最重要的，你在企业往某个方向深耕几年，你的技术一般都是拿的出手的，对很多普通人来说，可能技术水平差距并不十分明显，大部分人的智商范围相差我相信应该不大，这时拉开差距的是什么？<br>　　这本书内容主要分为７篇，分别为职业、自我营销、学习、生产力、理财、健身、精神。作者主要从上述７方面进行阐述，提了很多实际的行动指南，理论依据。你会发现上面７块已经很广，几乎贯穿我们的一大部分生活。想要在工作与生活之间取得良好的平衡，想要在职业发展道路上有个良好的进展，上述几个方向都是你不容忽视的点。<br>　　职业篇里面其实提了几个程序员经常误入的点，我主要例举几点：<br>　　１交际方面，很多搞技术的容易自以为是，只喜欢“别管我，我只想一个人安静地写代码！”，我是觉得这种做法一方面对自己能力的提升很不利，另一方面，对于团队合作影响很不好。<br>　　２自我定位方面，不要到了求职的时候还不清楚自己准备投什么岗位，或者说学了半天还不清楚自己准备走什么发展方向。<br>　　３如何写好简历，如何有效面试，很多时候这都能决定你能否拿到ｏｆｆｅｒ<br>　　４盲目陷入对技术的狂热。<br>　　自我营销篇有几个点是作者反复强调的，你应该学会如何推销自己，如何包装自己，其实方式有很多，但你得坚持做下去，把行动拿出来，一开始也许不容易，但一年两年做下来，你会感受到成长的。什么是自我营销？我们应该学会如何提升自己的核心竞争力，如何打造自己的个人品牌，这对个人成长十分重要！如何在帮助他人的前提下提升自己。作者反复提到了每个开发人员都应该写个人博客，这一点可能有些人并不认同，你会说很多技术大牛并不写博客，只是闷声敲代码，照样牛的一撇。但注意，这并不能否定写博客能够给人带来成长，当你坚持几年写高质量技术博客，你会发现这会为你带来很多，这个过程中你不仅帮助了很多其他的开发者，更是让自己的思考更进一层楼。当然，作者还例举了很多其他例子：“博客 播客 视频 给杂志投稿 书籍 代码营 技术会议”等等。</p><blockquote><p>“你自己的博客，以及你在别人的博客上发表的特邀文章 创建自己的播客频道，同时接受其他播客频道的访谈 在YouTube这样的视频网站上上传自己的分享内容和课程主题视频 给软件开发相关的杂志写文章 著书或者自出版 大多数代码营都允许参加者自由发言 拓展社交网络的好方法，如果能在研讨会上发言尤佳”<br>摘录来自: [美] John Z. Sonmez. “软技能：代码之外的生存指南。” 　　</p></blockquote><p>　　我现在还是一名学生，或许更多的会关注学习篇。如何学习是个老生常谈的话题了。尤其在ＩＴ业，技术更新迭代如此之快，没有匹配的学习能力很难在洪流中存活下来。我们都很清楚，知识你是学不完的，最重要的是学习方法论，你掌握了如何高效学习，自然不用担心走向陌生的领域。但我自己感觉虽然花在学习上的时间还算比较多的，但是效率却是相当差强人意，至于学习渠道，比较常见的无非是看书，看视频，看博客，看官方文档，配以代码实践，项目实践等。就拿看书来说好了，我看书效率就比较低，主要有几个大的问题：<br>　　１专注度不够，没有带着问题，带着思考去读。<br>　　２连续度不够，有些技术书内容很庞杂，很难啃，这是事实，但是我有时这周看了几章，就这几天没去看，到了下周又接着看几章，看了后面忘了前面，很难系统系掌握。<br>　　３浅尝辄止，碰到复杂的地方就略过，不利于深入理解。<br>　　最后主要还提到了如何理财与健身。身体是革命的本钱，你说健康重不重要，要命的是我自己的体质就很不像样，大二有段时间我还坚持到钱塘江边慢跑，但是却没坚持多久。如今大三没有了体育课，平时主动锻炼的时间真的是少的可怜。理财我完全是个门外汉了，我不懂投资理财，有些人提到买房投资，但是看看这两年杭州的房价，我也就呵呵了，刚需都还是个大问题，还有钱投资？不过理财确实是个很实用的东西，我平时只知道开源节流，这或许能让你勉强在大城市生活，做得好每年还能有些积蓄。但有一点，钱往往都不是靠省出来的，做金钱的奴隶感受可并不好。业余时间还是要多学点金融和历史，这两方面不在乎你学啥专业，但是学好了，你绝对受益匪浅。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一本非技术非管理只谈人的书。&quot;&gt;&lt;a href=&quot;#一本非技术非管理只谈人的书。&quot; class=&quot;headerlink&quot; title=&quot;一本非技术非管理只谈人的书。&quot;&gt;&lt;/a&gt;一本非技术非管理只谈人的书。&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pc5wd3ju6.bkt.clouddn.com/ruanjineng.jpg&quot; alt=&quot;alt&quot;&gt;&lt;/p&gt;
&lt;p&gt; 　　昨天花了点时间看完了这本《软技能》，主要面向的是软件开发人员如何提升自己的软实力，如何更好的发展与生活，整本书洋洋洒洒几百页，但是除了提到一些Java，c等语言的名词之外并没有一行代码，没有技术干货，也不是教你如何走上管理层的。总体来说，书籍的内容涵盖面很广，但都不是很深入，也算适合我这种初级阶段的小白人员学习。属于实用类的书籍吧，虽然有些内容略有鸡汤意味，但总体还行，大多都是些切实可行的建议。&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://huangyiblog.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>11. 盛最多水的容器</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://huangyiblog.com/题解集/11-盛最多水的容器/</id>
    <published>2018-10-25T07:27:41.000Z</published>
    <updated>2018-10-25T07:28:53.413Z</updated>
    
    <content type="html"><![CDATA[<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="alt"></p><p>示例:</p><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p><p>分析：考虑两种思路<br>解法一：暴力法<br>用两重for循环，考虑没对可能的线段组合并每次取较大值。<br>时间复杂度为O(n^2),要超时<br>解法二：双指针<br>定义两个指针，一个指向开头，一个指向结尾，每次更新最大面积的时候，将指向较短线段的指针向着指向较长线段指针的方向移动一步，因为如果是将指向较长线段的指针往内侧移的话，矩形区域的面积还是要受制于较短的线段。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  maxArea11.cpp</span></span><br><span class="line"><span class="comment">//  LeetCode</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by a on 2018/10/25.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018 Leetcode. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//时间复杂度O(n^2),空间复杂度O(1)</span></span><br><span class="line">    <span class="keyword">int</span> maxarea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; height.size(); j++) &#123;</span><br><span class="line">            maxarea = max(maxarea, min(height[i], height[j]) * (j - i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxarea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//时间复杂度O(n),空间复杂度O(1)</span></span><br><span class="line">    <span class="keyword">int</span> maxarea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = height.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        maxarea = max(maxarea, min(height[left], height[right] )* (right - left));;</span><br><span class="line">        <span class="keyword">if</span>(height[left] &lt; height[right]) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxarea;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; height;</span><br><span class="line">    <span class="keyword">int</span> n, x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        height.push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxarea1 = maxArea(height);</span><br><span class="line">    <span class="keyword">int</span> maxarea2 = maxArea2(height);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; maxarea1 &lt;&lt; <span class="string">" "</span> &lt;&lt; maxarea2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。&lt;/p&gt;
&lt;p&gt;说明：你不能
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Java容器概述</title>
    <link href="http://huangyiblog.com/%E8%AF%AD%E8%A8%80/Java%E5%AE%B9%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://huangyiblog.com/语言/Java容器概述/</id>
    <published>2018-10-22T08:39:48.000Z</published>
    <updated>2018-10-22T13:36:40.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java容器-Container"><a href="#Java容器-Container" class="headerlink" title="Java容器(Container)"></a>Java容器(Container)</h1><h2 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h2><p>容器可以管理对象的生命周期、对象与对象之间的依赖关系。<br>直白点说容器就是一段Java程序，能够帮助你管理对象间的关系，而不需要你自行编写程序处理。<br>维基百科定义：</p><blockquote><p>在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。<br>潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。</p></blockquote><a id="more"></a><h2 id="Java内部的容器类"><a href="#Java内部的容器类" class="headerlink" title="Java内部的容器类"></a>Java内部的容器类</h2><p>Java内部的容器类主要分为两类：Collection(集合)与Map(图)</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p><img src="http://pc5wd3ju6.bkt.clouddn.com/java-collections.png" alt="alt"></p><p><strong>Set</strong></p><ul><li><strong><em>HashSet</em></strong></li></ul><ol><li>基于哈希表实现，底层使用HashMap来保存所有元素。</li><li>不能保证迭代顺序</li><li>允许使用null元素</li></ol><ul><li><strong><em>LinkedHashSet</em></strong></li></ul><ol><li>LinkedHashSet底层使用LinkedHashMap来保存所有元素，它继承于HashSet。</li><li>内部使用双向链表维护插入顺序。</li></ol><ul><li><strong><em>TreeSet</em></strong></li></ul><ol><li>基于（TreeMap）红黑树实现</li><li>TreeSet非同步，线程不安全</li><li>TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。</li></ol><p><strong>List</strong></p><ul><li><strong><em>ArrayList</em></strong></li></ul><ol><li>实现 List 接口、底层使用数组保存所有元素。</li><li>相当于动态数组，支持动态扩容。</li><li>不同步</li></ol><ul><li><strong><em>vector</em></strong></li></ul><ol><li>Vector 可以实现可增长的对象数组。</li><li>Vector 实现 List 接口，继承 AbstractList 类，同时还实现RandmoAccess 接口，Cloneable 接口</li><li>Vector 是线程安全的</li></ol><ul><li><strong><em>LinkedList</em></strong><br>LinkedList 是基于链表实现的（通过名字也能区分开来），<br>所以它的插入和删除操作比 ArrayList 更加高效。但也是由于其为基于链表的，所以随机访问的效率要比 ArrayList 差。</li></ul><p><strong>Queue</strong></p><ul><li><p><strong><em>LinkedList</em></strong><br>可以用于实现双向队列</p></li><li><p><strong><em>PriorityQueue</em></strong><br>通过二叉小顶堆实现，可以用一棵完全二叉树表示。<br>可以用于实现优先队列。优先队列的作用是能保证每次取出的元素都是队列中权值最小的（Java的优先队列每次取最小元素，C++的优先队列每次取最大元素）。</p><h3 id="Map-用于映射（键值对）问题处理"><a href="#Map-用于映射（键值对）问题处理" class="headerlink" title="Map(用于映射（键值对）问题处理)"></a>Map(用于映射（键值对）问题处理)</h3></li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/java-collections1.png" alt="alt"></p><p><strong>HashMap</strong></p><ol><li>HashMap根据键的HashCode来实现，访问速度较快，遍历顺序并不确定。</li><li>HashMap最多只允许一条记录的键为null，允许多条记录的值为null。</li><li>HashMap线程不安全，也就是说任意时刻可以有多个线程同时写HashMap，所以可能会导致数据的不一致。</li><li>如何确保线程安全？可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</li></ol><p><strong>HashTable</strong></p><ol><li>HashTable是遗留类，多数功能与HashMap类似，继承自Dictionary类。</li><li>HashTable是线程安全的。也就是说任意时刻只有一个线程能够写HashTable。</li><li>HashTable的并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。</li></ol><p><strong>LinkedHashMap</strong><br>基于哈希表和链表实现，借助双向链表确保迭代顺序是插入的顺序。</p><p><strong>TreeMap</strong></p><ol><li>基于红黑树实现</li><li>默认按照键值得升序进行排序。</li><li>在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，<br>否则会在运行时抛出java.lang.ClassCastException类型的异常。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java容器-Container&quot;&gt;&lt;a href=&quot;#Java容器-Container&quot; class=&quot;headerlink&quot; title=&quot;Java容器(Container)&quot;&gt;&lt;/a&gt;Java容器(Container)&lt;/h1&gt;&lt;h2 id=&quot;什么是容器？&quot;&gt;&lt;a href=&quot;#什么是容器？&quot; class=&quot;headerlink&quot; title=&quot;什么是容器？&quot;&gt;&lt;/a&gt;什么是容器？&lt;/h2&gt;&lt;p&gt;容器可以管理对象的生命周期、对象与对象之间的依赖关系。&lt;br&gt;直白点说容器就是一段Java程序，能够帮助你管理对象间的关系，而不需要你自行编写程序处理。&lt;br&gt;维基百科定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。&lt;br&gt;潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="语言" scheme="http://huangyiblog.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://huangyiblog.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>24. 两两交换链表中的节点</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://huangyiblog.com/题解集/24-两两交换链表中的节点/</id>
    <published>2018-10-19T13:12:06.000Z</published>
    <updated>2018-10-19T13:39:12.731Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>示例:</p><p>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.<br>说明:</p><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>分析：<br>解法一：<br>题目要求两两链表中的结点，比较好想得应该还是直接遍历整个链表list，每次swap(list-&gt;val,list-&gt;next-&gt;val),但是题目明确要求了不能只是单纯的改变结点的数据域，所以上述方法尽管输出一样，但并不符合要求。<br>解法二：<br>首先定义一个dummy哑结点指向head作为首结点来辅助操作。<br>之后定义一个current指向给定链表，定义一个前去指针pre指向dummy，定义一个临时链表temp储存每次要进行操作的两个结点。例如给定链表{1,2,3,4},先让temp指向3，然后分割{1,2}和{3,4},<br>让2的后继指针指向1，之后让dummy指向2，让1指向3，最后让pre指向1，current指向3继续遍历。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  swapNodes.cpp</span></span><br><span class="line"><span class="comment">//  LeetCode</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by a on 2018/10/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018 Leetcode. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">creat</span><span class="params">( <span class="keyword">int</span> Array[])</span> </span>&#123;</span><br><span class="line">    ListNode *p, *pre, *head;</span><br><span class="line">    head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    pre = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        p-&gt;val = Array[i];</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pre-&gt;next = p;</span><br><span class="line">        pre = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">( ListNode* head )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;next) &#123;</span><br><span class="line">        swap(p-&gt;val, p-&gt;next-&gt;val);</span><br><span class="line">        p = p-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs2</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    ListNode* current = head;</span><br><span class="line">    ListNode* pre = dummy;</span><br><span class="line">    ListNode* temp;</span><br><span class="line">    <span class="keyword">while</span>(current &amp;&amp; current-&gt;next) &#123;</span><br><span class="line">        temp = current-&gt;next-&gt;next;</span><br><span class="line">        current-&gt;next-&gt;next = current;</span><br><span class="line">        pre-&gt;next = current-&gt;next;</span><br><span class="line">        current-&gt;next = temp;</span><br><span class="line">        pre = current;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Array[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    ListNode* head1 = creat(Array);</span><br><span class="line">    ListNode* head2 = creat(Array);</span><br><span class="line">    ListNode* L = swapPairs(head1);</span><br><span class="line">    <span class="comment">//L = L-&gt;next;</span></span><br><span class="line">    ListNode* res = swapPairs2(head2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(L != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, L-&gt;val);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(res != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, res-&gt;val);</span><br><span class="line">        res = res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;br&gt;说明:&lt;/p&gt;
&lt;p&gt;你的算法只能使用常数的额外空间。&lt;br&gt;你不能只
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>支持推理小说家紫金陈</title>
    <link href="http://huangyiblog.com/%E9%98%85%E8%AF%BB/%E6%94%AF%E6%8C%81%E6%8E%A8%E7%90%86%E5%B0%8F%E8%AF%B4%E5%AE%B6%E7%B4%AB%E9%87%91%E9%99%88/"/>
    <id>http://huangyiblog.com/阅读/支持推理小说家紫金陈/</id>
    <published>2018-10-19T06:29:55.000Z</published>
    <updated>2018-10-20T05:53:21.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="紫金陈主要作品"><a href="#紫金陈主要作品" class="headerlink" title="紫金陈主要作品"></a>紫金陈主要作品</h1><ul><li>《推理之王1：无证之罪》（2014年实体书出版）</li><li>《推理之王2：坏小孩》（2014年实体书出版）</li><li>《推理之王3：长夜难明》（2017年出版）</li><li>《浙大夜惊魂》（2010年出版改名《禁忌之地》）</li><li>《谋杀官员1》（2012年）</li><li>《谋杀官员2：化工女王的逆袭》（2012年）</li><li>《谋杀官员3：物理教师的时空诡计》（2013年1月更新完）</li><li>《谋杀官员4：代上帝之手(完结)》（2013年）<blockquote><p>因为我自己主要就阅读了他的上述作品，所以其他书没有全都一一例举。 </p></blockquote></li></ul><a id="more"></a><p>　　一提到推理小说，估计很多人又想到了我们的邻居－－岛国日本，推理小说早期兴起于欧美，后来在日本也有了极大的发展。平时我们读的很多推理或者侦探小说相比大多都是欧美或者日本的作品比较多吧。著名的作者比如美国的埃德加·爱伦·坡，英国的阿加莎·克里斯蒂，日本的江川户乱步、东野圭吾等都是推理小说界的大神，不仅高产还高质量，我已开始读的也是日本的推理小说比较多。大一看了几本东野大神的作品后无意中接触到了国内紫金陈写的《无证之罪》，顿时来了兴趣，陆陆续续的也看了他的一些代表作，就我个人而言还是蛮喜欢他的推理作品，虽然不像有些大神那么高产，也不是每一本都布局十分巧妙，但吸引人的点还是很多的。<br>　　我已开始接触《无证之罪》后就顺便看完了他的推理之王系列的另外两本，《坏小孩》与《长夜难明》，之后又看了他较早的几部作品，从《浙大惊魂夜》（后来再版改名为《禁忌之地》）到《谋杀官员系列》，可以看出作者在每部作品的布局构思上都花了很大心思。紫金陈本名陈徐，毕业于浙江大学，主要走的是社会派本格推理路线，比如《谋杀官员系列》就是他的本格推理代表作。他的作品里的主要人物背景很多也是浙大毕业的校友，至于社会背景大多在以浙江各个市为模板进行创作。《无证之罪》很多人会拿来与东野圭吾的《嫌疑人Ｘ的献身》进行对比，认为在情节完善和人物塑造等方面还有很多不足之处，作者融入中国社会的背景，但同样是一位高智商大神为了帮助失误犯了罪的可怜人摆脱警察的故事。《坏小孩》的故事我大都忘了，比较早看的一本，其实说起来推理之王系列我最推崇的是《长夜难明》，他的说我也就这本买过实体说。不过说起来《长夜难明》或许并算不上推理吧，情节也不悬疑，只能说属于社会派推理比较好，但反映的社会问题还是很沉重的，虽然是小说，但现实生活中有没有类似的案情或者更为残酷的事实恐怕很难说，或许黑暗一直存在只是没有笼罩在你身上罢了。很多人应该看过韩国的一部电影《熔炉》，内容很沉重，在韩国法律界社会界都引起了极大的反响。《长夜难明》反应了类似的社会法律问题，书中直至结局也没能揪出幕后大老虎，尽管已经有人为此献出了生命的代价，但是在权利的悬殊面前你很难立马冲破黑暗。甚至很有可能一味的付出却给自己带来了毁灭的报复。总感觉现实中这么正义凛然的人很少，大家内心都有自己的想法，为什么要为了不相干的人去得罪人，做吃力不讨好的事？但如果人人都这么想，那些弱势群体就一直被压榨下去吗？<br>　　《谋杀官员系列》也不是每本都很精彩，有很多欠缺的地方还是明显的，尽管作为推理小说，或许不是非得文笔一流，但文笔不足的间接影响就是导致了人物造型，性格塑造方面不够鲜活，包括一些悬疑的点也很牵强。另外第二部和第四部都写到了屌丝对女神的爱，我就想说作者就不能放过广大屌丝吗，另外我想着尽管矮穷丑，但好歹是浙大高材生至于这么自卑吗，还是真的爱得真切，无法自拔。第四部结尾的有点牵强，竟然又扯出来了同性恋，但好在不是个完美的结尾，最后提到女神骆慧慧的孩子既不是李卫平也不是王红名的时候，估计很多人也蒙了，人性的复杂也只在这种时刻才能感受到。第二部又是一个单相思的家伙为了自己喜欢的人不惜付出一切为她犯罪，书名《化工女王的逆袭》估计误导了很多人，一直以为所谓的“同伙”就是化工女甘佳宁，结果这只是个幌子，但是“同伙”这个点设计的还是比较好的。另外这部反映的官场腐败等政治问题也挺厉害的，官场的腐败从上到下，从一手遮天的大老虎到仗势欺人的看家狗都让人不寒而栗，权利没有约束是很恐怖的。<br>　　我一般看这种推理小说并不怎么较真，不会太计较情节上的漏洞，除非是太明显的，毕竟自己只是个门外汉，娱乐为主哈哈。上述几本书看完倒也没花掉我多少时间，想想自己书架上的几本技术方面的恐龙📚，我内心就拔凉拔凉了，若是真想一本本从头看到尾，我又能吸收到少呢．．．　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;紫金陈主要作品&quot;&gt;&lt;a href=&quot;#紫金陈主要作品&quot; class=&quot;headerlink&quot; title=&quot;紫金陈主要作品&quot;&gt;&lt;/a&gt;紫金陈主要作品&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;《推理之王1：无证之罪》（2014年实体书出版）&lt;/li&gt;
&lt;li&gt;《推理之王2：坏小孩》（2014年实体书出版）&lt;/li&gt;
&lt;li&gt;《推理之王3：长夜难明》（2017年出版）&lt;/li&gt;
&lt;li&gt;《浙大夜惊魂》（2010年出版改名《禁忌之地》）&lt;/li&gt;
&lt;li&gt;《谋杀官员1》（2012年）&lt;/li&gt;
&lt;li&gt;《谋杀官员2：化工女王的逆袭》（2012年）&lt;/li&gt;
&lt;li&gt;《谋杀官员3：物理教师的时空诡计》（2013年1月更新完）&lt;/li&gt;
&lt;li&gt;《谋杀官员4：代上帝之手(完结)》（2013年）&lt;blockquote&gt;
&lt;p&gt;因为我自己主要就阅读了他的上述作品，所以其他书没有全都一一例举。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://huangyiblog.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="小说" scheme="http://huangyiblog.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>137. 只出现一次的数字 II</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/137-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-II/"/>
    <id>http://huangyiblog.com/题解集/137-只出现一次的数字-II/</id>
    <published>2018-10-17T13:16:44.000Z</published>
    <updated>2018-10-17T13:17:49.969Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><p>输入: [2,2,3,2]<br>输出: 3<br>示例 2:</p><p>输入: [0,1,0,1,0,1,99]<br>输出: 99<br>解法一：<br>创建一个长度为sizeof(int)的数组count[sizeof(int)]，用count[i]来表示在i位出现的1的次数，如果count[i]是3的倍数，跳过，否则，取出该位。<br>时间复杂度O(n),空间复杂度O(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> count[w];</span><br><span class="line">        fill_n(&amp;count[<span class="number">0</span>], w, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">                count[j] += (nums[i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">                count[j] %= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; i++) &#123;</span><br><span class="line">            res += count[i] &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解法二：<br>用二进制模拟三进制运算。<br>用one记录到当前处理的元素为止，二进制1出现“1次”（mod 3 之后的 1）的有哪些二进制位；用two记录到当前计算的变量为止，二进制1出现“2次”（mod 3 之后的 2）的有哪些二进制位。当one和two中的某一位同时为1时表示该二进制位上1出现了3次，此时需要清零。<br>时间复杂度O(n),空间复杂度O(1)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> one  = <span class="number">0</span>, two = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line">            two |= (one &amp; i);</span><br><span class="line">            one ^= i;</span><br><span class="line">            three = ~(one &amp; two);</span><br><span class="line">            one &amp;= three;</span><br><span class="line">            two &amp;= three;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>解法三：<br>我们把数组中数字的每一位累加起来对3取余，剩下的结果就是那个单独数组该位上的数字.<br>用二进制表示的过程为00-&gt;01-&gt;10-&gt;00,用a 和 b来表示一开始的状态的十位和个位：<br>b = b ^ r &amp; ~a;<br>a = a ^ r &amp; ~b;<br>刚开始的时候，a和b都是0，当遇到数字1的时候，b更新为1，a更新为0，就是01的状态；再次遇到1的时候，b更新为0，a更新为1，就是10的状态；再次遇到1的时候，b更新为0，a更新为0，就是00的状态，相当于重置了；所以最后的结果保存在b中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            b = (b ^ nums[i]) &amp; ~a;</span><br><span class="line">            a = (a ^ nums[i]) &amp; ~b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://soulmachine.gitbooks.io/algorithm-essentials/java/bitwise-operations/single-number-ii.html" target="_blank" rel="noopener">https://soulmachine.gitbooks.io/algorithm-essentials/java/bitwise-operations/single-number-ii.html</a></p><p><a href="https://leetcode.com/problems/single-number-ii/discuss/43294/challenge-me-thx" target="_blank" rel="noopener">https://leetcode.com/problems/single-number-ii/discuss/43294/challenge-me-thx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [2,2,3,2]
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>谈谈一部争议较大的日漫《缘之空》</title>
    <link href="http://huangyiblog.com/%E5%BD%B1%E9%9F%B3/%E8%B0%88%E8%B0%88%E4%B8%80%E9%83%A8%E4%BA%89%E8%AE%AE%E8%BE%83%E5%A4%A7%E7%9A%84%E6%97%A5%E6%BC%AB%E3%80%8A%E7%BC%98%E4%B9%8B%E7%A9%BA%E3%80%8B/"/>
    <id>http://huangyiblog.com/影音/谈谈一部争议较大的日漫《缘之空》/</id>
    <published>2018-10-16T08:33:45.000Z</published>
    <updated>2018-10-17T08:49:44.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我先给出自己的主要观点："><a href="#我先给出自己的主要观点：" class="headerlink" title="我先给出自己的主要观点："></a>我先给出自己的主要观点：</h2><ul><li>我不认为悠是渣男，恰恰相反，整部番里我觉得悠才是内心最纠结的可怜人。</li><li>我不支持兄妹乱伦的爱情，但我相信可能会有这样真实的感情。</li><li>我支持平行世界的剧情设计。</li><li>对我而言这部番吸引我的是BGM。</li><li>我不赞同有人纯粹拿这部番当里番来看，我不觉得这是部里番。</li><li>我不相信柏拉图式的爱情，完全没有性的爱情我觉得不存在。</li></ul><a id="more"></a><p>　　日本动漫产业一直以来都是其他国家难以匹敌的一块，我平时看的动漫虽然不能说很少吧，但多是完全谈不上，你可能无法想象一些宅男腐女追番有多么疯狂，其实在其他方面我也是这种状况，看书，看电影，似乎各种都有所投入，但都只是了解很少一部分。动漫能吸引人主要有几个点：剧情、画风、配音、ＢＧＭ。有时我是真佩服那些声优和作曲家，明明剧情狗血的要命，也能让我感动起来．．．我这次想写关于缘之空的故事，其实是因为三轮学创作的ｂｇｍ太好听了（×……————……×）　嘻嘻……<br>　　缘之空算是一部比较早期的作品了，是根据游戏改变过来的。当初游戏本就是分线路展开剧情的。所以后面改编成动画采用平行世界也没什么好奇怪的。游戏里主要有５条线，分别是宆悠线（也就是争议最大的兄妹线）、奈绪线、一叶线、悠瑛线、班长线。不过动漫里好像把班长那条线去掉了，只讲述了４条线。首先我们先来科普下平行世界的问题，我是在看之前就已经了解了剧情的构造，所以很多地方并不会觉得很奇怪或是难以理解。百度百科的定义如下：多元宇宙是一个理论上的无限个或有限个可能的宇宙的集合，包括了一切存在和可能存在的事物：所有的空间、时间、物质、能量以及描述它们的物理定律和物理常数。多元宇宙所包含的各个宇宙被称为平行宇宙（parallel universes）。好吧说实话我没怎么看明白，平行世界是否存在我也不知道，我这种物理渣渣还是就不要太纠结于这个了，一部动漫而已，太较真吃不消。按照字面意思来理解，缘之空其实就是讲述了男主悠在不同宇宙和一群相同的人之间发生的不同的故事。有和穹之间的故事，和奈绪之间的故事，和一叶之间的故事，还有瑛。<br>　　也许是改编成动漫时衔接的处理有些瑕疵，很多人认为悠是个渣男，脚踩都不止两只船了，可其实按照剧情设计，悠并没有脚踩两只船，他有同时在和两个女生交往吗？他有花心般的欺骗吗？和其他几个女生的交集更像是普通中学少男少女的青涩的爱情，只是到后来悠才意识的自己真正喜欢的是谁。穹妹给人的感觉有种红楼梦里林黛玉的影子，柔弱，多病，少话，内心却又感情丰富，有脾气有个性。这双胞胎兄妹的父母死于交通事故，两人相依为命，一起来到了祖父曾经生活过的奥木尔町生活，也是在这里发生了一系列的故事。<br>　　穹悠线饱受争议，就是因为双胞胎兄妹之间产生了情愫并甚至接受这样的情感。现实生活中包括我自己，想必很多人也是一样，很难想象或者说理解亲兄妹之间怎么能萌生出爱情的火花呢，从小一起长大。不知道你们有没有了解过韦斯特马效应，韦斯特马效应由芬兰人类学家爱德华·韦斯特马克在他的著作《The History of Human Marriage》（人类婚姻史）中提出，指出两个早年共同长大的儿童在成年后通常不会对彼此产生性吸引力：有血缘关系者也会存在亲缘监测机制（亲缘监测机制异常除外，三代以内越近越明显。）来保护；无血缘关系者由于生活在一起或可不会成年后产生性吸引；出生后六年的成长环境是一个关键时间点，其间生活在一起二者性吸引几率全会大大降低。但穹和悠却并不满足韦斯特马效应的前提，之前穹生病，兄妹二人长时间并未生活在一起，但突然间双亲离世，两人再次相遇，也许真有可能产生喜欢的情愫也说不定。但是兄妹恋终究是不被人认可的，所以可以感受悠的挣扎，悠和穹不一样，穹什么都不在乎，在乎的只有悠而已，悠作为哥哥，需要负起的应当是父亲般的责任，但却喜欢上了自己的妹妹，说出来谁能接受，不光会被人以异样的眼光看待，也没有做好一个哥哥的本分。动漫最后的处理是两人从湖中死里逃生最后一起移居他乡。我不知道这样的结局如何，如何确实互相爱慕，即使是兄妹，那么该不该在一起呢？我不知道，我不支持乱伦恋，但真实的感情并不能由外力改变，这是我相信的。<br>　　最后关于尺度问题，的确，这部动漫里有一些暴露的镜头，但我个人觉得并不过分，如果是爱情的话，这本也就是爱情的一部分，何必去特意躲闪。我大一暑假花了很长时间看完《金瓶梅》，好吧，我没那么纯洁，做不到看金瓶梅看出圣经来，但还是不否认这是一部伟大的文化作品，很多人认为金瓶梅的格调不如红楼梦，红楼梦当之无愧是我国古典文学的巅峰，但如果仅仅只是因为一个重点讲情、一个重点讲欲来评判高低那就太不公平了。缘之空很多人还是无法接受的，被禁我觉得也正常，有时也不能一天到晚黑广电，从国家层面来说，还是需要宣扬社会主义核心价值观比较好~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我先给出自己的主要观点：&quot;&gt;&lt;a href=&quot;#我先给出自己的主要观点：&quot; class=&quot;headerlink&quot; title=&quot;我先给出自己的主要观点：&quot;&gt;&lt;/a&gt;我先给出自己的主要观点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我不认为悠是渣男，恰恰相反，整部番里我觉得悠才是内心最纠结的可怜人。&lt;/li&gt;
&lt;li&gt;我不支持兄妹乱伦的爱情，但我相信可能会有这样真实的感情。&lt;/li&gt;
&lt;li&gt;我支持平行世界的剧情设计。&lt;/li&gt;
&lt;li&gt;对我而言这部番吸引我的是BGM。&lt;/li&gt;
&lt;li&gt;我不赞同有人纯粹拿这部番当里番来看，我不觉得这是部里番。&lt;/li&gt;
&lt;li&gt;我不相信柏拉图式的爱情，完全没有性的爱情我觉得不存在。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="影音" scheme="http://huangyiblog.com/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
      <category term="动漫" scheme="http://huangyiblog.com/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>19. 删除链表的倒数第N个节点</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://huangyiblog.com/题解集/19-删除链表的倒数第N个节点/</id>
    <published>2018-10-14T14:06:13.000Z</published>
    <updated>2018-10-14T14:07:43.332Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.<br>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><p>分析：删除倒数第n个链表结点，两种想法。<br>解法一：正向扫描，删除倒数第n个结点，就是删除第(len - n + 1)个结点（len 为链表长度）,可以先扫描整个链表，求出链表长度，然后再次扫描链表，找到len - n 的位置，最后删除该位置的后一个结点。</p><p>解法二：双指针，定义两个指针都指向链表首结点，第一个指针先走n + 1步，之后两个指针同步前进，当第一个指针到达表尾时，第二个指针指向的就是要删除的倒数第n个结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line">ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveNthFromEnd</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        addVal(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//ListNode res = removeNth(head, 3);</span></span><br><span class="line">        ListNode res = removeNth2(head, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span>(res != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.print(res.val + <span class="string">" "</span>);</span><br><span class="line">        res = res.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addVal</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">ListNode node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">ListNode current = head;</span><br><span class="line"><span class="keyword">while</span>(current.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">current.next = node;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNth</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间复杂度O(n)，空间复杂度O(1）</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode first = dummy;</span><br><span class="line">    ListNode second = dummy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(first != <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = first.next;</span><br><span class="line">    second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNth2</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间复杂度O(n),空间复杂度O(1)</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">while</span>(first != <span class="keyword">null</span>) &#123;</span><br><span class="line">    len++;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    len = len - n;</span><br><span class="line">    first = dummy;</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    len--;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    first.next = first.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2.&lt;/p&gt;
&lt;p&gt;当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;g
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>如何在Windows和Mac平台上协同管理hexo博客</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E5%92%8CMac%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%8D%8F%E5%90%8C%E7%AE%A1%E7%90%86hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://huangyiblog.com/业务开发/如何在Windows和Mac平台上协同管理hexo博客/</id>
    <published>2018-10-10T09:12:56.000Z</published>
    <updated>2018-10-15T04:18:39.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在多台电脑协同管理hexo博客"><a href="#如何在多台电脑协同管理hexo博客" class="headerlink" title="如何在多台电脑协同管理hexo博客"></a>如何在多台电脑协同管理hexo博客</h1><p>我很早就想搞个个人博客，其实写博客主要有3种选择：</p><ul><li>1 在第三方平台注册账号，直接在平台上写作并发布，例如博客圆，CSDN，新浪，网易等,这种方式最简单方便。</li><li>2 自己搭建博客。这种看个人需求，能力强的，可以完全前后端都自己代码实现，但大多数人一般也是直接采用模版的，简单省事。不过自己搭建的话需要去云服务商购买域名和云服务器，服务器的话学生优惠还是比较大的，阿里云，腾讯云上面都能买。</li><li>3 利用GitHub pages和hexo搭建静态博客，本地编写md文件，然后部署到github转化为html，相当于是托管于github。这种方法至少不用花钱买服务器，当然，你要是想绑定域名的话也可以照样去云服务商买一个，然后绑定到你的XXX.github.io上面。</li></ul><a id="more"></a><p>现在假设你已经在之前的Windows平台上搭好了hexo博客，并且能够正常部署运行。但因为需要，你要在另一台Mac系统的电脑上也能够管理你的hexo博客，可以利用Git分支来实现。</p><h1 id="在另一设备上管理博客"><a href="#在另一设备上管理博客" class="headerlink" title="在另一设备上管理博客"></a>在另一设备上管理博客</h1><ol><li>配置好环境</li></ol><ul><li>安装Node.js</li><li>安装Git</li><li>安装hexo<br>node.js可以直接去官网下载相应的匹配版本，Git的话，如果你的电脑安装是Mac并且安装了xcode，那么便不用再重新安装，xcode里便已经装有Git。</li></ul><ol start="2"><li>配置GitHub的SSH key<br>在新电脑上使用GitHub都需要先进行SSH key的配置，来获得GitHub的权限，以便本地和服务器之间数据的连接。</li></ol><ul><li>先测试你的电脑上是否已有ssh密钥,打开终端输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure></li></ul><p>如果没有，则进入下一步，生成ssh key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>将你的ssh key复制到GitHub上，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将ssh key复制进去。</li><li>最后测试你的ssh是否配置成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>具体如何配置hexo博客可以参考：<a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用hexo快速搭建个人博客</a></p><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><ol><li><p>进入你的username.github.io仓库主要，新建一个分支，名字可以自定义，下面以hexo为例：<br><img src="http://pc5wd3ju6.bkt.clouddn.com/hexo1.jpg" alt="alt"></p></li><li><p>切换到hexo分支，并将该分支设置为默认分支后并保存。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/hexo2.jpg" alt="alt"></p></li></ol><h1 id="上传配置文件到GitHub"><a href="#上传配置文件到GitHub" class="headerlink" title="上传配置文件到GitHub"></a>上传配置文件到GitHub</h1><ol><li>克隆hexo分支<br>将之前新建的分支克隆到本地<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com/username/username.github.io</span><br></pre></td></tr></table></figure></li></ol><p>查看当前所在分支是否为新建的hexo分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p><ol start="2"><li>上传部署文件</li></ol><ul><li><p>将你原先电脑里的配置文件拷贝到你的username.github.io文件目录下，这里的拷贝有几个文件或文件夹是必须要拷贝的：<br><strong>拷贝文件时要注意如果你的themes主题文件下下面有.git文件夹，要先将.git文件夹删除，否则主题文件会上传失败，一个GitHub仓库只能有一个.git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"> package.json</span><br><span class="line"> scaffolds/</span><br><span class="line"> source/</span><br><span class="line"> themes/</span><br></pre></td></tr></table></figure></li><li><p>拷贝完以后执行npm install 安装必要的组件</p></li><li><p>执行如下命令更新分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add new files&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>测试是否成功<br>可以执行hexo new “post”,hexo s预览是否有效，之后便用hexo d -g上传部署。</p></li></ul><ul><li>使用Mac系统操作hexo命令是要求在最前面加上sudo，否则会报错，提示你权限不足。<blockquote><p>master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在多台电脑协同管理hexo博客&quot;&gt;&lt;a href=&quot;#如何在多台电脑协同管理hexo博客&quot; class=&quot;headerlink&quot; title=&quot;如何在多台电脑协同管理hexo博客&quot;&gt;&lt;/a&gt;如何在多台电脑协同管理hexo博客&lt;/h1&gt;&lt;p&gt;我很早就想搞个个人博客，其实写博客主要有3种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 在第三方平台注册账号，直接在平台上写作并发布，例如博客圆，CSDN，新浪，网易等,这种方式最简单方便。&lt;/li&gt;
&lt;li&gt;2 自己搭建博客。这种看个人需求，能力强的，可以完全前后端都自己代码实现，但大多数人一般也是直接采用模版的，简单省事。不过自己搭建的话需要去云服务商购买域名和云服务器，服务器的话学生优惠还是比较大的，阿里云，腾讯云上面都能买。&lt;/li&gt;
&lt;li&gt;3 利用GitHub pages和hexo搭建静态博客，本地编写md文件，然后部署到github转化为html，相当于是托管于github。这种方法至少不用花钱买服务器，当然，你要是想绑定域名的话也可以照样去云服务商买一个，然后绑定到你的XXX.github.io上面。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Github" scheme="http://huangyiblog.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>来普陀山拜观音了</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%9D%A5%E6%99%AE%E9%99%80%E5%B1%B1%E6%8B%9C%E8%A7%82%E9%9F%B3%E4%BA%86/"/>
    <id>http://huangyiblog.com/随笔/来普陀山拜观音了/</id>
    <published>2018-10-04T10:48:41.000Z</published>
    <updated>2018-10-18T07:58:34.622Z</updated>
    
    <content type="html"><![CDATA[<p>　　鉴于中国国情，一直以来我都是十分抵触国庆出游的，原因你懂得。但这次可能有点坐不住了，我姐说要带母亲去泰国旅游，家里没了人，我咋办呀～不行，我也得出去玩，我想了想，恩，爬山挺不错的，我喜欢。然后就去找高中同学商量着一起国庆去爬山。爬什么山呢，浙江附近有名的山还是有不少的，黄山，三清山，庐山，雁荡山．．．这些我都考虑过，后来同学提了句普陀山怎么样，我立马便决定，好，就去普陀山，顺便看看大海，拜拜观音。从后面看来，我的决定还是比较正确的。<br>　　那时还没到中秋，我们俩就提前把去舟山的车票，民宿订好了，民宿订的是个混合旅馆，住两晚。国庆景区人山人海，这是一直被人诟病的事实，但我这次总体体验还行，天公作美呀，这两天天气出奇的好，温度适宜，海风凉爽。起初我还有点担心台风的问题，但最后收到预警通知时我们都已经准备返程了。你说运气好不好。当然唯一有点遗憾的就是没去东极岛，我只知道这是韩寒拍后会无期的取景地，中国的第一缕阳光照射的地方，不过东极岛本就不在我的计划范围内，真说遗憾到也谈不上，毕竟是个小岛，而且也远，票都不一定抢的到。<br>　　２号一大早起床，我就屁颠屁颠坐地铁来到杭州东站等大巴，坐着大巴离开杭州后的高速路上都很顺水，没发生什么堵车的问题，一直到了宁波镇海那边，速度有所减缓，真正发生堵车的地方就是在金塘大桥。这座桥是通往舟山的关键道路，也是图中碰到的第一座并且也是最长的一座跨海大桥。当然，比杭州湾跨海大桥要小点。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs2.jpg" alt="alt"><br>看到大海以后最大的感慨就是为何如此混黄不清，与我心目中蔚蓝色大海相去甚远。但稍微想想，浙江的海应该都是灰黄灰黄的吧，不知道是因为地处钱塘江入海口还是其他原因。但浩瀚的气势还是有的，和我看惯了的千岛湖、西湖完全就是两种风格。<br>进入舟山以后车子就开的较慢了，一路时停时走的来到了舟山普陀区，我当时也不记得自己买了到哪里的车票，结果就一路坐着过了观音大桥来到了朱家尖慈航广场，我一看，这哪行，我们定的民宿是在普陀区大岭下呀，然后有坐上车回程，司机带我们到彩虹广场放我们下来，我就顺便吃了饭再去民宿。<br>　　到了民宿后，我们结识了这次出行的第一位室友，聊了几句，发现他和我们一样也是大三学生，是个高高瘦瘦还有些帅气的萧山小伙子。我看到脖子上手臂上通红通红的，估计是被晒成这样的，当时他刚好玩累了回来，一脸虚脱样。他和我们不一样，我们是第一次来舟山，去普陀山拜观音的，他可不是第一次来了，他有两个大学同学是舟山人，这次放假就顺便陪他们来舟山玩两天再回家。到了傍晚，我们都没怎么饿，我就和同学商量着晚上去哪玩，这时萧山小哥说：“听说沈家门那边的鲁家峙大桥夜景挺不错的，我们一起去逛逛吧”，我们也没其他主意，于是在手机地图上查了查鲁家峙大桥的位置，写着距离２.４公里，我们一看，那也没多少路吗，直接走过去就得了。从大岭下出发，我们三人没走多久就遇到了个山洞，没想到这山洞出乎意料的长，我们三一前一后的排成一列，足足走了将近２０分钟才走到另一头，边上时不时几辆电瓶车飞驰而过，让我们老老实实贴着边缘走着，还真是不容易。没多久我们就来到了鲁家峙大桥桥底，上桥还得走个楼梯，从桥上往下望还是挺高的，桥下就是大海，这要掉下去可不是开玩笑的，我也不敢走太边上。我们在桥上赏了赏夜景，吹了吹海风，就返程了，返程我们可吃不消再走回去了，是坐公交回去的。回到民宿后，又和这位萧山小哥聊了聊，他在临安的浙江农林大学学法学，还准备要考研，司法考什么的，他倒是和我们聊起了昨晚和它住一起的室友，他说那位老哥昨晚大半夜的还在打电话，一个劲的拿头撞墙。我们听了一惊，只是咋回事呀，有啥想不开的？原来是被女朋友放了鸽子，放了鸽子还不算，他女朋友还要和他分手，而他早早地订好住宿，昨晚却在那电话里拼了命的求复合，一直闹腾到了大半夜，哎。我们那天也真是累了，第二天还得早起买票去，于是早早就上床休息了。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs1.jpg" alt="alt"></p><p>　　第二天６点多，我和同学起床吃了碗馄饨后就坐着公交来到慈航广场买船票了，那时还好，虽然已经有不少人在排队了，但还不算夸张，总之我们还是很庆幸自己出发的比较早。从朱家尖到普陀山的普通客船是３０元一人，普陀山进山门票是１８０，我们买了学生票９０元。进山后，我们往左开始游山，依次游览了百花园，观音<img src="http://pc5wd3ju6.bkt.clouddn.com/zs3.jpg" alt="alt">古洞，磐陀石等，那时人还不多，所以游览起来还是蛮舒服的。普陀山应该也是个佛教圣地，山上寺庙众多，经常看到一些墙上写着喃无哦米投佛，我们一路翻山，来到百步沙，这是个沙滩，我们随即脱了鞋子去沙滩玩了，这时我又想到了天气好的好处，大暑假的你让我在这沙滩上晒太阳我怕是不大吃得消。我们俩走沙滩上都留了好久，捐起裤脚走在海边，看着海浪一波波涌来，但不敢走太里面，万一一不当心海浪盖过膝盖，那我的裤子是得湿透了。这之后已经快中午了，人山人海的架势也有点显现了，我们之后绕到了不肯去观音院和紫竹林，我一开始还以为这紫竹林是一大片竹林呢，结果到了以后半根竹子都没见着…逛了大半天，真事还没干，来普陀山怎么也得拜下南海观音吧，但是当我们到了南海观音雕像时已经是人山人海了，还有不少拿着香在哪虔诚的拜观音，我们就走在人群里，都不知道他们是在拜观音还是在拜我了。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs4.jpg" alt="alt"></p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/zs5.jpg" alt="alt"><br>我们的最后一站是南天门，二石壁立如门，所以不要以为南天门真的是扇门，只是三块大石头，两边各一块，顶上一块，状似一扇门，也就是所谓的南天门。南天门逛完后我们便返程了，还真是挺累的，走了大半天的路。<br>　　到了晚上，我们又结识了一位新室友，昨晚那位萧山小哥回家去了，今天搬进来了另一位小伙子。这小伙子更有意思，我们一直聊天聊到后半夜都意犹未尽。他也是个大三学生，还和我一样学的是计算机，你说巧不巧，同行遇同行，两眼泪汪汪，我们竟然开始聊起来了学习．．对的，你没听错，我们一开始聊得是学习．．我问他有什么打算，准备走什么方向，他是在江西读书，想考研，以后走算法方向，不过不是ＡＩ算法，而是数据处理那方面的。但我们聊学习没聊多久就转移了话题，你也知道两个学渣聊不出多大花头。我对这位小哥倒是很感兴趣，慢慢慢慢兴致也就上来了，首先，他是新疆人，这就足以勾起我很大好奇心了，平时我可是很少接触到新疆人呢。而且他有些想法我也比较认同。我告诉我们他这次从江西那边过来，先在宁波玩了两天然后又来舟山玩，他已经去了全国很多地方，他对我们说他出去旅游很多时候并不是为了看景点啥的，而是接触各种各样的人，到四处游玩可以让他接触很多没见过的东西，碰到很多不一样的人，这些人都有自己的一些习俗，想法，和他们聊天是件很有意思的事。我们之后聊了很多很多，有关于他中学是谈对象的故事，有关于他一个土豪室友的故事，还有很多关于新疆的故事，我们俩真是第一次听说新疆竟然是这样的。据他说新疆治安那时真的厉害，目标就是震慑一些犯罪分子，恐怖分子。记得之前发生了一件什么事，整个新疆整整半年停网停通讯，当然他没具体说什么事，毕竟属于机密事件，我也不敢乱写，不然得惹上不小麻烦。而且他们那边你可不能偷偷翻墙，一翻墙你就得接受“教育”了．．．总是我们各种瞎扯，时不时发点感慨，哇，土豪的世界我理解不了，哇，新疆竟然发生过这种事，我们听来就更听故事似的。<br>　　最后大家都累了，便熄灯安稳入睡了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　鉴于中国国情，一直以来我都是十分抵触国庆出游的，原因你懂得。但这次可能有点坐不住了，我姐说要带母亲去泰国旅游，家里没了人，我咋办呀～不行，我也得出去玩，我想了想，恩，爬山挺不错的，我喜欢。然后就去找高中同学商量着一起国庆去爬山。爬什么山呢，浙江附近有名的山还是有不少的，
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="旅游记" scheme="http://huangyiblog.com/tags/%E6%97%85%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>128. 最长连续序列</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://huangyiblog.com/题解集/128-最长连续序列/</id>
    <published>2018-10-01T12:40:57.000Z</published>
    <updated>2018-10-09T14:43:20.627Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [100, 4, 200, 1, 3, 2]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure></p><p>分析：如果先进行排序在遍历求最长连续序列的长度，那么时间复杂度需要O(nlogn)，但是这题要求时间复杂度为O(n).考虑用哈希表的想法，用一个哈希表unordered_map&lt;int,bool&gt; used来记录每个元素是否使用，以该元素在中心，向左右遍历，直到不连续为止，每次记录下向左向右扩张的最长长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; used;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            used[nums[i]] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[nums[i]]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">            used[nums[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = nums[i] + <span class="number">1</span>; used.find(j) != used.end(); ++j) &#123;</span><br><span class="line">                used[j] = <span class="literal">true</span>;</span><br><span class="line">                ++length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = nums[i] - <span class="number">1</span>; used.find(j) != used.end(); --j) &#123;</span><br><span class="line">                used[j] = <span class="literal">true</span>;</span><br><span class="line">                ++length;</span><br><span class="line">            &#125;</span><br><span class="line">            longest = max(longest, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>4. 两个排序数组的中位数</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/4-%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://huangyiblog.com/题解集/4-两个排序数组的中位数/</id>
    <published>2018-10-01T12:25:52.000Z</published>
    <updated>2018-10-09T14:43:20.639Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。</p><p>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。</p><p>你可以假设 nums1 和 nums2 不同时为空。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">中位数是 2.0</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure></p><p>分析：题目要求求出两个有序数组的中位数，其实这个问题属于TOPKth问题的一个特例，就是让你求两个有序数组的第k大数。<br>思路：比较直观简单的想法就是合并两个有序数组然后再求中位数，但这种做法时间复杂度为O(m + n).可是题目里面要求时间复杂度控制为O(log(m + n)).换一种双指针想法，首先用一个计数器记录当前已找到的第m大的元素，同时让两个指针pA和pB分别指向两个数组的第一个元素，使用类似于归并排序的思想，如果数组nums1当前元素较小，那么pA++，同时m++；反之，pB++，同时m++。当m == k 遍历结束。时间复杂度O(k),空间复杂度O(1).但是如果k很接近m + n ,那么时间复杂度还是O(m + n)的。<br>在换一种想法，要求O(log(m + n))复杂度，我们想到二分查找，但是直接用二分，时间复杂度在O(log(m*n))，只能说用类似二分的做法。<br>我们假设nums1和nums2的元素个数都大于k / 2.我们比较nums1[k/2-1]和nums2[k/2-1]，有以下三种情况：</p><ul><li>nums1[k/2-1] == nums2[k/2-1]</li><li>nums1[k/2-1] &gt; nums2[k/2-1]</li><li>nums1[k/2-1] &lt; nums2[k/2-1]</li><li>如果nums1[k/2-1] &lt; nums2[k/2-1]，则nums1[0]~nums1[k/2-1]之间肯定在topK元素范围内，同理，如果nums1[k/2-1] &gt; nums2[k/2-1],则nums2[0] – nums2[k/2-1]肯定在topK元素范围内；如果nums1[k/2-1] == nums2[k/2-1] ，说明已找到第k大元素。<br>采用递归写法的话，终止条件为：</li><li>当nums1或nums2为空时，直接返回nums1[k-1]或nums2[k-1]</li><li>当k == 1时，返回min(nums1[0],nums2[0]);</li><li>当nums1[k/2-1]  == nums2[k/2-1],返回nums1[k/2-1]或nums2[k/2-1]</li></ul><p>关于具体的数学证明可以参考下官网给出的提解，蛮详细的。<br><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenA = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> lenB = nums2.size();</span><br><span class="line">        <span class="keyword">if</span>((lenA + lenB) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> r1 = (<span class="keyword">double</span>) findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">double</span> r2 = (<span class="keyword">double</span>) findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB) / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> (r1 + r2) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> startA, <span class="keyword">int</span> endA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B,<span class="keyword">int</span> startB, <span class="keyword">int</span> endB, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = endA - startA;</span><br><span class="line">        <span class="keyword">int</span> m = endB - startB;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> B[startB + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[startA + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[startA] &lt; B[startB] ? A[startA] : B[startB];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> midA = (startA + endA) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midB = (startB + endB) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[midA] &lt;= B[midB]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n / <span class="number">2</span> + m / <span class="number">2</span> + <span class="number">1</span> &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, endA, B, startB, midB, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, midA + <span class="number">1</span>, endA, B, startB, endB, k - n / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(n / <span class="number">2</span> + m / <span class="number">2</span> + <span class="number">1</span> &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, midA, B, startB, endB, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, endA, B, midB + <span class="number">1</span>, endB, k - m / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。&lt;/p&gt;
&lt;p&gt;请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。&lt;/p&gt;
&lt;p&gt;你可以假设 nums1 和 nums2 不同时为空。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>关于Ubuntu与win10双系统引导修复的问题</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%8Ewin10%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://huangyiblog.com/随笔/关于Ubuntu与win10双系统引导修复的问题/</id>
    <published>2018-10-01T07:30:50.000Z</published>
    <updated>2018-10-09T14:43:20.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p>我的电脑之前是在Windows10系统上装了一个Fedora版本的linux，基本上使用都没什么问题，说实话，因为我大部分软件或开发工具啥的主要都装在Windows系统上，所以平时还是win10用的比较多。但最近听说国内有一款仿Ubuntu的深度deepin系统也挺不错的，而且界面还挺像mac，所以就急着将自己电脑上的Fedora换成了deepin，但估计就是在安装deepin的时候出了叉子。我到现在也没搞清楚是哪里出了问题，动了什么不该动的东西，导致win10的启动引导程序坏了，最后结果就是按下开机键只能进入deepin了。即是你在刚开机时按下ESC进入系统选择界面选择Windows也是照样进不了。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>发现进不了Windows只能进deepin我就开始有点慌了，要知道我很多软件和工具都是装在Windows上面，而linux还只是个壳子。我可不想重装系统，当然也不得不做好这最坏的打算。当时试了很多方法行不通，就又将deepin换成了Ubuntu，但结果还是一样，这倒是在意料之中。起初以为只是Ubuntu与win10不兼容，需要修复一下引导就行，但按理说不应该的，我室友的组装机用的就是这两个系统，从来没出什么问题。我上网查了查，有人说直接进入Ubuntu终端，运行sudo -updategrub，更新一下grub就行了，但我试了好几次，包括修改grub.cfg文件，但都行不通，每次update以后根本不显示found Windows这样的字眼。这是便意识到想必是win10的引导已经损坏了，再在linux上面瞎搞估计也无济于事。这样一来，我就去网上找资料，查如何修复win10引导。主要步骤如下：</p><ul><li>首先你得有个win64位的PE系统启动U盘，在开机的时候按下ESC键进入系统选择界面（我的电脑是ESC，这个不同版本电脑可能有所不同，也有可能你是F11，F12）,之后选择你的U盘启动系统进入。</li><li>进入系统后，打开你的DG（DiskGenuis）分区工具</li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg1.PNG" alt="alt"></p><p>使用这个工具之前需要注意一个问题，那就是你的硬盘是什么格式的，是GPT还是MBR？<br>-</p><p>很多人写的修复方法都是针对硬盘类型为mbr的，就是直接选中的系统盘，如下图：点击硬盘选项下的重建主引导记录。</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg2.png" alt="alt"></p><p>然而问题出现了，当我点击 硬盘选项后，重建主引导记录这一栏是灰色的，无法选中。原因就是我的硬盘类型是GPT的。</p><ul><li><p>接下来要做的就是修复GPT格式的引导，首先我们注意到ESP分区没有盘符，我们需要给他指定一个盘符：<br><img src="http://pc5wd3ju6.bkt.clouddn.com/dg3.PNG" alt="alt"></p></li><li><p>指派好了就关闭DG工具，回到桌面，</p></li></ul><p>打开cmd命令行，输入以下命令并运行</p><p>　　bcdboot c:\windows /s g: /f uefi /l zh-cn</p><p>　　其中：c:\windows  硬盘系统目录，根据实际情况修改</p><p>　　/s g:     指定esp分区所在磁盘，根据实际情况修改</p><p>　　/f uefi   指定启动方式为uefi</p><p>　　/l zh-cn  指定uefi启动界面语言为简体中文</p><p>　　注：64位7PE不带/s参数，故7PE不支持bios启动下修复</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg4.PNG" alt="alt"></p><ul><li>创建成功后重新启动电脑，选择Windows boot manager进入系统，到这里win10的引导也就修复完成。</li></ul><h1 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h1><p>win10引导修复完成后的结果是，每次开机都是默认直接进入Windows，如果想要进入Ubuntu，还是要刚开机时按下ESC手动选择进入，而不是和之前一样，出现一个双系统选择界面供你直接选择。我进入Ubuntu之后尝试修复此问题，主要进行了如下操作：<br>1 进入Ubuntu终端，输入如下命令利用bootrepair修复引导<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进入root用户</span><br><span class="line">sudo -i </span><br><span class="line"># 添加软件源并更新</span><br><span class="line">add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp;　apt-get update</span><br><span class="line">＃　安装boot-repair并启动软件</span><br><span class="line">apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure></p><p>2 查看Windows10磁盘所在引导，然后继续进入Ubuntu终端，修改引导</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">vim /boot/grub/grub.cfg</span><br><span class="line">//再该文件末尾修改win10引导信息。</span><br><span class="line">//之后再更新引导</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>3 庆幸的是更新引导之后的确出现了found Windows的字眼，但是当我重启电脑，发现并没有改变什么，还是只能直接进入Windows，所以挺困惑的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;问题来源&lt;/h1&gt;&lt;p&gt;我的电脑之前是在Windows10系统上装了一个Fedora版本的linux，基本上使用都没什么问题，说实话，因为我大部分软
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaWeb开发环境设置</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/JavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/"/>
    <id>http://huangyiblog.com/业务开发/JavaWeb开发环境设置/</id>
    <published>2018-10-01T05:39:58.000Z</published>
    <updated>2018-10-09T14:43:20.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：下载所需要的开发工具"><a href="#第一步：下载所需要的开发工具" class="headerlink" title="第一步：下载所需要的开发工具"></a>第一步：下载所需要的开发工具</h1><ul><li>我这里的javaweb项目选择eclipse的javaee，下载网站：<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/packages/</a></li><li>服务器下载Tomcat，下载网站：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li><li>java jdk下载：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>jdk的环境配置这里我就不写了。</li><li>注意点：版本问题，每个软件版本都不是随便下的，首先不提倡急着下载最新版的，容易出bug。另外尤其要注意jdk版本和Tomcat版本的兼容问题，有一个版本过高或过低都是不行的。<br>关于版本匹配：可以参考下图（Tomcat官网有介绍）<br><img src="http://pc5wd3ju6.bkt.clouddn.com/tomcatversion.PNG" alt="alt"></li></ul><h1 id="第二步：eclipse配置"><a href="#第二步：eclipse配置" class="headerlink" title="第二步：eclipse配置"></a>第二步：eclipse配置</h1><p>1 如下图：<br>进入preferences<br><img src="http://pc5wd3ju6.bkt.clouddn.com/jw1.PNG" alt="alt"></p><p>2 进入java选项下的installed JREs配置jdk目录</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw2.PNG" alt="alt"></p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw3.PNG" alt="alt"></p><p>3 进入server配置tomcat的运行环境</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw4.PNG" alt="alt"></p><h1 id="第三步，新建一个javaweb项目，验证"><a href="#第三步，新建一个javaweb项目，验证" class="headerlink" title="第三步，新建一个javaweb项目，验证"></a>第三步，新建一个javaweb项目，验证</h1><p>如下图，在web选项新建一个Dynamic Web Project,并新建一个jsp，在里面任意输入内容后并允许，若能够正常输出，则配置成功。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/jw5.PNG" alt="alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一步：下载所需要的开发工具&quot;&gt;&lt;a href=&quot;#第一步：下载所需要的开发工具&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载所需要的开发工具&quot;&gt;&lt;/a&gt;第一步：下载所需要的开发工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我这里的javaweb项目选择e
      
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://huangyiblog.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git 与Ｇithub入门介绍</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/Git-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://huangyiblog.com/业务开发/Git-入门介绍/</id>
    <published>2018-09-27T14:22:17.000Z</published>
    <updated>2018-10-09T14:43:20.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h1><p>　　Git 是一款免费、开源的分布式版本控制系统，最早由 LinilusTorvalds 创建，用于管理 Linux 内核开发， 现已成为分布式版本控制的主流工具。版本控制系统（VCS）： 一种可以管理和追逐软件代码或其他类似类容的不同版本的工具。我们知道一旦启动一个项目，数据短暂且易失，对于相关的文本和代码，我们需要寻找合适的备份策略。而版本控制系统就是很好的备份策略，方便开发人员对变更进行追踪管理。。Git 由 Linus Torvalds 发明，起初是为了方便管理 Linux1内核的开发工作。如今，Git 已经在大量的项目中得到了 非常成功的应用。 　　</p><h1 id="Git常见功能"><a href="#Git常见功能" class="headerlink" title="Ｇｉｔ常见功能"></a>Ｇｉｔ常见功能</h1><ol><li>从服务器上克隆数据库（包括代码和版本信息）到单机上。 </li><li>在自己的机器上创建分支，修改代码。</li><li>在本地上自己创建的分支上提交代码。</li><li>在单机上合并分支。</li><li>新建⼀个分⽀，把服务器上最新版的代码fetch下来，然后跟⾃⼰的主分⽀合并。 </li><li>⽣成补丁（patch），把补丁发送给主开发者。   </li><li>看主开发者的反馈，如果主开发者发现两个⼀般开发者之间有冲突（他们之间可 以合作解决的冲突），就会要求他们先解决冲突，然后再由其中⼀个⼈提交。如果 主开发者可以⾃⼰解决，或者没有冲突，就通过。 </li><li>⼀般开发者之间解决冲突的⽅法，开发者之间可以使⽤ pull 命令解决冲突，解决 完冲突之后再向主开发者提交补丁</li></ol><h1 id="Git初步入门"><a href="#Git初步入门" class="headerlink" title="Git初步入门"></a>Git初步入门</h1><ul><li><p>如果你是第一次安装使用Git，你需要设置署名和邮箱：</p><pre><code>$ git config --global user.name &quot;⽤户名&quot; $ git config --global user.email &quot;电⼦邮箱&quot;</code></pre></li></ul><h2 id="关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。"><a href="#关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。" class="headerlink" title="关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。"></a>关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。</h2><p>  链接：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><p>阮老师用了一张图介绍了最常用的6个命令。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/git.png" alt="alt"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Workspace：工作区</span><br><span class="line">* Index / Stage：暂存区</span><br><span class="line">* Repository：仓库区（或本地仓库）</span><br><span class="line">* Remote：远程仓库</span><br></pre></td></tr></table></figure></p><ul><li><p>将代码仓库clone到本地，其实就是将代码复制到你的机器⾥，并交由Git来管理：</p><pre><code>$ git clone git@github.com:someone/symfony-docs-chs.git</code></pre></li><li><p>初始化本地仓库，当前目录下会出现一个名为 .git 的目录</p><p>  $ git init</p></li><li><p>新建一个目录，将其初始化为Git代码库</p><p>  $ git init [project-name]</p></li><li><p>下载一个项目和它的整个代码历史</p><p>   $ git clone [url]</p></li><li><p>删除工作区文件，并将这次删除放入暂存区</p><p>  $ git rm [file1] [file2] …</p></li><li><p>向这个本地的代码仓库添加当前目录的所有改动。</p><pre><code>$ git add .</code></pre></li><li><p>提交文件到本地仓库</p><p>   $ git commit -m “Hello”   </p></li><li><p>提交暂存区的指定文件到仓库</p><p>   $ git commit [file1] [file2] … -m [message]</p></li><li><p>添加某个文件</p><p>   $ git add -p</p></li><li><p>查看现在的状态</p><p>  $ git status</p></li><li><p>推送所有分支到远程仓库</p><p>   $ git push [remote] –all</p><h1 id="Github是什么"><a href="#Github是什么" class="headerlink" title="Github是什么"></a>Github是什么</h1></li><li><p>维基百科的说明：</p></li></ul><p>GitHub 是⼀个共享虚拟主机服务，⽤于存放使⽤ Git 版本控制的软件代码 和内容项⽬。它由 GitHub 公司（曾称 Logical Awesome）的开发者 Chris Wanstrath、PJHyett和TomPreston-Werner使⽤RubyonRails编写⽽成。</p><ul><li><p>官方介绍：<br>GitHubisthebestplacetosharecodewithfriends,co-workers,classmates, andcompletestrangers. OvereightmillionpeopleuseGitHubtobuildamazingthingstogether.</p></li><li><p>对普通用户来说，它还可以是：<br>1 网站<br>2 静态博客<br>3 管理配置文件<br>4 资料收集库<br>5 简历<br>6 管理代码片段<br>7 托管的编程环境<br>8 写作<br>……</p></li><li>界面主要功能<br>1 Git仓库<br>2 Organization<br>可以统一管理账户和权 限，还能统一支付一些费用。<br>3 Issue<br>Issue功能，是将一个任务或问题分配给一个 Issue进行追踪和管理的功能。每一个功能更改或修正都对应一个Issue，讨论或修正都以这个 Issue为中心进行。只要查看Issue，就能知道和这个更改相关的一切信 息，并以此进行管理。<br>4 Wiki<br>通过Wiki功能，任何人都能随时对一篇文章进行更改并保存，因 此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写 中。<br>5 Pull Request<br>开发者向GitHub的仓库推送更改或功能添加后，可以通过Pull Request 功能向别人的仓库提出申请，请求对方合并。</li></ul><p>GitHub可以托管各种git库，并提供⼀个web界⾯，但与其它像SourceForge 或 GoogleCode 这样的服务不同，GitHub 的独特卖点在于从另外⼀个项⽬ 进⾏分⽀的简易性。为⼀个项⽬贡献代码⾮常简单：⾸先点击项⽬站点的 “fork” 的按钮，然后将代码检出并将修改加⼊到刚才分出的代码库中，最后通过内建的 “pullrequest” 机制向项⽬负责⼈申请代码合并。</p><h1 id="GitHub项目创建"><a href="#GitHub项目创建" class="headerlink" title="GitHub项目创建"></a>GitHub项目创建</h1><p>可以直接在web页面new repository。<br>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;first commit&quot; </span><br><span class="line">$ git remote add origin 地址</span><br><span class="line">$ git push -u origin master //将代码由本地仓库上传到Github远程仓库</span><br></pre></td></tr></table></figure></p><h1 id="Pull-Request-的概要"><a href="#Pull-Request-的概要" class="headerlink" title="Pull Request 的概要"></a>Pull Request 的概要</h1><ul><li>Pull Request 是自己修改源代 码后，请求对方仓库采纳该修改时采取的一种行为。</li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/pushrequest.PNG" alt="alt"></p><p>PR流程：<br>1 fork对方的repository<br>2 clone你之前fork的repository到你的本地电脑</p><pre><code>git clone git@url</code></pre><p>3 与对方GitHub的repository建立连接</p><pre><code>git remote add upstream url</code></pre><p>4 建立工作分支</p><pre><code>git checkout -b xiaoming-branch</code></pre><p>5 添加代码</p><p>6 提交修改<br>用 git diff命令查看修改是否已经正确进行。<br>使用 git add PRTest ，git commit ,git push等系列命令提交</p><p>7 发起Pull Request</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git是什么？&quot;&gt;&lt;a href=&quot;#Git是什么？&quot; class=&quot;headerlink&quot; title=&quot;Git是什么？&quot;&gt;&lt;/a&gt;Git是什么？&lt;/h1&gt;&lt;p&gt;　　Git 是一款免费、开源的分布式版本控制系统，最早由 LinilusTorvalds 创建，用于
      
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Github" scheme="http://huangyiblog.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>2018上半年的阅读整理</title>
    <link href="http://huangyiblog.com/%E9%98%85%E8%AF%BB/2018%E4%B8%8A%E5%8D%8A%E5%B9%B4%E7%9A%84%E9%98%85%E8%AF%BB%E6%95%B4%E7%90%86/"/>
    <id>http://huangyiblog.com/阅读/2018上半年的阅读整理/</id>
    <published>2018-09-20T02:52:28.000Z</published>
    <updated>2018-10-14T08:53:20.616Z</updated>
    
    <content type="html"><![CDATA[<p>　　转眼间，２０１８大半年就过去了，今天想把自己这半年来的一些阅读整理下，也想让自己有个概念，这么长时间的浑浑噩噩，自己都干了些啥，都读了些啥。看看哪些书自个感觉还不错，哪些书虽不错但因自己能力有限无法深读，哪些书只是为了消遣时间。<br>　　１《卑鄙的圣人：曹操》<br>　　这本书姑且可算作是本历史书吧，至少让我从另一个视角了解到了曹操，其实说起来，读三国的时候，其他人暂且不提，你若是问我曹操和刘备你喜欢哪个，毫无疑问我更看好曹操。三国乱世，枭雄方能立足，假仁假义的君子有何用。你说曹操奸诈也好，卑鄙也好，但你得承认他很牛，对用兵为政有自己的一套见解，作诗也是一把好手。曹操若非奸雄，别说后来的三国鼎立，怕是都活不到那时就已命丧黄泉了。<br>　　２《包法利夫人》<br>　　《包法利夫人》是法国作家福楼拜创作的长篇小说。<br>　　小说描写包法利夫人爱玛为摆脱不幸婚姻，追求不正当爱情而导致堕落毁灭的悲剧。表面上是一个淫妇不满婚后情感而渴望爱情因此通奸偷晴，但确实一个真正可怜的角色，不光是情感上的，同时也是当时所处社会的悲剧。<br>　　３《红楼梦评论》王国维<br>　　因为对红楼梦特别着迷，所以有些人写的一些关于红楼梦我的看法我也会去了解下，这本书或许也不算不上是本书吧，有点像是一篇论文，简要的论述了红楼梦在伦理，美术，艺术、哲学等方面的价值。<br>　　４《依偎》<br>　　依偎是丁捷写的一部爱情小说，有点悲剧色彩。这本小说剧情展开也挺特别，主要根据安芬和小天互相讲故事来展开，最后一步步发现两人之间竟然还有着不为人知的联系并且深深相爱。<br>　　５《陪安东尼度过漫长岁月》<br>　　这本书的写法也挺奇葩，至少很少看到，算是挺治愈的一本书。<br>　　６《罗密欧与朱丽叶》<br>　　莎士比亚的一部很经典的悲剧。<br>　　７《奥赛罗》<br>　　同样是莎士比亚的一部悲剧<br>　　８《道德经》<br>　　．．．篇幅不长，我看的是一段古文后面一段白话文解释的，有些倒还能理解，有些看着就有点玄乎了，或许是自己水平太差。<br>　　９《伊豆的舞女》<br>　　《伊豆的舞女》是川端康成早期的代表作和成名作，也是一篇杰出的中篇小说。<br>　　展现了少男少女初恋时的朦胧与美好，挺清新的。<br>　　１０《告白》<br>　　挺好的剧情小说，人物角色多面性，而不是单的纯谁善谁恶，刻画出人性的复杂多面。<br>　　１１《少年的你，如此美丽》<br>　　玖月晞写的一本青春言情小说吧，剧情上感觉有一些地方有点雷同《白夜行》，但这部小说还是很大胆的刻画了青少年女生的校园欺凌事件，反映了弱势群体如何自保以及法律相关的问题。<br>　　１２《妻妾成群》<br>　　《妻妾成群》是作家苏童创作的一部中篇小说。这部作品通过描写一个“受过新时代教育”的女学生颂莲，自愿嫁入到高墙深院秩序井然的封建家族陈府，最终又在“妻妾成群”明争暗斗中走向精神崩溃的悲惨命运，艺术化地再现了中国封建礼教吞噬人性的恐怖景象。<br>　　１３《老婆，跟我回家吧》<br>　　酒小七写的网络言情小说，还算有点幽默吧<br>　　１４《魔道祖师》<br>　　这部小说是因为先看了动漫，好奇剧情发展而去看的。我是挺喜欢的，故事线完整，人物性格分明。最开始夷陵老祖魏无羡复活，我以为受尽冤屈与不公的他会走浩浩荡荡的复仇路线，但却并没有，内心依旧洒脱，和蓝忘机一同维护心中的正义。<br>　　１５《窦娥冤》<br>　　窦娥冤的冤情今天动地，但我一直不清楚窦娥冤在何处，但现在总算明白了。<br>　　１６《莺莺传》<br>　　读了西厢记，就顺便把元稹的莺莺传也读了<br>　　１７《斗破苍穹》<br>　　玄幻小说<br>　　１８《基都山伯爵》<br>　　复仇曲。我爱爱我的人，我很恨我的人。<br>　　１９《人间失格》太宰治<br>　　２０《我的晃荡的青春》<br>　　东野圭吾的故事<br>　　２１《富爸爸，穷爸爸》<br>　　这本书倒是略为提到了理财的方面，钱的重要性在现今社会不言而喻。<br>　　富爸爸喜欢买入资产，穷爸爸喜欢买入负债。<br>　　２２《堂吉诃德》<br>　　骑士小说<br>　　２３《罗生门》<br>　　《罗生门》以风雨不透的布局将人推向生死抉择的极限，从而展示了“恶”的无可回避，第一次传递出作者对人的理解，对人的无奈与绝望。<br>　　２４《爱情和其他魔鬼》<br>　　加西亚马尔克斯眼中魔鬼般的爱情。<br>　　２５《红顶商人胡雪岩》<br>　　商圣的传奇人生<br>　　２６《韩寒的ｏｎｅ系列》<br>　　２７《半小时漫画中国史》<br>　　有意思的漫画历史作品<br>　　２８《死刑今夜执行》<br>　　思婷写的一部推理小说<br>　　２９《革命时期的爱情》<br>　　３０《杨绛传》<br>　　３１《蒋勋说红楼梦》<br>　　３２《理想国》<br>　　３３《婉约词》<br>　　一本词集，只有词，没有注释解释啥的，你可以把自己想象成古人，嘻嘻，陶冶一番。<br>　　３４《小王子的领悟》<br>　　３５《邻人之妻》<br>　　由两性视角，诸多人物实例，反映美国社会这些年的发展。<br>　　３６古典四大名剧《西厢记》《牡丹亭》《桃花扇》《长生殿》<br>　　３７《战国策》<br>　　３８《资治通鉴》原著<br>　　３９《红手指》<br>　　东野圭吾较早的一部推理小说，但是也反映了家庭关系之间出现的一些问题<br>　　４０《聊斋志异》<br>以上主要是上半年看的一些书，其他的还有一些是关于编程的专业技能书，以及修仙玄幻言情等等网络小说，说白了，很多时候也就是为了消磨消磨时间，阅读就是挺能满足我的方式之一，嘻嘻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　转眼间，２０１８大半年就过去了，今天想把自己这半年来的一些阅读整理下，也想让自己有个概念，这么长时间的浑浑噩噩，自己都干了些啥，都读了些啥。看看哪些书自个感觉还不错，哪些书虽不错但因自己能力有限无法深读，哪些书只是为了消遣时间。&lt;br&gt;　　１《卑鄙的圣人：曹操》&lt;br&gt;
      
    
    </summary>
    
      <category term="阅读" scheme="http://huangyiblog.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="书单" scheme="http://huangyiblog.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>154. 寻找旋转排序数组中的最小值 II</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/154-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-II/"/>
    <id>http://huangyiblog.com/题解集/154-寻找旋转排序数组中的最小值-II/</id>
    <published>2018-09-08T07:35:45.000Z</published>
    <updated>2018-10-09T14:43:20.629Z</updated>
    
    <content type="html"><![CDATA[<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>请找出其中最小的元素。</p><p>注意数组中可能存在重复的元素。</p><p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,2,0,1]</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><p>分析：查找旋转了的排序数组，数组里允许存在重复元素，我们知道在一个数组里求最小元素，遍历整个数组肯定能求出，但一般时间复杂度都不是最优的，所以采用二分查找，当然对于这道题，如果数组里重复元素过多，二分的优势也并不明显。<br>分以下三种情况遍历：</p><ul><li>nums[mid] &gt; nums[left],查找右半区间</li><li>nums[mid] &lt; nums[left],查找左半区间</li><li>nums[mid] = nums[left] ，left++，跳过继续查找</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> min(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] &lt; nums[right]) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[left]) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[left]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(nums[left], nums[right]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。&lt;/p&gt;
&lt;p&gt;请找出其中最小的元素。&lt;/p&gt;
&lt;p&gt;注意数组中可能存在重复的元素。&lt;/p&gt;
&lt;p&gt;示例 1：
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
