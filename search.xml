<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[zcmu2034]]></title>
    <url>%2F2018%2F04%2F11%2FZCMU-2034%2F</url>
    <content type="text"><![CDATA[阶乘计算Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 43 Solved: 34[Submit][Status][Web Board]Description输入一个正整数n，输出n!的值。其中n!=1 2 3 …n。算法描述n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。 Input 输入包含一个正整数n，n&lt;=1000。 Output 输出n!的准确值。 Sample Input10Sample Output3628800HINTSource基础练习 相当于是大数的阶乘，也就是基本类型存不下，需要用数组来进行模拟。123456789101112131415161718192021222324252627#include&lt;stdio.h&gt; #include&lt;string.h&gt; int main() &#123; int a[3000],i,j,n; int c=0,s; memset(a,0,sizeof(a)); scanf("%d",&amp;n); a[0]=1; for(i=2;i&lt;=n;i++) &#123; for(j=0;j&lt;3000;j++) &#123; s=a[j]*i+c; a[j]=s%10; c=s/10;//保留进位 &#125; &#125; for(i=2999;i&gt;=0;i--) if(a[i]) break; for(j=i;j&gt;=0;j--) &#123; printf("%d",a[j]); &#125; return 0; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZCMU-1620]]></title>
    <url>%2F2018%2F04%2F10%2FZCMU-1620%2F</url>
    <content type="text"><![CDATA[1620: 全排列Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 198 Solved: 89[Submit][Status][Web Board]Description给定n个数 a[0] , a[1] …….. a[n-1], 输出其全排列。 Input第一行输入一个数n，（n&lt;7） 接下来一行输入n个数。 Output按字典序从小到大输出全排列 Sample Input31 2 331 2 2Sample Output1 2 31 3 22 1 32 3 13 1 23 2 11 2 22 1 22 2 1HINT 全排列，枚举排列常用的方法有两种：一种是递归枚举，另一种是用STL中的next_permutation 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;void print_permutation(int n,int *p,int *a,int cur)&#123; if(cur==n) &#123; for(int i=0;i&lt;n-1;i++) &#123; printf("%d ",a[i]); &#125; printf("%d\n",a[n-1]); &#125; else for(int i=0;i&lt;n;i++) if(!i||p[i]!=p[i-1]) &#123; int ok=1; int c1=0,c2=0; for(int j=0;j&lt;cur;j++)if(a[j]==p[i]) c1++; for(int j=0;j&lt;n;j++) if(p[i]==p[j]) c2++; if(c1&lt;c2)&#123; a[cur]=p[i]; print_permutation(n,p,a,cur+1); &#125; &#125;&#125;int main()&#123; int n,p[10],a[1000]; while(~scanf("%d",&amp;n)) &#123; memset(a,0,sizeof(a)); for(int i=0;i&lt;n;i++) &#123; scanf("%d",&amp;p[i]); &#125; sort(p,p+n); print_permutation(n,p,a,0); &#125; return 0;&#125; 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,a[10]; while(cin&gt;&gt;n) &#123; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n); do &#123; for(int i=0;i&lt;n-1;i++) printf("%d ",a[i]); printf("%d\n",a[n-1]); &#125;while(next_permutation(a,a+n)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《控方证人》观后感]]></title>
    <url>%2F2018%2F04%2F03%2F%E3%80%8A%E6%8E%A7%E6%96%B9%E8%AF%81%E4%BA%BA%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这个周末有点小忙哈哈，没办法，得准备Ｊａｖａ课件呀，好歹也是个愚人节呢，得让自己放松下，于是花了点时间看了部老电影《控方证人》，一部上世纪６０年代的电影，一部黑白片。我一般不大会特意去找某部电影，一些早已被广为认可的经典我会时不时抽几部欣赏欣赏，很少有令我失望过，当然，这次也不例外。 很好的一部剧情片，惊悚我倒没怎么感觉到，但不得不说，一流的演员以及一流的剧本让我佩服不已，至少我是被骗到了，结局在我的意料之外，当然中间确实有些困惑的地方，我很理解为什么沃尔的妻子竟然当起了控方证人。影片开始，个性鲜明的律师威尔弗里德爵士便出现在荧幕上，很有意思的一个家伙，一看到雪茄就耐不住想吸上一口，看似嘴不饶人，其实内心善良热诚。他身边的护士尽管一天到晚啰里啰嗦招人烦，却也是真正为威尔弗里德爵士的健康着想。紧接着，剧情展开，控方与被告的辩论也即将展开。 我为什么说我被骗到了，起初我真的认为沃尔是无辜的，是被冤枉的，富婆的死只是被某个入室抢劫犯误杀了，紧接着，伟大的威尔弗里德爵士作为正义的化身，冒着身体旧病复发的风险为沃尔展开辩护，然后一步步过关斩将，去的胜利，沃尔无罪释放！看，结局多么美好，但细想一番，若真是如此，这剧情片恐怕也难成为经典了。开头的警巡，包括之后的女佣，这两人的证词在我看来都很正常，警巡，按照职业习惯进行了正常的回答。至于女佣，势利的姿态可以说是展现的很充分，哈哈，这世上没有无缘无故的恨，沃尔的出现让本该属于她的遗产瞬间成为一场空，他恨透了沃尔，巴不得看着他上绞刑架．．但后一位控方证人让我难以理解，那就是沃尔的妻子克里斯汀，她的出现让我困惑，我相信威尔弗里德爵士当时也是和我相似的心情。看似恩爱的夫妻有什么理由说反目就反目呢，难道之前的感情本就是虚假的？没看到结尾，我真的没猜到这对夫妻竟然都在演戏，在法庭上演了一出精彩的戏。只不过人人喊打的克里斯汀确是陷入爱情的有心人，而看似无辜的沃尔才是花心大萝卜，才是真凶。法律规定，嫌疑人的妻子是无法为其辩护的，证词无效，于是克里斯汀就想到了该当控告，直到最后决定判决的那几分情书信纸，也不过只是她的计划一部分。好可怕的一个女人，竟然铁定了心犯伪证罪也要救这样一个花心大萝卜，难以理解。两个人一唱一和的一出戏，骗过了整个法庭，我没有想到，沃尔竟然真的杀了富婆，更没想到克里斯汀知道是他杀了富婆还要牺牲自己就他，更没想到两人的感情，谁是真心，谁是假意让我一脸蒙蔽，人生如戏，全靠演技呀！哈哈哈～～]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2017书单]]></title>
    <url>%2F2018%2F04%2F01%2F%E6%88%91%E7%9A%842017%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[1、《平凡的世界》2、《霜冷长河》3、《霍乱时期的爱情》4、《文化苦旅》5、《千年一叹》6、《许三观卖血记》7、《白夜行》8、《嫌疑人X的献身》9、《解忧杂货店》10、《资治通鉴》11、《活着》12、《三体》13、《百年孤独》14、《活着为了讲述》15、《人生》16、《偷影子的人》17、《黄金时代》18、《无声告白》19、《小王子》20、《夜莺与玫瑰》21、《飘》22、《海边的卡夫卡》23、《东方快车上的谋杀案》24、《挪威的森林》25、《雪国》26、《不能承受的生命之轻》27、《恶意》28、《陶庵梦忆》29、《红楼梦》30、《沉默的大多数》31、《少年维特的烦恼》32、《傲慢与偏见》33、《麦田里的守望者》34、《北岛诗集》35、《顾城诗集》36、《海子诗集》37、《余光中散文诗集》38、《鳄鱼街》39、《自由在高处》40、《愿你与这世界温暖相拥》41、《很高兴见到你》42、《无证之罪》43、《白马山庄杀人事件》44、《浮士德》45、《老人与海》46、《北鸢》47、《菜根谭》48、《单恋》49、《鬼谷子》50、《人类群星闪耀时》51、《人间词话》52、《古文观止》53、《假面饭店》54、《幻夜》55、《看见》56、《撒哈拉的故事》57、《月亮和六便士》58、《漫漫自由路》59、《1984》60、《1980年代的爱情》61、《本草纲目》62、《傅雷家书》63、《我们三》64、《围城》65、《钱钟书传》66、《草房子》67、《我的职业是小说家》68、《爱你就像爱生命》69、《这些人那些事》70、《明朝那些事》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++字符串操作]]></title>
    <url>%2F2018%2F03%2F31%2FC%2B%2B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1）字符串操作strcpy(p, p1) 复制字符串strncpy(p, p1, n) 复制指定长度字符串strcat(p, p1) 附加字符串strncat(p, p1, n) 附加指定长度字符串strlen(p) 取字符串长度strcmp(p, p1) 比较字符串strcasecmp忽略大小写比较字符串strncmp(p, p1, n) 比较指定长度字符串strchr(p, c) 在字符串中查找指定字符strrchr(p, c) 在字符串中反向查找strstr(p, p1) 查找字符串strpbrk(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找该集合的任一元素strspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找不属于该集合的任一元素的偏移strcspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找属于该集合的任一元素的偏移 具有指定长度的字符串处理函数在已处理的字符串之后填补零结尾符 2）字符串到数值类型的转换strtod(p, ppend) 从字符串 p 中转换 double 类型数值，并将后续的字符串指针存储到 ppend 指向的 char* 类型存储。strtol(p, ppend, base) 从字符串 p 中转换 long 类型整型数值，base 显式设置转换的整型进制，设置为 0 以根据特定格式判断所用进制，0x, 0X 前缀以解释为十六进制格式整型，0 前缀以解释为八进制格式整型atoi(p) 字符串转换到 int 整型atof(p) 字符串转换到 double 符点数atol(p) 字符串转换到 long 整型 void memset(void dest, int c, size_t count);将dest前面count个字符置为字符c. 返回dest的值. void memmove(void dest, const void *src, size_t count);从src复制count字节的字符到dest. 如果src和dest出现重叠, 函数会自动处理. 返回dest的值. void memcpy(void dest, const void *src, size_t count);从src复制count字节的字符到dest. 与memmove功能一样, 只是不能处理src和dest出现重叠. 返回dest的值. void memchr(const void buf, int c, size_t count);在buf前面count字节中查找首次出现字符c的位置. 找到了字符c或者已经搜寻了count个字节, 查找即停止. 操作成功则返回buf中首次出现c的位置指针, 否则返回NULL. void _memccpy(void dest, const void *src, int c, size_t count);从src复制0个或多个字节的字符到dest. 当字符c被复制或者count个字符被复制时, 复制停止. 如果字符c被复制, 函数返回这个字符后面紧挨一个字符位置的指针. 否则返回NULL. /实现strcpy函数,将源串strSrc的内容复制到目标串strDest，返回值为指向目标串的指针/char strcpy(char strDest,const char strSrc)//源字符串+const，表明其为输入参数{ assert((strDest!=NULL&amp;&amp;(strSrc!=NULL))); //对源地址和目的地址加非0判断 char address=strDest; while((strDest++=strSrc++)!=’\0’); return address;}/实现strcat函数：将源串添加到str1的末尾，同时覆盖旧串末尾的’\0’,在新串末尾+’\0’,返回指向str1的指针。/char strcat(char str1,char str2){ char p=str1; assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(str1!=’\0’) str1++; while(str1++=str2++); return p;}/strcmp函数：比较str1和str2两个字符串的大小，若str1&gt;str2，则返回正数；若str1&lt;str2，则返回负数；若str1==str2，则返回0。/int strcmp(const char str1,const char str2){ assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(str1&amp;&amp;str2&amp;&amp;(str1==str2)) { str1++; str2++; } return str1-str2;}void memset(void s,int c,size_t n) //将已开辟内存空间s的首n个字节的值设为c{ assert(s!=NULL); char tmp=(char )s; while(n–) { tmp++=(char)c; } return s;}void memcpy(void dest,const void src,size_t n)//从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中{ assert(dest!=NULL&amp;&amp;src!=NULL); char tmpdest=(char )dest; char tmpsrc=(char )src; while(n– &gt;0) tmpdest++=*tmpsrc++; return dest;}]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016电影]]></title>
    <url>%2F2018%2F03%2F31%2F%E6%88%91%E7%9A%842016%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[1、《马力和马克思》2、《怦然心动》3、《天堂电影院》4、《海上钢琴师》5、《教父系列》6、《控方证人》7、《千与千寻》8、《从你的全世界路过》9、《战狼2》10、《金刚狼3》11、《大话西游系列》12、《鬼子来了》13、《让子弹飞》14、《天才枪手》15、《比利比恩的中场战事》16、《麦兜的故事》17、《美国丽人》18、《泰坦尼克号》19、《阿飞正传》20、《x森林系列》21、《辩护人》22、《记忆碎片》23、《哈尔的移动城堡》24、《烈日灼心》25、《一条狗的使命》26、《致命魔术》27、《星际穿越》28、《驯龙高手》29、《幸福终点站》30、《时空恋旅人》31、《致命ID》32、《你的名字》33、《幽灵公主》34、《盗梦空间》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016书单]]></title>
    <url>%2F2018%2F03%2F29%2F%E6%88%91%E7%9A%842016%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[你好,这是我的2016书单。1、《一句顶一万句》2、《寻路中国》3、《人类简史》4、《一只特立独行的猪》5、《三国演义》6、《世说新语》7、《战国策》8、《春风沉醉的夜晚》9、《水浒传》10、《茶花女》11、《天黑以后》12、《悟空传》13、《苦妓回忆录》14、《不属于我们的世纪》15、《身份的焦虑》16、《追忆似水年华》17、《约翰克里斯多夫》18、《无名的裘德》19、《高老头》20、《浮生六记》21、《二手时间》22、《洗澡》23、《爱情和其他魔鬼》24、《芳华》25、《冰与火之歌》26、《远山淡影》27、《目送》28、《自深深处》29、《巨人的陨落》30、《余华短篇集》31、《基督山伯爵》32、《三个火枪手》33、《和喜欢的一切在一起》34、《弗兰克尔自传》35、《重新认识你自己》36、《二十四史》37、《长恨歌》38、《面包树上的女人》39、《追随你的心》40、《不能不去爱的两件事》41、《在这复杂世界里》42、《坏小孩》43、《季羡林私人史》44、《金瓶梅》45、《孤独六讲》46、《我们生活在巨大的差距里》47、《分身》48、《宿命》49、《快乐是在心里》50、《我的精神家园》51、《万历十五年》52、《撒切尔夫人传》53、《飞鸟集》54、《幻灭》55、《当我跑步时我谈些什么》56、《富爸爸、穷爸爸》57、《雅舍小品》58、《一个女子恋爱的时候》59、《从一到无穷大》60、《虚无的十字架》61、《资本论》62、《白说》63、《在细雨中呼喊》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[满江红]]></title>
    <url>%2F2018%2F03%2F29%2F%E6%BB%A1%E6%B1%9F%E7%BA%A2%2F</url>
    <content type="text"><![CDATA[满江红–岳飞 怒发冲冠， 凭栏处，潇潇雨歇。 抬望眼， 仰天长啸， 壮怀激烈。 三十功名尘与土， 八千里路云和月。 某等闲，白了少年头， 空悲切， 靖康耻， 犹未雪。 臣子恨， 何时灭！ 驾长车， 踏破贺兰山缺。 壮志饥餐胡虏肉， 笑谈渴饮匈奴血。 待从头，收拾旧山河， 朝天阙。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
</search>
