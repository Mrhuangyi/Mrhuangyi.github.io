<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[葬花词]]></title>
    <url>%2F%E6%91%98%E5%BD%95%2F%E8%91%AC%E8%8A%B1%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[程高通行本《葬花吟》 花谢花飞花满天，红消香断有谁怜？ 游丝软系飘春榭，落絮轻沾扑绣帘。 闺中女儿惜春暮，愁绪满怀无释处。 手把花锄出绣帘，忍踏落花来复去。 柳丝榆荚自芳菲，不管桃飘与李飞； 桃李明年能再发，明年闺中知有谁？ 三月香巢已垒成，梁间燕子太无情！ 明年花发虽可啄，却不道人去梁空巢也倾。 一年三百六十日，风刀霜剑严相逼； 明媚鲜妍能几时，一朝漂泊难寻觅。 花开易见落难寻，阶前愁杀葬花人， 独倚花锄泪暗洒，洒上空枝见血痕。 杜鹃无语正黄昏，荷锄归去掩重门； 青灯照壁人初睡，冷雨敲窗被未温。 怪奴底事倍伤神？半为怜春半恼春。 怜春忽至恼忽去，至又无言去未闻。 昨宵庭外悲歌发，知是花魂与鸟魂？ 花魂鸟魂总难留，鸟自无言花自羞； 愿侬此日生双翼，随花飞到天尽头。 天尽头，何处有香丘？ 未若锦囊收艳骨，一抔净土掩风流3。 质本洁来还洁去，强于污淖陷渠沟。 尔今死去侬收葬，未卜侬身何日丧？ 侬今葬花人笑痴，他年葬侬知是谁？ 试看春残花渐落，便是红颜老死时； 一朝春尽红颜老，花落人亡两不知！]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的定义与性质]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%A0%91%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%80%A7%E8%B4%A8%2F</url>
    <content type="text"><![CDATA[树的定义与性质由若干结点和若干条边组成的数据结构。常用性质： 树可以没有结点，这种情况把树称为空树。 树的层次从根结点开始算起，即根结点为第一层，根结点子树的根结点为第二层，以此类推。 把结点的子树棵数称为结点的度，树中结点的最大的度称为树的度。 由于一条边连接两个结点，且树中不存在环，因此对有n个结点的树，边数一定是n-1.满足连通、边数等于顶点数-1的结构一定是一棵树。 叶子结点被定义为度为0的结点，因此当树中只有一个结点（即只有根结点）时，根结点也算作叶子结点。 结点的深度是指从根结点（深度为1）开始自顶向下逐层累加至该结点的深度值。结点的高度是指从最底层叶子结点开始自底向上逐层累加至该结点时的高度值。树的深度是指树中结点的最大深度，树的高度是指树中结点的最大高度。对树而言，深度与高度相等。 多棵树组合在一起称为森林，即森林是若干树的集合。二叉树的递归定义（用自身定义自身） 二叉树要么没有根结点，是一棵空树。 二叉树要么由根结点、左子树。右子树组成，且左子树和右子树都是二叉树。 两种特殊二叉树 满二叉树： 每一层的结点个数都达到了当层能达到的最大结点数 完全二叉树： 除了最下面一层之外，其余层的结点个数都达到了当层能达到的最大结点数，且最下面一层只从左到右连续存在若干结点，而这些结点右边的结点全部不存在。 树的其他概念 层次：层次类似于家谱中的辈分关系 孩子结点、父亲结点、兄弟结点、祖先结点、子孙结点：一个结点的子树的根结点称为它的孩子结点，而它称为孩子节点的父亲结点。与该结点同父亲的结点称为该结点的兄弟结点。二叉树的存储结构与基本操作 二叉树的存储结构与链表类似，只是指针域改为两个——指向左子树的根结点地址和右子树的根结点地址。如果某个子树不存在，则指向NULL 1234567891011121314struct node&#123; typename data;//数据域 node* lchild;//指向左子树根结点的指针 node* rchild;//指向右子树根结点的指针&#125;;//根结点初始化node* root=NULL;//往二叉树中插入结点node* newNode(int v)&#123; node* Node = new node;//申请一个node型变量的地址空间 Node-&gt;data=v;//结点权值 Node-lchild=Node-&gt;rchild=NULL; return Node;//返回新建结点的地址&#125; 二叉树的查找、修改查找操作是指在给定数据域的条件下，在二叉树中找到所有数据域为给定数据域的结点 12345678910void search(node* root,int x,int newdata)&#123; if(root==NULL)&#123; return ;//空树（递归边界） &#125; if(root-&gt;data==x)&#123;//找到数据域为x的结点，把它修改为newdata root-&gt;data=newdata; &#125; search(root-&gt;lchild,x,newdata);//往左子树搜索x（递归式） search(root-&gt;rchild,x,newdata);//往右子树搜索x（递归式）&#125; 二叉树结点的插入结点的插入位置一般取决于数据域需要在二叉树中存放的位置，且对給定结点来说，它在二叉树中的插入位置只会有一个。即二叉树结点的插入位置就是数据域在二叉树中查找失败的位置 12345678910111213void insert(node* &amp;root,int x)&#123; if(root==NULL)&#123;//空树，即查找失败，即插入位置（递归边界） root=newNode(x); return ; &#125; if(x需插在左子树)&#123; insert(root-&gt;lchild,x); &#125;else&#123; insert(root-&gt;rchild,x); &#125;&#125;上述中，根结点指针root使用了&amp;引用，即在函数中修改root会直接修改原变量，如果不用引用，就无法将新结点接到二叉树上面，而search函数中修改的是指针root指向的内容，而不是root本身，所以不需要引用。 二叉树的创建 1234567node* Create(int data[],int n)&#123; node* root=NULL;//新建空根结点 for(int i=0;i&lt;n;i++)&#123; insert(root,data[i]); &#125; return root;&#125; root==NULL与*root==NULL的区别即结点不存在与结点存在但没有内容的区别 完全二叉树存储结构对完全二叉树的任一结点x，其左孩子编号一定为2x，右孩子编号为2x+1.完全二叉树可以通过建立一个大小为2^k的数组来存放所有结点的信息，其中k为完全二叉树的最大高度且1号位必须存放根结点，该数组中元素存放的顺序恰好为该完全二叉树的层序遍历序列判断某个结点是否为叶结点的标志为：该结点（下标记为t）的左子结点的编号2*t大于结点总个数n判断某个结点是否为空结点的标志：该结点下标t大于结点总个数n。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[组合数]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2F%E7%BB%84%E5%90%88%E6%95%B0%2F</url>
    <content type="text"><![CDATA[例1：求n！中有多少质因子p 直观想法：计算从1~n的每个数各有多少个质因子p，然后将结果累加，时间复杂度为O(nlogn).123456789101112131415161718192021222324int cal(int n,int p)&#123; int ans=0; for(int i=2;i&lt;=n;i++)&#123; int temp=i; while(temp%p==0)&#123; ans++; temp/=p; &#125; &#125; return ans;&#125;///O(logn)的算法int cal(int n,int p)&#123; int ans=0; whil(n)&#123; ans+=n/p; n/=p; &#125; return ans;&#125;int cal(int n,int p)&#123; if(n&lt;p) return 0; return n/p+cal(n/p,p);&#125; 组合数的计算互补性质 即从m个不同元素中取出n个元素的组合数=从m个不同元素中取出 (m-n) 个元素的组合数； 这个性质很容易理解，例如C(9,2)=C(9,7)，即从9个元素里选择2个元素的方法与从9个元素里选择7个元素的方法是相等的。规定：C(n,0)=12.组合恒等式若表示在 n 个物品中选取 m 个物品，则如存在下述公式：C(n,m)=C(n,n-m)=C(n-1,m-1)+C(n-1,m)。 通过定义直接计算12345678910111213long long c(long long n,long long m)&#123; long long ans =1; for(long long i=1;i&lt;=n;i++)&#123; ans*=i; &#125; for(long long i=1;i&lt;=m;i++)&#123; ans/=i; &#125; for(long long i=1;i&lt;=n-m;i++)&#123; ans/=i; &#125; return ans;&#125; 通过递推公式计算12345678910111213141516171819long long res[67][67]=&#123;0&#125;;long long c(long long n,long long m)&#123; if(m==0||m==n) return 1; if(res[n][m]!=0) return res[n][m]; return res[n][m]=c(n-1,m)+c(n-1,m-1);&#125;///打表计算const int n=60;void calc()&#123; for(int i=0;i&lt;=n;i++)&#123; res[i][0]=res[i][i]=1; &#125; for(int i=2;i&lt;=n;i++)&#123; for(int j=0;j&lt;=i/2;j++)&#123; res[i][j]=res[i-1][j]+res[i-1][j-1];///递推计算c(i,j) res[i][i-j]=res[i][j];///c(i,i-j)=c(i,j) &#125; &#125;&#125; 通过定义式的变形计算12345678long long c(long long n,long long m)&#123; long long ans=1; for(long long i=1;i&lt;=m;i++)&#123; ans=ans*(n-m+i)/i; &#125; return ans;&#125; 计算C(n,m)%p通过递推公式计算12345678910111213141516171819递归：int res[1010][1010]=&#123;0&#125;;int c(int n,int m,int p)&#123; if(m==0||m==n) return 1; if(res[n][m]!=0) return res[n][m]; return res[n][m]=(c(n-1,m)+c(n-1,m-1))%p;&#125;递推：void calc()&#123;for(int i=0;i&lt;=n;i++)&#123; res[i][0]=res[i][i]=1;&#125;for(int i=2;i&lt;=n;i++)&#123; for(int j=0;j&lt;=i/2;j++)&#123; res[i][j]=(res[i-1][j]+res[i-1][j-1])%p; res[i][i-j]=res[i][j]; &#125;&#125;&#125; 根据定义式计算123456789int prime[maxn];int c(int ,n,int m,int p)&#123; int ans=1 for(int i=0;prime[i]&lt;=n;i++)&#123; int c=cal(n,prime[i])-cal(m,prime[i])-cal(n-m,prime[i]); ans=ans*binaryPow(prime[i],c,p)%p; &#125; return ans;&#125; 根据定义式的变形计算1234567891011121314151617181920212223242526272829///求c(n,m)%p,且m&lt;p,p为素数int c(int n,int m,int p)&#123; int ans=1; for(int i=1;i&lt;=m;i++)&#123; ans=ans*(n-m+1)%p; ans=ans*inverse(i,p)%p; &#125; return ans;&#125;///求c(n,m)%p,m任意,p为素数int c(int n,int m,int p)&#123; int ans=1,nump=0; for(int i=1;i&lt;=m;i++)&#123; int temp=n-m+i; while(temp%p==0)&#123; nump++; temp/=p; &#125; ans=ans*temp%p; temp=i; while(temp%p==0)&#123; nump--; temp/=p; &#125; ans=ans*inverse(temp,p)%p; &#125; if(nump&gt;0) return 0; else return ans;&#125; Lucas定理1234int Lucas(int n,int m)&#123; if(m==0) return 1; return c(n%p,m%p)*Lucas(n/p,m/p)%p;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[algorithm头文件下常用函数]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Falgorithm%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[algorithm头文件下常用函数1. max(),min(),abs()max(x,y)和min(x,y)分别返回x和y中的最大值和最小值，且参数必须是两个。abs(x) 返回x的绝对值。x必须为整数，浮点型的绝对值要用math头文件下的fabs 2. swap()swap(x,y)用来交换x和y的值 3. reverse()reverse(it,it2) 可以将数组指针在[it,it2)之间的元素或容器的迭代器在[it,it2)范围内的元素进行反转。1234567891011121314151617181920212223242526#include&lt;stdio.h&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;10,11,12,13,14,15&#125;; reverse(a,a+4); for(int i=0;i&lt;6;i++)&#123; printf("%d ",a[i]); &#125; return 0;&#125;#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; string str="abcdefghi"; reverse(str.begin()+2,str.begin()+6); for(int i=0;i&lt;str.length();i++)&#123; printf("%c",str[i]); &#125; return 0;&#125; 4. next_permutation()next_permutation() 给出一个序列在全排列中的下一个序列123456789101112#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,3&#125;; do&#123; printf("%d %d %d\n",a[0],a[1],a[2]); &#125;while(next_permutation(a,a+3)); return 0;&#125; 5. fill()fill() 可以把数组或容器中的某一段区间赋为某个相同的值。和memset不同，这里的赋值可以使数组类型对应范围中的任意值。12345678910111213#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,3,4,5&#125;; fill(a,a+5,233); for(int i=0;i&lt;5;i++)&#123; printf("%d ",a[i]); &#125; return 0;&#125; 6. sort()默认为递增排序 若要递减排序，需要增加比较函数 1234bool cmp(int a,int b)&#123; return a&gt;b;&#125;sort(a,a+n,cmp); 结构体数组排序 1234567891011struct node&#123; int x,y;&#125;a[10];bool cmp(node a,node b)&#123; return a.x&gt;b.x; &#125;//bool cmp(int x,int y)&#123; if(a.x!=b.x) return a.x&gt;b.x; else return a.y&lt;b.y;&#125; 容器排序，在STL标砖容器中，只有vector/string/deque可以sort 1234567891011121314151617181920#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;bool cmp(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; vector&lt;int&gt; vi; vi.push_back(3); vi.push_back(1); vi.push_back(2); sort(vi.begin(),vi.end(),cmp); for(int i=0;i&lt;3;i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; 7. lower_bound()和upper_bound()lower_bound 和 upper_bound()需要用在一个有序数组或容器中。lower_bound(first,last,val) 用来寻找在数组或容器的[first,last)范围内第一个值大于等于val元素的位置，如果是数组，返回该位置的指针；若果是容器，返回该位置的迭代器upper_bound(first,last,val) 用来寻找在数组或容器的[first,last)范围内第一个值大于val元素的位置，如果是数组，返回该位置的指针；若果是容器，返回该位置的迭代器1234567891011#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,2,3,3,3,5,5,5,5&#125;; printf("%d,%d\n",lower_bound(a,a+10,3)-a,upper_bound(a,a+10,3)-a); return 0;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pair简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fpair%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[pairpair 可以看作一个内部有两个元素的结构体，且这两个元素的类型是可以指定的。1234struct pair1&#123; typename1 first; typename2 second;&#125; 1. pair定义需要添加或头文件123456pair&lt;typename1,typename2&gt; name;pair&lt;string,int&gt; p;pair&lt;string,int&gt; p("haha",5);//临时构建pairpair&lt;string,int&gt;("hhha",5);make_pair("hhha",5); 2. pair中元素访问12345678910111213141516#include&lt;iostream&gt;#include&lt;utility&gt;#include&lt;string&gt;using namespace std;int main()&#123; pair&lt;string,int&gt; p; p.first="haha"; p.second=5; cout&lt;&lt;p.first&lt;&lt;" "&lt;&lt;p.second&lt;&lt;endl; p=make_pair("xixi",6); cout&lt;&lt;p.first&lt;&lt;" "&lt;&lt;p.second&lt;&lt;endl; p=pair&lt;string,int&gt;("heihei",555); cout&lt;&lt;p.first&lt;&lt;" "&lt;&lt;p.second&lt;&lt;endl; return 0;&#125; 3. pair常用函数两个pair类型可直接用==、！=、&lt;、&lt;=、&gt;、&gt;=比较大小，先比较first，若first相等，在比较second1234567891011121314#include&lt;iostream&gt;#include&lt;utility&gt;#include&lt;string&gt;using namespace std;int main()&#123; pair&lt;int,int&gt; p1(5,10); pair&lt;int,int&gt; p2(5,15); pair&lt;int,int&gt; p3(10,5); if(p1&lt;p3) printf("p1&lt;p3\n"); if(p1&lt;=p3) printf("p1&lt;=p3\n"); if(p1&lt;p2) printf("p1&lt;p2\n"); return 0;&#125; 4. pair常见用途 代替二元结构体及其构造函数，节省编码时间 作为map的键值对进行插入123456789101112131415#include&lt;iostream&gt;#include&lt;utility&gt;#include&lt;string&gt;#include&lt;map&gt;using namespace std;int main()&#123; map&lt;string,int&gt; mp; mp.insert(make_pair("heihei",5)); mp.insert(pair&lt;string,int&gt;("haha",6)); for(map&lt;string,int&gt;::iterator it=mp.begin();it!=mp.end();it++)&#123; cout&lt;&lt;it-&gt;first&lt;&lt;" "&lt;&lt;it-&gt;second&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[stack简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fstack%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[stack常见用法stack 指栈，是STL中实现的一个后进先出的容器 1. stack定义1stack&lt;int&gt; name; 2. stack内容器元素访问只能通过top()来访问栈顶元素123456789101112#include&lt;stdio.h&gt;#include&lt;stack&gt;using namespace std;int main()&#123; stack&lt;int&gt; st; for(int i=1;i&lt;=5;i++)&#123; st.push(i); &#125; printf("%d\n",st.top()); return 0;&#125; 3. stack常用函数 push()push(x) 将元素x压栈，时间复杂度 O(1) top()top() 获得栈顶元素，时间复杂度 O(1) pop()pop() 用来弹出栈顶元素，时间复杂度 O(1) 123456789101112131415#include&lt;stdio.h&gt;#include&lt;stack&gt;using namespace std;int main()&#123; stack&lt;int&gt; st; for(int i=1;i&lt;=5;i++)&#123; st.push(i); &#125; for(int i=1;i&lt;=3;i++)&#123; st.pop(); &#125; printf("%d\n",st.top()); return 0;&#125; empty()empty() 判断stack是否为空，为空返回true，否则返回false。 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;stack&gt;using namespace std;int main()&#123; stack&lt;int&gt; st; if(st.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; st.push(1); if(st.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; return 0;&#125; size()返回stack内元素个数 123456789101112#include&lt;stdio.h&gt;#include&lt;stack&gt;using namespace std;int main()&#123; stack&lt;int&gt; st; for(int i=1;i&lt;=5;i++)&#123; st.push(i); &#125; printf("%d\n",st.size()); return 0;&#125; stack常见用途stack 常被用于模拟实现一些递归，防止程序对栈内存的限制而导致程序运行出错]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[queue简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fqueue%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[queue的常见用法queue 队列，在stl中实现了一个先进先出的容器。 1. queue的定义1queue&lt;typename&gt; name; 2. queue容器内的元素访问在STL中通过front()访问队首元素，通过back()访问队尾元素123456789101112#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; queue&lt;int&gt; q; for(int i=1;i&lt;=5;i++)&#123; q.push(i); &#125; printf("%d %d\n",q.front(),q.back()); return 0;&#125; 3. queue 的常用函数 push()push(x) 将x进行入队 front()访问队首元素，back()访问队尾元素。 pop() 令队首元素出队 123456789101112131415#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; queue&lt;int&gt; q; for(int i=1;i&lt;=5;i++)&#123; q.push(i); &#125; for(int i=1;i&lt;=3;i++)&#123; q.pop(); &#125; printf("%d",q.front()); return 0;&#125; empty()empty()检测queue是否为空，为空，返回true；否则，返回false 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; queue&lt;int&gt; q; if(q.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; q.push(1); if(q.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; return 0;&#125; size()size()返回queue内元素的个数 123456789101112#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; queue&lt;int&gt; q; for(int i=1;i&lt;=5;i++)&#123; q.push(i); &#125; printf("%d\n",q.size()); return 0;&#125; 优先队列 priority_queue的常见用法优先队列，底层用堆实现。队首元素一定是当前队列中优先级最高的一个。可以在任何时候往优先队列中加入元素，而优先队列底层的数据结构堆（heap）会随时调整结构，使每次的队首元素都是优先级最大的。 1. priority_queue的定义1priority_queue&lt;typename&gt; name; 2. priority_queue容器内元素访问通过top()函数来访问队首（堆顶）元素，即优先级最高的元素123456789101112#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; priority_queue&lt;int&gt; q; q.push(3); q.push(4); q.push(1); printf("%d\n",q.top()); return 0;&#125; 3. priority_queue的常用函数 push()push(x) 将元素x入队，时间复杂度O(logn) top()top() 获得队首元素，时间复杂度O(1) pop()pop() 令队首元素出队，时间复杂对O(logn) 1234567891011121314#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; priority_queue&lt;int&gt; q; q.push(3); q.push(4); q.push(1); printf("%d\n",q.top()); q.pop(); printf("%d\n",q.top()); return 0;&#125; empty()empty()检测优先队列是否为空，为空，返回true，否则返回false，时间复杂度O(1) 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; priority_queue&lt;int&gt; q; if(q.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; q.push(1); if(q.empty()==true)&#123; printf("Empty\n"); &#125; else&#123; printf("Not Empty\n"); &#125; return 0;&#125; size()size() 返回队列内元素个数 123456789101112#include&lt;stdio.h&gt;#include&lt;queue&gt;using namespace std;int main()&#123; priority_queue&lt;int&gt; q; for(int i=1;i&lt;=5;i++)&#123; q.push(i); &#125; printf("%d\n",q.size()); return 0;&#125; 4. priority_queue内元素优先级位置 基本数据类型的优先级位置一般是数字大的优先级越高以下两种优先队列定义等价 1234priority_queue&lt;int&gt; q;priority_queue&lt;int, vector&lt;int&gt;,less&lt;int&gt;&gt; q;//vector&lt;int&gt; 是指承载底层数据结构堆的容器，less&lt;int&gt;则是对第一个参数的比较类//less&lt;int&gt;表示数字大的优先级越大，greater&lt;int&gt;表示数字小的优先级越大 结构体的优先级设置 1234567struct fruit&#123;string name;int price;frind bool operator &lt; (const fruit &amp;f1,const fruit &amp;f2)&#123; return f1.price&gt;f2.price;&#125;&#125;;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[map简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fmap%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[map(映射) 平时定义的数组，其实都是一种映射，但都是将int型映射到其他类型。而map可以将任何基本类型映射到任何基本类型。 比如建立string型到int型的映射。 map的定义1234map&lt;typename1,typename2&gt; mp;其中 typename1是键的类型，typename2是值的类型map&lt;string,int&gt; mp;map&lt;set&lt;int&gt;,string&gt; mp; map内元素访问map一般有两种访问方式：通过下标访问或通过迭代器访问。 通过下标访问 1234567891011 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['c'] = 20; mp['c'] = 30; printf("%d\n",mp['c']); return 0;&#125; 通过迭代器访问map&lt;typename1,typename2&gt;::iterator it;map可以使用it-&gt;first来访问键，使用it-&gt;second来访问值12345678910111213141516 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['m'] =20; mp['r'] =30; mp['a'] =40; for(map&lt;char,int&gt;::iterator it=mp.begin();it!=mp.end();it++)&#123; printf("%c %d\n",it-&gt;first,it-&gt;second); &#125; return 0;&#125;//map会以键从小到大的顺序自动排序，这是由于map内部是使用红黑树实现的（set也是），在建立映射的过程中会自动实现从小到大的排序功能 map常用函数实例解析 find()find(key)返回键为key的映射的迭代器，时间复杂度为O(logn) 12345678910111213 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; map&lt;char,int&gt;::iterator it = mp.find('b'); printf("%c %d\n",it-&gt;first,it-&gt;second); return 0;&#125; erase()erase()两种用法：删除单个元素、删除一个区间内所有元素 删除单个元素mp.erase(it), 时间复杂度O(1)12345678910111213141516 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; map&lt;char,int&gt;::iterator it = mp.find('b'); mp.erase(it); for(map&lt;char, int&gt;::iterator it =mp.begin();it!=mp.end();it++)&#123; printf("%c %d\n",it-&gt;first,it-&gt;second); &#125; return 0;&#125; mp.erase(key) 时间复杂度为O(logn) 123456789101112131415 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; mp.erase('b'); for(map&lt;char, int&gt;::iterator it =mp.begin();it!=mp.end();it++)&#123; printf("%c %d\n",it-&gt;first,it-&gt;second); &#125; return 0;&#125; 删除一个区间内所有元素mp.erase(first,last) first:要删除的区间的其实迭代器last: 要删除的区间的末尾迭代器的下一个地址。 时间复杂度：O(last-first) 12345678910111213141516 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; map&lt;char,int&gt;::iterator it = mp.find('b'); mp.erase(it,mp.end()); for(map&lt;char, int&gt;::iterator it =mp.begin();it!=mp.end();it++)&#123; printf("%c %d\n",it-&gt;first,it-&gt;second); &#125; return 0;&#125; size()size()用来获得map中映射的对数，时间复杂度为O(1) 123456789101112 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; printf("%d\n",mp.size()); return 0;&#125; clear()clear()用来清空map中的所有元素，复杂度为O(n) 12345678910111213 #include&lt;stdio.h&gt; #include&lt;map&gt;using namespace std;int main()&#123; map&lt;char,int&gt; mp; mp['a'] =1; mp['b'] =2; mp['c'] =3; mp.clear(); printf("%d\n",mp.size()); return 0;&#125; map常见用途 需要建立字符（字符串）与整数之间的映射 判断大整数或其他类型数据是否存在的题目，把map当bool数组 字符串和字符串之间的映射map的键和值是唯一的，如果一个键要对应多个值，只能用multimap]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[string简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fstring%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[string 的常见用法1. string的定义string str;string str= “abcd”; 2. string 内容访问 通过下标访问 1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str="abcd"; for(int i=0;i&lt;str.length();i++)&#123; printf("%c",str[i]); &#125; return 0;&#125;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str; cin&gt;&gt;str; cout&lt;&lt;str; return 0;&#125;#include&lt;stdio.h&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str="abcd"; printf("%s\n",str.c_str());///用C_str()将string类型转换为字符数组 return 0;&#125; 通过迭代器访问 1234567891011#include&lt;stdio.h&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str="abcd"; for(string::iterator it=str.begin();it!=str.end();it++)&#123; printf("%c",*it); &#125; return 0;&#125; 3.string 常用函数 operator +=string加法 123456789101112#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str1="abcd",str2="xya",str3; str3=str1+str2; str1+=str2; cout&lt;&lt;str1&lt;&lt;endl; cout&lt;&lt;str2&lt;&lt;endl; return 0;&#125; compare operator两个string类型可直接使用==、！=、&lt;、&lt;=、&gt;、&gt;=比较大小，比较规则为字典序 123456789#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str1="aaa",str2="bbb",str3="ccc",str4="qqq"; if(str1&lt;str2) printf("ok\n"); return 0;&#125; length()/size()返回string的长度，两者用法基本相同 insert()insert(pos,string),在pos号位置插入字符串stringinsert(it,it2,it3) it为原字符串的欲插入位置，it2，it3为待插字符串的首尾迭代器表示串[it2,it3)将被插在it位置 12345678910#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "abcxyz",str2="opq"; str.insert(str.begin()+3,str2.begin(),str2.end()); cout&lt;&lt;str&lt;&lt;endl; return 0;&#125; erase() 删除单个元素 12345678910#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "abcxyzefs"; str.erase(str.begin()+4); cout&lt;&lt;str&lt;&lt;endl; return 0;&#125; 删除一个区间内所有元素 str.erase(first,last) 删除[first,last) 12345678910#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "abcxyzefs"; str.erase(str.begin()+2,str.end()-1); cout&lt;&lt;str&lt;&lt;endl; return 0;&#125; str.erase(pos,length) pos 为要删除的起始位置，length为删除的字符个数 12345678910#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "abcxyzefs"; str.erase(3,2); cout&lt;&lt;str&lt;&lt;endl; return 0;&#125; clear() 清空string中的数据 12345678910#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "abcxyzefs"; str.clear(); printf("%d\n",str.length()); return 0;&#125; substr()substr(pos,len) 返回从pos号位开始，长度为len的子串，时间复杂度为O(len) 123456789#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str = "Thank you for your smile!"; cout&lt;&lt;str.substr(0,5)&lt;&lt;endl; return 0;&#125; string::nposstring::npos 是一个常数，其本身值为-1，由于属于unsigned_int 类型，可认作unsigned_int类型的最大值string::npos用以作为find函数失败时的的返回值 12345678910111213#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; if(string::npos==-1)&#123; cout&lt;&lt;"-1 is true."&lt;&lt;endl; &#125; if(string::npos==4294967295)&#123; cout&lt;&lt;"4294967295 is alse true"&lt;&lt;endl; &#125; return 0;&#125; find()str.find(str2),当str2是str的子串，返回其在str中第一次出现的位置；如果不是，那么返回string::nposstr.find(str2,pos) 从str的pos号位开始匹配str2复杂度为O(mn) 12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str= "Thank you for your smile"; string str2="you"; string str3="me"; if(str.find(str2)!=string::npos)&#123; cout&lt;&lt;str.find(str2)&lt;&lt;endl; &#125; if(str.find(str2,7)!=string::npos)&#123; cout&lt;&lt;str.find(str2,7)&lt;&lt;endl; &#125; if(str.find(str3)!=string::npos)&#123; cout&lt;&lt;str.find(str3)&lt;&lt;endl; &#125; else&#123; cout&lt;&lt;"no position for me"&lt;&lt;endl; &#125; return 0;&#125; replace()str.replace(pos,len,str2) 把str从pos号位开始，长度为len的子串替换为str2str.replace(it1,it2,str2) 把str的迭代器[it1,it2)范围的子串替换为str2 123456789101112#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; string str= "Thank you for your smile"; string str2="you"; string str3="me"; cout&lt;&lt;str.replace(10,4,str2)&lt;&lt;endl; cout&lt;&lt;str.replace(str.begin(),str.begin()+5,str3)&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[set简简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fset%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[set的常见用法 set指集合，是一个内部自动有序且不含重复元素的容器。 1. set的定义set name;set name;set name;set name;set name;set数组定义set Arrayname[arraysize];set a[100];// a[0]~a[99]中的每一个都是一个set容器 2. set容器内元素的访问set只能通过迭代器访问12345678910111213141516171819set&lt;typename&gt;::iterator it;set&lt;int&gt;::iterator it;set&lt;char&gt;::iterator ir;得到迭代器it后，可通过*it访问set内的元素#include&lt;stdio.h&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; st.insert(3); st.insert(4); st.insert(5); st.insert(3); for(set&lt;int&gt;::iterator it = st.begin();it!=st.end();it++)&#123; printf("%d ",*it); &#125; return 0;&#125; set的常用函数 insert()insert(x)可将x插入set容器中，并自动排序和去重，时间复杂度为O(logn) find()find(x)返回set中对应值x的迭代器，时间复杂度为O(logn) 12345678910111213#include&lt;stdio.h&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; for(int i=1;i&lt;=3;i++)&#123; st.insert(i); &#125; set&lt;int&gt;::iterator it = st.find(2);///在set里查找2，返回其迭代器 printf("%d\n",*it); return 0;&#125; erase()两种用法： 删除单个元素 删除一个区间内的所有元素 st.erase(it), it为所需要删除元素的迭代器，时间复杂度为O(1) 123456789101112131415161718#include&lt;stdio.h&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; st.insert(100); st.insert(200); st.insert(111); st.insert(300); st.insert(100); st.erase(st.find(100)); st.erase(st.find(200)); for(set&lt;int&gt;::iterator it=st.begin();it!=st.end();it++)&#123; printf("%d ",*it); &#125; return 0;&#125; st.erase(value) value为所要删除元素的值，时间复杂度为O(logn) 123456789101112131415161718#include&lt;stdio.h&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; st.insert(100); st.insert(200); st.insert(111); st.insert(300); st.insert(100); st.erase(111); st.erase(200); for(set&lt;int&gt;::iterator it=st.begin();it!=st.end();it++)&#123; printf("%d ",*it); &#125; return 0;&#125; 删除一个区间内的所有元素st.erase(first,last) 删除[first,last),时间复杂度为O（last-first） 1234567891011121314151617#include&lt;stdio.h&gt;#include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; st.insert(20); st.insert(10); st.insert(40); st.insert(30); set&lt;int&gt;::iterator it = st.find(30); st.erase(it,st.end()); for(it = st.begin();it!=st.end();it++)&#123; printf("%d ",*it); &#125; return 0;&#125; clear()clear()用来清空set中的所有元素，复杂度为O（n） 1234567891011121314 #include&lt;stdio.h&gt; #include&lt;set&gt;using namespace std;int main()&#123; set&lt;int&gt; st; st.insert(20); st.insert(10); st.insert(40); st.insert(30); st.clear(); printf("%d\n",st.size()); return 0;&#125; set常见用途set主要作用 为自动去重并按升序排序set中元素具有唯一性，如果要处理不唯一情况，要用multisetc++11标准中增加了unordered_set,以散列代替set内部的红黑树（一种自平衡二叉查找树）实现，使其可以用来处理只去重但不排序的需求，速度比set快很多]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vector简介]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Fvector%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[vector的常见用法vector 翻译为向量，也可理解为 变长数组，即长度根据需要而自动改变的数组。123456789101. vector的定义vector&lt;typename&gt; name;vector&lt;int&gt; name;vector&lt;double&gt; name;vector&lt;char&gt; name;vector&lt;node&gt; name;vector&lt;vector&lt;int&gt; &gt; name;二维：vector&lt;typename&gt; Arrayname[arraySize];vector&lt;int&gt; vi[100]; 2. vector容器内元素访问 通过下标访问和访问普通数组一样，对一个定义为vector vi的vector容器来说，直接访问vi[index]即可。这里的下标范围为0~vi.size()-1 通过迭代器访问迭代器（iterator）可以理解为类似一种指针的东西，其定义为：vector::iterator it;vector::iterator it;这样即得到迭代器 it 通过*it访问vector里的元素vector vi;for(int i=1;i&lt;=5;i++){vi.push_back(i);}12345678910111213141516171819202122232425262728293031323334#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vector&lt;int&gt;::iterator it = vi.begin(); for(int i=0;i&lt;5;i++)&#123; printf("%d ",*(it+i)); &#125; return 0;&#125;v[i] 等价于 *(vi.begin()+i)begin() 用于取vi的首元素地址而end() 用于取vi尾元素地址的下一个地址，即 左闭右开#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vector&lt;int&gt;::iterator it = vi.begin(); for(it = vi.begin();it!=vi.end();it++) &#123;///vector的迭代器不支持it&lt;vi.end(),所以只能用it!=vi.end(); printf("%d ",*it); &#125; return 0;&#125; vector常用函数 push_back() 在vector后面添加一个元素，时间复杂度为O（1） 1234567891011121314#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; for(int i=0;i&lt;vi.size();i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; pop_back() 删除vector的尾元素，时间复杂度为O（） 123456789101112131415#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vi.pop_back(); for(int i=0;i&lt;vi.size();i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; size() 用来获得vector中元素的个数，时间复杂度为O（），size()返回unsigned类型 12345678910111213#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; printf("%d",vi.size()); return 0;&#125; clear() 用来清空vector中所有元素，时间复杂度为o（n） 1234567891011121314#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vi.clear(); printf("%d",vi.size()); return 0;&#125; insert() insert(it,x)用来向vector的任意迭代器it处插入一个元素x，时间复杂度为O（n） 123456789101112131415#include&lt;stdio.h&gt;#include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vi.insert(vi.begin()+2,-1); for(int i=0;i&lt;vi.size();i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; erase()erase() 有两种用法：删除单个元素； 删除一个区间内的所有元素。时间复杂度为O（N） 删除单个元素 123456789101112131415 #include&lt;stdio.h&gt; #include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vi.erase(vi.begin()+3); for(int i=0;i&lt;vi.size();i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; 删除一个区间内的所有元素erase(first,last) 即删除[first,last)内的所有元素123456789101112131415 #include&lt;stdio.h&gt; #include&lt;vector&gt;using namespace std;int main()&#123; vector&lt;int&gt; vi; for(int i=1;i&lt;=5;i++)&#123; vi.push_back(i); &#125; vi.erase(vi.begin()+1,vi.begin()+4); for(int i=0;i&lt;vi.size();i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; vector常见用途 存储数据 用邻接表存储图]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[素数问题]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[素数 素数又称为质数，是指除了1和本身外，不能被其他数整除的一类数。 素数判断直接遍历循环复杂度为O(n);复杂度为O(sqrt(n))的算法;12345678910111213141516bool isprime(int n)&#123; if(n&lt;=1) return false; int sqr = (int)sqrt(1.0*n); for(int i=2;i&lt;=sqr;i++)&#123; if(n%i==0) return false; &#125; return true;&#125;//简洁写法bool isprime(int n)&#123; if(n&lt;=1) return false; for(int i=2;i*i&lt;=n;i++)&#123; if(n%i==0) return false; &#125; return true;&#125; 素数表的获取思路一： 根据判断素数的方法，直接从1~n进行枚举，若为素数则加入表中，枚举部分复杂度为O(n),判断素数部分复杂度为O(sqrt(n)),所以总复杂度为O(n*sqrt(n)),该算法对于n小于10^5可以承受;12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;#include&lt;math.h&gt;bool isprime(int n)&#123; if(n&lt;=1) return false; int sqr = (int)sqrt(1.0*n); for(int i=2;i&lt;=sqr;i++)&#123; if(n%i==0) return false; &#125; return true;&#125;int prime[101],num=0;bool p[101]=&#123;0&#125;;void Find_Prime()&#123; for(int i=1;i&lt;101;i++)&#123; if(isprime(i)) &#123; prime[num++]=i; p[i]=true; &#125; &#125;&#125;int main()&#123; Find_Prime(); for(int i=0;i&lt;num;i++)&#123; printf("%d ",prime[i]); &#125; return 0;&#125; 思路二：埃氏筛法，复杂度为O(nloglogn). 欧拉筛法，复杂度为O(n).素数筛法的关键在于筛字，即从小到大枚举所有数，对每一个素数，筛去它的所有倍数，剩下的均为素数。12345678910111213141516171819202122#include&lt;stdio.h&gt;const int maxn = 101;int prime[maxn],num=0;bool p[maxn]=&#123;0&#125;;//如果i为素数，则p[i]为false,否则，p[i]为truevoid Find_Prime()&#123; for(int i=2;i&lt;maxn;i++)&#123; if(p[i]==false)&#123; prime[num++]=i;//将素数i存入数组 for(int j=i+i;j&lt;maxn;j+=i)&#123;//筛去所有i的倍数，两个循环条件均不能加= p[j]=true; &#125; &#125; &#125;&#125;int main()&#123; Find_Prime(); for(int i=0;i&lt;num;i++)&#123; printf("%d ",prime[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[大整数运算]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[大整数运算 大整数的含义为：用基本数据类型无法存储其精度的整数，即没有办法用已有的数据类型来表示并计算，而需要去模拟加减乘除的过程， 大整数的存储 使用数组存储，即整数的高位存储在数组的高位，整数的低位存储在数组的低位。由于运算时都是从整数的低位到高位进行枚举， 所以顺序存储与该思维相合。 注意点：当整数按字符串%s读入时是逆位存储的，所以需要反转至另一数组。1234567891011121314151617181920212223242526272829struct bign&#123; int d[1000]; int len; bign()&#123; memset(d,0,sizeof(d)); len = 0; &#125;&#125;;bign change(char str[])&#123; bign a; a.len=strlen(str); for(int i=0;i&lt;a.len;i++)&#123; a.d[i]=str[a.len-i-1]-'0'; &#125; return a;&#125;比较两个bign变量的大小：先判断两者的len大小，如果不相等，以长的为大；如果相等，则从高位到低位进行比较，直到出现某一位不等，结束比较。int compare(bign a,bign b)&#123; if(a.len&gt;b.len) return 1; else if(a.len&lt;b.len) return -1; else&#123; for(int i=a.len-1;i&gt;=0;i--)&#123; if(a.d[i]&gt;b.d[i]) return 1; else if(a.d[i]&lt;b.d[i]) return -1; &#125; return 0; &#125;&#125; 高精度加法对两个数其中的每一位进行加法的步骤：将该位上的两个数字相加，得到的结果取个位数作为该位结果，取十位数作为新的进位1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;string.h&gt;struct bign&#123; int d[1000]; int len; bign()&#123; memset(d,0,sizeof(d)); len = 0; &#125;&#125;;bign change(char str[])&#123; bign a; a.len=strlen(str); for(int i=0;i&lt;a.len;i++)&#123; a.d[i]=str[a.len-i-1]-'0'; &#125; return a;&#125;bign add(bign a,bign b)&#123; bign c; int carry=0;//进位 for(int i=0;i&lt;a.len||i&lt;b.len;i++)&#123; int temp=a.d[i]+b.d[i]+carry; c.d[c.len++]=temp%10; carry=temp/10; &#125; if(carry!=0)&#123; c.d[c.len++]=carry; &#125; return c;&#125;void print(bign a)&#123; for(int i=a.len-1;i&gt;=0;i--)&#123; printf("%d",a.d[i]); &#125;&#125;int main()&#123; char str1[1000],str2[1000]; scanf("%s%s",str1,str2); bign a=change(str1); bign b=change(str2); print(add(a,b)); return 0;&#125;上述写法两个对象都是非负整数，如果有一方是负的，可以在转换到数组这一步时去掉其负号，然后采用高精度减法；如果两个都是负的，就都去掉负号后采用高精度加法，最后加上负号。 高精度减法步骤：对每一步，比较被减位和减位，如果不够减，则令被减位的高位减1，被减位加10在进行减法；如果够减，则直接减。减法后高位可能有多余的0，要除去它们，但也要保证结果至少有一位数。1234567891011121314bign sub(bign a,bign b)&#123; bign c; for(int i=0;i&lt;a.len||i&lt;b.len;i++)&#123; if(a.d[i]&lt;b.d[i])&#123; a.d[i+1]--; a.d[i]+=10; &#125; c.d[c.len++]=a.d[i]-b.d[i]; &#125; while(c.len-1&gt;=1&amp;&amp;c.d[c.len-1]==0)&#123; c.len--; &#125; return c;&#125; 高精度与低精度的乘法步骤：取bign的某位与int型整体相乘，再与进位相加，所得结果的个位数作为该位结果，高位作为新的进位。1234567891011121314bign multi(bign a,int b)&#123; bign c; int carry=0; for(int i=0;i&lt;a.len;i++)&#123; int temp=a.d[i]*b+carry; c.d[c.len++]=temp%10; carry=temp/10; &#125; while(carry!=0)&#123; c.d[c.len++]=carry%10; carry/=10; &#125; return c;&#125; 高精度与低精度的除法步骤：上一步的余数乘以10加上该步的位，得到该步临时的被除数，将其与除数比较：如果不够除，则该位的商为0；如果够除，则商即为对应的商，余数即为对应的余数。最后一步要注意高位可能有多余的0，要去除它们，但也要保证结果至少有一位数。12345678910111213141516bign divide(bign a,int b,int &amp;r)&#123;//r为余数 bign c; c.len=a.len; for(int i=a.len-1;i&gt;=0;i--)&#123; r=r*10+a.d[i]; if(r&lt;b) c.d[i]=0; else&#123; c.d[i]=r/b; r=r%b; &#125; &#125; while(c.len=1&gt;=1&amp;&amp;c.d[c.len-1]==0)&#123; c.len--; &#125; return c;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[为自己去去去“功利化”]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%8E%BB%E2%80%9C%E5%8A%9F%E5%88%A9%E5%8C%96%E2%80%9D%2F</url>
    <content type="text"><![CDATA[想找回纯粹的自己 不知从何时起，发现自己只剩下眼前的苟且，所谓的诗和远方早已不见踪影。不知是社会的悲哀，还是我自己的悲哀，从中学到大学，越发觉得自己成了一个精致的利己主义者。也许你会说人不为己天诛地灭，势利本就是人的一种本性，哪有那么多高尚者能为他人考虑多过为自己考虑。 一个大学生，虽说不是什么９８５重点高校，但却仍旧找不到自己所真正热爱的，长时间为日后从事什么职业而迷茫岂不可笑。一路走来，自己始终缺乏主见与自信，每当周边的人鸡汤一撒，立马觉得，哇，这位大佬说的有道理，然后被人牵着鼻子一直走。高中生活就不提太多了，大家都是在高考的指挥棒下走过来的，相信高中是怎么一回事的清楚得很，成绩平平的我当时就读于本地现成的一所普通中学，和绝大多数同学一样，过完了普普通通的三年，你还别说，我们这普通高中管得还挺严，我可以说是老老实实地度过了高中三年，作为一个听话的好学生．．．当然是天天努力学习哈，老师说了，你现在混混日子，到时候就是人家去浙大，你去浙中大，哈哈哈。高二文理分科，尽管我高一文科学得比理科好多了，但还是毫不犹豫地选择了读理科，然后就是两年被学霸血虐的日子了，为什么选理科，大家都说了，理科好选专业呀，理科方便找工作呀．．高三一年埋头于题海，虽然成绩平平，但还是付出了不少的努力。 高考结束后，查了成绩，语文竟然没及格，想想估计选择题没对几个吧，不过这都是过去式了。接着得开始选学校，选专业了吧。这时，又到了七大姑八大姨发挥作用的时候了，亲戚们一个个热心的为我出谋划策，学医吧，现在医生挺吃香，年纪大了，更是经验丰富；读师范吧，当老师多稳定，一年还有寒暑假；当时没想太多，一看自己这分数，怕是连杭师范，浙中大都没啥希望，但还是报了，记得浙中大这一栏，前面几个全是医学类药学类的，最后面加了个计算机还是医信，结果就来了浙中大的计算机专业，也算是被调剂来了吧。当时得到通知，家里人一看，一脸蒙蔽，在中医药学计算机？不是在逗我吧，中医药还有这专业？后面老姐无奈的说，计算机也还行吧，这几年互联网还蛮火，程序员工资也还不错，认真学就是了。进入学校，得知学校目标就是培养软件开发人员，听老师的，努力刷题敲代码才是王道呀，然后就走上了刷题的不归路，然而惭愧的表示，自己到现在也没敲多少代码．．不知道为什么，我总是充满焦虑，和老朋友聊天，人家就觉得我考虑的也太长远了，活好当下难道不是更重要吗？平时听多了房子，车子，甚至于学校里的老师也时不时与你感叹现实不易，言外之意，你现在不努力学习，毕业了那什么去找工作，找不到工作拿什么买房买车娶媳妇．．．现在不努力学习，怎么赚大钱，当大官．．呵呵，读大学的意义就只有这样了吗，混得好不好，就看钱多钱少？官大官小？为什么参加竞赛？为了拿奖呗？为什么要拿奖？为了保研呀，为了找份好工作呀！为什么要读研？为了以后找份更好的工作呀！为什么想找份更好的工作？希望自己经济独立，不为生活所迫！这一切看起来是这么自然，这么理所当然。功利心貌似也无可厚非，但这是我想要的吗？能不能让其在我的脑海中淡化点呢，能不能在我看电影的时候，想着的是剧情如何如何精彩；能不能在我看小说的时候，想着的是这个人物多么多么丰富，作者构思多么多么独特；能不能在我听音乐的时候，想着的是旋律多么多么动听，歌词多么多么感人。而不是动不动来一句，你做这些有什么用呢？很多事情难道一定得有用才值得去做吗？尊重差异化是我的原则之一，有的人并不适合当学霸，你别跟我提什么励志鸡汤，很多事情不是努力就能改变的。大学尽管已是一个小社会了，但能不能多保留点纯粹？当热爱运动的在球场上挥洒汗水，热爱阅读的沉浸在图书馆中，痴迷科研的废寝于实验室，热爱音乐的与吉他为伴，热爱美术的与画笔为伴，这时，身边能不能少点这样的声音，整天干这些有用吗？能赚到钱吗？能养你女朋友吗？当然了，也许是不能。对很多人来说，干一辈子还抵不上拆迁户一次拿的钱，《百年孤独》作者马尔克斯，早期创作时一直租着房子，而且付不起租金，当拿到了诺贝尔奖金时，他找到了房东，付给他欠下的房租，然而这个房东拒绝了。生活离不开物质，但不应被物质所绑架，希望见到老同学，他还会敞开心怀与我交谈，最重要最开心的是，我们还是当年的我们，只是长大了一点。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模式匹配]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[BF算法1、 BF算法是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符与模式串P的第一个字符进行匹配，若相等，则继续比较S的第二个字符和P的第二个字符；若不相等，则比较S的第二个字符和P的第一个字符，其实相当于将整个模式串往后移了一位，依次比较下去，直到得出最后的匹配结果。1234567891011121314151617181920212223242526int BF_Find(string&amp; s,string&amp; t) &#123; int i=0,j=0,count=0;//初始化 while(i&lt;s.size()) //未比较到串尾 &#123; if(s.at(i)==t.at(j)) //继续比较后续字符 &#123; i++; j++; count++;&#125; else //指针后退重新匹配 &#123; i=i-j+1; j=0; count=0; &#125; if(count==t.size()) &#123; cout&lt;&lt;"BF算法模式匹配成功,起始位置是:"&lt;&lt;i-count+1&lt;&lt;endl; return (i-count+1); &#125; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; KMP算法2、KMP算法与BF算法的区别就在于KMP算法巧妙的消除了指针i的回溯问题，只需确定下次匹配j的位置即可，使得问题的复杂度由O(mn)下降到O(m+n)。 在KMP算法中，为了确定在匹配不成功时，下次匹配时j的位置，引入了next[]数组，next[j]的值表示P[1…j-1]中最长的后缀等于相同字符序列的前缀的长度。 对于next[]数组的定义如下： （1) next[j] = 0（ j = 1）（t1与Si比较不相等时，下一步进行t1与Si+1的比较） （2) next[j] = max(k)（1&lt;k&lt;j且 P[1…k-1]=P[j-k+1,j-1]） {设next[j]=k;(1&lt;k&lt;j) 若tk=tj 则next[j+1]=k+1;即next[j+1]=next[j]+1; 若tk!=tj 则next[j+1]=next[k]+1; } （3) next[j] = 1 (k=1)(不存在相同子串，下一步进行t1与si的比较) 因此KMP算法的思想就是：在匹配过程称，若发生不匹配的情况，则目标串的指针i不变，将模式串的指针j移动到next[j]的位置继续进行匹配；当指针j退至0时，指针i和指针j需同时增加1。也就是说，当发生不匹配的情况，让模式串继续往后移，而移动的位数就是模式串的长度-部分匹配值（最长相同前后缀的长度），因为BF里面每次指针i回溯，会导致符合匹配的字符再一次匹配，增大了时间开销。 求next数组是难点，一般有递推法（用一个while循环）和直接法两种。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt; using namespace std; int BF_Find(string&amp; s,string&amp; t) &#123; int i=0,j=0,count=0;//初始化 while(i&lt;s.size()) //未比较到串尾 &#123; if(s.at(i)==t.at(j)) //继续比较后续字符 &#123; i++; j++; count++;&#125; else //指针后退重新匹配 &#123; i=i-j+1; j=0; count=0; &#125; if(count==t.size()) &#123; cout&lt;&lt;"BF算法模式匹配成功,起始位置是:"&lt;&lt;i-count+1&lt;&lt;endl; return (i-count+1); &#125; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; void GetNext(string&amp; s,int *next) &#123; int len = s.size(); next[0] = 0; next[1] = 0; int i = 1; while(i &lt; len - 1) &#123; int j = next[i]; while(j &gt; 0 &amp;&amp; s.at(j) != s.at(i)) j = next[j]; if(s.at(j) == s.at(i)) next[i + 1] = j + 1;//根据next的定义推导出公式 else next[i + 1] = j; i++; &#125; &#125; void Getnextval(string &amp; s,int *next) &#123; int i=1; next[1]=0; int j=0; int len=s.size(); while(i&lt;len)&#123; if(j==0||s.at(i)==s.at(j))&#123; ++i;++j; if (s.at(i)!=s.at(j)) next[i]=j; else next[i]=next[j]; &#125; else j=next[j]; &#125; &#125; int KMP_Find(string&amp; s,string&amp;t) &#123; int i=0,j=0; int n =t.size(); int *next = new int[n]; GetNext(t,next); while(i&lt;s.size()&amp;&amp;j&lt;t.size()) //两个串均未比较到串尾 &#123; if((j == 0)||(s.at(i)==t.at(j))) //继续比较后续字符 &#123; i++; j++; &#125; else &#123; j = next[j];//模式串后移 &#125; &#125; if(j==t.size()) &#123; int index=i-t.size()+1; cout&lt;&lt;"KMP算法：子串从长串的第"&lt;&lt;index&lt;&lt;"位开始匹配成功!"&lt;&lt;endl; return index; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; int main() &#123; string str1,str2; cout&lt;&lt;"请输入主串:"&lt;&lt;endl; cin&gt;&gt;str1; cout&lt;&lt;"请输入子串:"&lt;&lt;endl; cin&gt;&gt;str2; KMP_Find(str1,str2); BF_Find(str1,str2); return 0; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[My movie list of 2017]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2FMy-movie-list-of-2017%2F</url>
    <content type="text"><![CDATA[《肖申克的救赎》 《海边的曼彻斯特》 《梦与狂想的王国》 《辛德勒的名单》 《至爱梵高》 《熔炉》 《窃听风暴》 《美丽心灵》 《v字仇杀队》 《忠犬八公的故事》 《春光乍泄》 《钢琴家》 《阿甘正传》 《霸王别姬》 《沉默的羔羊系列》 《蝴蝶效应系列》 《杀人游戏》 《海洋》 《千钧一发》 《源代码》 《超脱》 《猫鼠游戏》 《心迷宫》 《寻梦环游记》 《猫妖记》 《芳华》 《奇幻森林》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[八大排序]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[插入排序（直接插入排序、希尔排序） 交换排序（冒泡排序、快速排序） 选择排序（直接选择排序、堆排序） 归并排序 分配排序（基数排序）所需辅助空间最多：归并排序所需辅助空间最少：堆排序平均速度最快：快速排序不稳定：快速排序、希尔排序、堆排序直接插入排序基本思想：在要排序的一组数中，假设前面（n-1）个数已经有序，现在要把第n个数插到前面的有序数中，使得这n个数也是有序的。如此反复循环，知道全部有序。12345678910111213141516171819import java.util.*;public class InsertSort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp = 0; for(int i=1;i&lt;a.length;i++)&#123; int j=i-1; temp=a[i]; for(;j&gt;=0&amp;&amp;temp&lt;a[j];j--)&#123; a[j+1]=a[j];//将大于temp的值整体后移一位 &#125; a[j+1]=temp; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 希尔排序（最小增量排序）基本思想：先将要排序的一组数按某个增量d分成若干组，每组中记录的下标相差d。对每组中全部元素进行直接插入排序，然后再用一个较小的增量对它进行分组，在每组中再进行直接插入排序。当增量减到1，进行直接插入排序后，排序完成。123456789101112131415161718192021222324252627282930import java.util.*;public class ShellFort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp = 0; double d1=a.length; while(true)&#123; d1=Math.ceil(d1/2); int d = (int) d1; for(int x=0;x&lt;d;x++)&#123; for(int i=x+d;i&lt;a.length;i+=d)&#123; int j=i-d; temp=a[i]; for(;j&gt;=0&amp;&amp;temp&lt;a[j];j-=d)&#123; a[j+d]=a[j]; &#125; a[j+d]=temp; &#125; &#125; if(d==1)&#123; break; &#125; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 简单选择排序基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止123456789101112131415161718192021222324import java.util.*;public class SelectSort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int position=0; for(int i=0;i&lt;a.length;i++)&#123; int j=i+1; position=i; int temp=a[i]; for(;j&lt;a.length;j++)&#123; if(a[j]&lt;temp)&#123; temp=a[j]; position=j; &#125; &#125; a[position]=a[i]; a[i]=temp; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 堆排序基本思想：堆排序是一种树形选择排序，是对直接选择排序的优化。堆的定义：具有n个元素的序列（h1,h2…hn）,当且仅当满足(hi&gt;=h2i,hi&gt;=2i+1)或(hi&lt;=h2i,hi&lt;=2i+1)(i=1,2,….,n/2)时称为堆。堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。堆排序需要两个过程 建堆 堆顶与堆的最后一个元素交换位置这就对应了堆排序的两个函数 建堆 交换，从堆中踢出最大数 剩余结点再建堆，再交换踢出最大数 以此类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.*;public class Test &#123; private static void swap(int[] data,int i,int j)&#123; int tmp=data[i]; data[i]=data[j]; data[j]=tmp; &#125; private static void buildMaxHeap(int[] data,int lastIndex)&#123; for(int i=(lastIndex-1)/2;i&gt;=0;i--)&#123; int k=i; while(k*2+1&lt;=lastIndex)&#123; int biggerIndex=2*k+1; if(biggerIndex&lt;lastIndex)&#123; if(data[biggerIndex]&lt;data[biggerIndex+1])&#123; biggerIndex++; &#125; &#125; if(data[k]&lt;data[biggerIndex])&#123; swap(data,k,biggerIndex); k=biggerIndex; &#125; else&#123; break; &#125; &#125; &#125; &#125; public static void heapSort(int[] a)&#123; System.out.println("开始排序"); int arrayLength=a.length; for(int i=0;i&lt;arrayLength-1;i++)&#123; buildMaxHeap(a,arrayLength-1-i); swap(a,0,arrayLength-1-i); System.out.println(Arrays.toString(a)); &#125; &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; heapSort(a); &#125;&#125; 冒泡排序基本思想：在要排序的一组数中。对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。12345678910111213141516171819import java.util.*;public class BubbleSort &#123; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp=0; for(int i=0;i&lt;a.length-1;i++)&#123; for(int j=0;j&lt;a.length-1-i;j++)&#123; if(a[j]&gt;a[j+1])&#123; temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; &#125; &#125; &#125;for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]);&#125; &#125;&#125; 快速排序基本思想：选择一个基准元素，通常选择第一个元素或者最后一个元素，通过一趟扫描，将待排序序列分成两部分，一部分比基准元素小，一部分大于等于基准元素，此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。12345678910111213141516171819202122232425262728293031323334353637383940import java.util.*;public class Test &#123; public static int getMiddle(int[] list,int low,int high)&#123; int tmp=list[low]; while(low&lt;high)&#123; while(low&lt;high&amp;&amp;list[high]&gt;=tmp)&#123; high--; &#125; list[low]=list[high]; while(low&lt;high&amp;&amp;list[low]&lt;=tmp)&#123; low++; &#125; list[high]=list[low]; &#125; list[low]=tmp; return low; &#125; public static void quickSort(int[] list, int low,int high)&#123; if(low&lt;high)&#123; int middle=getMiddle(list, low, high); quickSort(list,low,middle-1); quickSort(list,middle+1,high); &#125; &#125; public static void quick(int[] a2)&#123; if(a2.length&gt;0)&#123; quickSort(a2,0,a2.length-1);; &#125; &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; quick(a); for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 归并排序基本思想：归并排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后把子序列合并成整体有序序列。1234567891011121314151617181920212223242526272829303132333435363738394041import java.util.*;public class Test &#123; public static void sort(int[] data,int left,int right)&#123; if(left&lt;right)&#123; int center=(left+right)/2; sort(data,left,center); sort(data, center+1, right); merge(data,left,center,right); &#125; &#125; public static void merge(int[] data,int left,int center,int right)&#123; int [] tmpArr=new int[data.length]; int mid=center+1; int third=left; int tmp=left; while(left&lt;=center&amp;&amp;mid&lt;=right)&#123; if(data[left]&lt;=data[mid])&#123; tmpArr[third++]=data[left++]; &#125; else&#123; tmpArr[third++]=data[mid++]; &#125; &#125; while(mid&lt;=right)&#123; tmpArr[third++]=data[mid++]; &#125; while(left&lt;=center)&#123; tmpArr[third++]=data[left++]; &#125; while(tmp&lt;=right)&#123; data[tmp]=tmpArr[tmp++]; &#125; System.out.println(Arrays.toString(data)); &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; sort(a,0,a.length-1); for(int i=0;i&lt;a.length;i++) System.out.println(a[i]); &#125;&#125; 基数排序基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.*;public class Test &#123; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; sort(a); for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125;&#125;public static void sort(int[] array)&#123; int max=array[0]; for(int i=1;i&lt;array.length;i++)&#123; if(array[i]&gt;max)&#123; max=array[i]; &#125; &#125; int time=0; while(max&gt;0)&#123; max/=10; time++; &#125; List&lt;ArrayList&gt;queue=new ArrayList&lt;ArrayList&gt;(); for(int i=0;i&lt;10;i++)&#123; ArrayList&lt;Integer&gt;queue1=new ArrayList&lt;Integer&gt;(); queue.add(queue1); &#125; for(int i=0;i&lt;time;i++)&#123; for(int j=0;j&lt;array.length;j++)&#123; int x= array[j]%(int)Math.pow(10, i+1)/(int)Math.pow(10, i); ArrayList&lt;Integer&gt;queue2=queue.get(x); queue2.add(array[j]); queue.set(x,queue2); &#125; int count=0; for(int k=0;k&lt;10;k++)&#123; while(queue.get(k).size()&gt;0)&#123; ArrayList&lt;Integer&gt;queue3=queue.get(k); array[count]=queue3.get(0); queue3.remove(0); count++; &#125; &#125; &#125;&#125;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛神赋]]></title>
    <url>%2F%E6%91%98%E5%BD%95%2F%E6%B4%9B%E7%A5%9E%E8%B5%8B%2F</url>
    <content type="text"><![CDATA[洛神赋 【作者】曹植 【朝代】魏晋黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰： 余从京域，言归东藩。背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则末察，仰以殊观，睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯？若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王所见，无乃日乎？其状若何？臣愿闻之。” 余告之曰：“其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。仿佛兮若轻云之蔽月，飘摇兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜，明眸善睐，靥辅承权。瑰姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。 于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。壤皓腕于神浒兮，采湍濑之玄芝。余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修，羌习礼而明诗。抗琼［王弟］以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。 于是洛灵感焉，徙倚彷徨，神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。 尔乃众灵杂遢，命俦啸侣，或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神，凌波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。 于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔，鲸鲵踊而夹毂，水禽翔而为卫。 于是越北沚。过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮。哀一逝而异乡。无微情以效爱兮，献江南之明。虽潜处于太阳，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。 于是背下陵高，足往神留，遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵督。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。 备注：赋，是我国古代的一种文体，它讲究文采，韵律，兼具诗歌和散文性质。是以“铺采摛文，体物写志”为手段，侧重于写景，借景抒情。以“颂美”和“讽喻”为目的的一种有韵文体。它多用铺陈叙事的手法，赋必须押韵，这是赋区别于其他文体的一个主要特征。 起于战国，盛于两汉。赋最早出现于诸子散文中，叫”短赋“；以屈原为代表的”骚体“是诗向赋的过渡，叫”骚赋“；汉代正式确立了赋的体例，称为“辞赋”；魏晋以后，赋日益向骈文方向发展，叫做“骈赋”；唐代又由骈体转为律体，叫“律赋”；宋代用散文的形式写赋，称“文赋”。著名的赋体文章有司马相如的《子虚赋》，杜牧的《阿房宫赋》，欧阳修的《秋声赋》，苏轼的《赤壁赋》等。作者曹植以浪漫主义的手法，通过梦幻的境界，描写人神之间的真挚爱情，但终因“人神殊道”无从结合而惆怅分离。]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[长恨歌]]></title>
    <url>%2F%E6%91%98%E5%BD%95%2F%E9%95%BF%E6%81%A8%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[长恨歌 【唐】 白居易 汉皇重色思倾国，御宇多年求不得。 杨家有女初长成，养在深闺人未识。 天生丽质难自弃，一朝选在君王侧。 回眸一笑百媚生，六宫粉黛无颜色。 春寒赐浴华清池，温泉水滑洗凝脂。 侍儿扶起娇无力，始是新承恩泽时。 云鬓花颜金步摇，芙蓉帐暖度春宵。 春宵苦短日高起，从此君王不早朝。 承欢侍宴无闲暇，春从春游夜专夜。 后宫佳丽三千人，三千宠爱在一身。 金屋妆成娇侍夜，玉楼宴罢醉和春。 姊妹弟兄皆列土，可怜光彩生门户。 遂令天下父母心，不重生男重生女。 骊宫高处入青云，仙乐风飘处处闻。 缓歌谩舞凝丝竹，尽日君王看不足。 渔阳鼙鼓动地来，惊破霓裳羽衣曲。 九重城阙烟尘生，千乘万骑西南行。 翠华摇摇行复止，西出都门百余里。 六军不发无奈何，宛转蛾眉马前死。 花钿委地无人收，翠翘金雀玉搔头。 君王掩面救不得，回看血泪相和流。 黄埃散漫风萧索，云栈萦纡登剑阁。 峨嵋山下少人行，旌旗无光日色薄。 蜀江水碧蜀山青，圣主朝朝暮暮情。 行宫见月伤心色，夜雨闻铃肠断声。 天旋地转回龙驭，到此踌躇不能去。 马嵬坡下泥土中，不见玉颜空死处。 君臣相顾尽沾衣，东望都门信马归。 归来池苑皆依旧，太液芙蓉未央柳。 芙蓉如面柳如眉，对此如何不泪垂。 春风桃李花开日，秋雨梧桐叶落时。 西宫南内多秋草，落叶满阶红不扫。 梨园弟子白发新，椒房阿监青娥老。 夕殿萤飞思悄然，孤灯挑尽未成眠。 迟迟钟鼓初长夜，耿耿星河欲曙天。 鸳鸯瓦冷霜华重，翡翠衾寒谁与共。 悠悠生死别经年，魂魄不曾来入梦。 临邛道士鸿都客，能以精诚致魂魄。 为感君王辗转思，遂教方士殷勤觅。 排空驭气奔如电，升天入地求之遍。 上穷碧落下黄泉，两处茫茫皆不见。 忽闻海上有仙山，山在虚无缥渺间。 楼阁玲珑五云起，其中绰约多仙子。 中有一人字太真，雪肤花貌参差是。 金阙西厢叩玉扃，转教小玉报双成。 闻道汉家天子使，九华帐里梦魂惊。 揽衣推枕起徘徊，珠箔银屏迤逦开。 云鬓半偏新睡觉，花冠不整下堂来。 风吹仙袂飘飘举，犹似霓裳羽衣舞。 玉容寂寞泪阑干，梨花一枝春带雨。 含情凝睇谢君王，一别音容两渺茫。 昭阳殿里恩爱绝，蓬莱宫中日月长。 回头下望人寰处，不见长安见尘雾。 惟将旧物表深情，钿合金钗寄将去。 钗留一股合一扇，钗擘黄金合分钿。 但教心似金钿坚，天上人间会相见。 临别殷勤重寄词，词中有誓两心知。 七月七日长生殿，夜半无人私语时。 在天愿作比翼鸟，在地愿为连理枝。 天长地久有时尽，此恨绵绵无绝期。]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好了歌]]></title>
    <url>%2F%E6%91%98%E5%BD%95%2F%E5%A5%BD%E4%BA%86%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[红楼梦原文甄士隐知投人不著，心中未免悔恨，再兼上年惊唬，急忿怨痛已伤，暮年之人，贫病交攻，竟渐渐的露出那下世的光景来。可巧这日拄了拐杖挣到街前散散心时，忽见那边来了一个跛足道人，疯癫落拓，麻鞋鹑衣，口内念着几句言词道： 世人都晓神仙好，惟有功名忘不了！古今将相在何方？荒冢一堆草没了。世人都晓神仙好，只有金银忘不了！终朝只恨聚无多，及到多时眼闭了。世人都晓神仙好，只有娇妻忘不了！君生日日说恩情，君死又随人去了。世人都晓神仙好，只有儿孙忘不了！痴心父母古来多，孝顺儿孙谁见了？士隐听了，便迎上来道：“你满口说些甚么？只听见些‘好了’‘好了’。”那道人笑道：“你若果听见‘好了’二字，还算你明白。可知世上万般，好便是了，了便是好。若不了，便不好；若要好，须是了。我这歌儿便名《好了歌》。”士隐本是有夙慧的，一闻此言，心中早已彻悟，因笑道：“且住！待我将你这《好了歌》注解出来何如？”道人笑道：“你就请解。”士隐乃说道：陋室空堂，当年笏满床。衰草枯杨，曾为歌舞场。蛛丝儿结满雕梁，绿纱今又糊在蓬窗上。说甚么脂正浓、粉正香，如何两鬓又成霜？昨日黄土陇头送白骨，今宵红灯帐底卧鸳鸯。金满箱，银满箱，展眼乞丐人皆谤。正叹他人命不长，那知自己归来丧！训有方，保不定日后作强梁。择膏粱，谁承望流落在烟花巷！因嫌纱帽小，致使锁枷杠，昨怜破袄寒，今嫌紫蟒长。乱烘烘你方唱罢我登场，反认他乡是故乡。甚荒唐，到头来都是为他人作嫁衣裳。]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[归并排序]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[归并排序 最基本的2-路归并排序。 原理：将序列两两分组，将序列归并为[n/2]个组，组内单独排序；然后将这些组再两两归并， 生成[n/4]个组，组内在单独排序；以此内推，直到只剩下一个组为止。 时间复杂度为O(nlogn)例：将序列{66,12,33,57,64,27,18}进行2路归并排序 第一趟 { { 12,66 },{ 33,57 },{ 27,64 },{ 18 } } 第二题 { { 12,33,57,66 },{ 18,27,64 } } 第三趟{12,18,27,33,57,64,66} 递归实现 1234567891011121314151617181920212223242526const int maxn=100;void merge(int a[],int l1,int r1,int l2,int r2)&#123; int i=l1,j=l2; int temp[maxn],index=0;//temp临时存放合并后的数组，index为其下标 while(i&lt;=r1&amp;&amp;j&lt;=r2)&#123; if(a[i]&lt;=a[j])&#123; temp[index++]=a[i++]; &#125; else&#123; temp[index++]=a[j++]; &#125; &#125; while(i&lt;=r1) temp[index++]=a[i++]; while(j&lt;=r2) temp[index++]=a[j++]; for(i=0;i&lt;index;i++)&#123; a[l1+i]=temp[i]; &#125;&#125;void mergeSort(int a[],int left,int right)&#123; if(left&lt;right)&#123; int mid=(left+right)/2; mergeSort(a,left,mid); //左子区间归并排序 mergeSort(a,mid+1,right);//右子区间归并排序 merge(a,left,mid,mid+1,right); 将左右子区间合并 &#125;&#125; 非递归实现 12345678910void mergeSort(int a[])&#123; for(int step=2;step/2&lt;=n;step*=2)&#123; for(int i=1;i&lt;=n;i+=step)&#123; int mid=i+step/2-1; if(mid+1&lt;=n)&#123; //sort(a+i,a+min(i+step,n+1)); merge(a,i,mid,mid+1,min(i+step-1,n)) &#125; &#125; &#125; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[区间贪心]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83%2F</url>
    <content type="text"><![CDATA[贪心 贪心是用来解决一类最优化问题，并希望由局部最优策略来推得全局最优结果的算法思想。 贪心算法使用的问题一定满足最优子结构性质，即一个问题的最优解可以由它的子问题的最优解有效地构造出来。 区间不相交问题： 给出n个开区间(x,y),从中选择尽可能多的区间，使得这些开区间两两没有交集。 首先考虑最简单的情况，即开区间I1被开区间I2包含，那么I1显然是最好的选择，因为这样就有更大的空间去容纳其他区间。 之后将所有开区间按左端点x从大到小排序，总是先选择左端点最大的区间。当然也可以考虑选择右端点最小的区间。123456789101112131415161718192021222324252627282930#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=110;struct Inteval&#123; int x,y;&#125;q[maxn];bool cmp(Inteval a,Inteval b)&#123; if(a.x!=b.x) return a.x&gt;b.x; else return a.y&lt;b.y;&#125;int main()&#123; int n; while(scanf("%d",&amp;n),n!=0)&#123; for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;q[i].x,&amp;q[i].y); &#125; sort(q,q+n,cmp); int ans = 1,lastx = q[0].x; for(int i=1;i&lt;n;i++)&#123; if(q[i].y&lt;=lastx)&#123; lastx=q[i].x; ans++; &#125; &#125; printf("%d\n",ans); &#125; return 0;&#125; 区间选点问题： 给出n个闭区间[x,y],求最少需要确定多少个点，才能使每个闭区间中都至少存在一个点。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ZCMU2034]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FZCMU-2034%2F</url>
    <content type="text"><![CDATA[阶乘计算Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 43 Solved: 34[Submit][Status][Web Board]Description输入一个正整数n，输出n!的值。其中n!=1 2 3 …n。算法描述n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。 Input 输入包含一个正整数n，n&lt;=1000。 Output 输出n!的准确值。 Sample Input10Sample Output3628800HINTSource基础练习 相当于是大数的阶乘，也就是基本类型存不下，需要用数组来进行模拟。123456789101112131415161718192021222324252627#include&lt;stdio.h&gt; #include&lt;string.h&gt; int main() &#123; int a[3000],i,j,n; int c=0,s; memset(a,0,sizeof(a)); scanf("%d",&amp;n); a[0]=1; for(i=2;i&lt;=n;i++) &#123; for(j=0;j&lt;3000;j++) &#123; s=a[j]*i+c; a[j]=s%10; c=s/10;//保留进位 &#125; &#125; for(i=2999;i&gt;=0;i--) if(a[i]) break; for(j=i;j&gt;=0;j--) &#123; printf("%d",a[j]); &#125; return 0; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZCMU-1620]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FZCMU-1620%2F</url>
    <content type="text"><![CDATA[1620: 全排列Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 198 Solved: 89[Submit][Status][Web Board]Description给定n个数 a[0] , a[1] …….. a[n-1], 输出其全排列。 Input第一行输入一个数n，（n&lt;7） 接下来一行输入n个数。 Output按字典序从小到大输出全排列 Sample Input31 2 331 2 2Sample Output1 2 31 3 22 1 32 3 13 1 23 2 11 2 22 1 22 2 1HINT 全排列，枚举排列常用的方法有两种：一种是递归枚举，另一种是用STL中的next_permutation 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;void print_permutation(int n,int *p,int *a,int cur)&#123; if(cur==n) &#123; for(int i=0;i&lt;n-1;i++) &#123; printf("%d ",a[i]); &#125; printf("%d\n",a[n-1]); &#125; else for(int i=0;i&lt;n;i++) if(!i||p[i]!=p[i-1]) &#123; int ok=1; int c1=0,c2=0; for(int j=0;j&lt;cur;j++)if(a[j]==p[i]) c1++; for(int j=0;j&lt;n;j++) if(p[i]==p[j]) c2++; if(c1&lt;c2)&#123; a[cur]=p[i]; print_permutation(n,p,a,cur+1); &#125; &#125;&#125;int main()&#123; int n,p[10],a[1000]; while(~scanf("%d",&amp;n)) &#123; memset(a,0,sizeof(a)); for(int i=0;i&lt;n;i++) &#123; scanf("%d",&amp;p[i]); &#125; sort(p,p+n); print_permutation(n,p,a,0); &#125; return 0;&#125; 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,a[10]; while(cin&gt;&gt;n) &#123; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n); do &#123; for(int i=0;i&lt;n-1;i++) printf("%d ",a[i]); printf("%d\n",a[n-1]); &#125;while(next_permutation(a,a+n)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《控方证人》观后感]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E3%80%8A%E6%8E%A7%E6%96%B9%E8%AF%81%E4%BA%BA%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这个周末有点小忙哈哈，没办法，得准备Ｊａｖａ课件呀，好歹也是个愚人节呢，得让自己放松下，于是花了点时间看了部老电影《控方证人》，一部上世纪６０年代的电影，一部黑白片。我一般不大会特意去找某部电影，一些早已被广为认可的经典我会时不时抽几部欣赏欣赏，很少有令我失望过，当然，这次也不例外。 很好的一部剧情片，惊悚我倒没怎么感觉到，但不得不说，一流的演员以及一流的剧本让我佩服不已，至少我是被骗到了，结局在我的意料之外，当然中间确实有些困惑的地方，我很理解为什么沃尔的妻子竟然当起了控方证人。影片开始，个性鲜明的律师威尔弗里德爵士便出现在荧幕上，很有意思的一个家伙，一看到雪茄就耐不住想吸上一口，看似嘴不饶人，其实内心善良热诚。他身边的护士尽管一天到晚啰里啰嗦招人烦，却也是真正为威尔弗里德爵士的健康着想。紧接着，剧情展开，控方与被告的辩论也即将展开。 我为什么说我被骗到了，起初我真的认为沃尔是无辜的，是被冤枉的，富婆的死只是被某个入室抢劫犯误杀了，紧接着，伟大的威尔弗里德爵士作为正义的化身，冒着身体旧病复发的风险为沃尔展开辩护，然后一步步过关斩将，去的胜利，沃尔无罪释放！看，结局多么美好，但细想一番，若真是如此，这剧情片恐怕也难成为经典了。开头的警巡，包括之后的女佣，这两人的证词在我看来都很正常，警巡，按照职业习惯进行了正常的回答。至于女佣，势利的姿态可以说是展现的很充分，哈哈，这世上没有无缘无故的恨，沃尔的出现让本该属于她的遗产瞬间成为一场空，他恨透了沃尔，巴不得看着他上绞刑架．．但后一位控方证人让我难以理解，那就是沃尔的妻子克里斯汀，她的出现让我困惑，我相信威尔弗里德爵士当时也是和我相似的心情。看似恩爱的夫妻有什么理由说反目就反目呢，难道之前的感情本就是虚假的？没看到结尾，我真的没猜到这对夫妻竟然都在演戏，在法庭上演了一出精彩的戏。只不过人人喊打的克里斯汀确是陷入爱情的有心人，而看似无辜的沃尔才是花心大萝卜，才是真凶。法律规定，嫌疑人的妻子是无法为其辩护的，证词无效，于是克里斯汀就想到了该当控告，直到最后决定判决的那几分情书信纸，也不过只是她的计划一部分。好可怕的一个女人，竟然铁定了心犯伪证罪也要救这样一个花心大萝卜，难以理解。两个人一唱一和的一出戏，骗过了整个法庭，我没有想到，沃尔竟然真的杀了富婆，更没想到克里斯汀知道是他杀了富婆还要牺牲自己就他，更没想到两人的感情，谁是真心，谁是假意让我一脸蒙蔽，人生如戏，全靠演技呀！哈哈哈～～]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2017书单]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%88%91%E7%9A%842017%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[1、《平凡的世界》2、《霜冷长河》3、《霍乱时期的爱情》4、《文化苦旅》5、《千年一叹》6、《许三观卖血记》7、《白夜行》8、《嫌疑人X的献身》9、《解忧杂货店》10、《资治通鉴》11、《活着》12、《三体》13、《百年孤独》14、《活着为了讲述》15、《人生》16、《偷影子的人》17、《黄金时代》18、《无声告白》19、《小王子》20、《夜莺与玫瑰》21、《飘》22、《海边的卡夫卡》23、《东方快车上的谋杀案》24、《挪威的森林》25、《雪国》26、《不能承受的生命之轻》27、《恶意》28、《陶庵梦忆》29、《红楼梦》30、《沉默的大多数》31、《少年维特的烦恼》32、《傲慢与偏见》33、《麦田里的守望者》34、《北岛诗集》35、《顾城诗集》36、《海子诗集》37、《余光中散文诗集》38、《鳄鱼街》39、《自由在高处》40、《愿你与这世界温暖相拥》41、《很高兴见到你》42、《无证之罪》43、《白马山庄杀人事件》44、《浮士德》45、《老人与海》46、《北鸢》47、《菜根谭》48、《单恋》49、《鬼谷子》50、《人类群星闪耀时》51、《人间词话》52、《古文观止》53、《假面饭店》54、《幻夜》55、《看见》56、《撒哈拉的故事》57、《月亮和六便士》58、《漫漫自由路》59、《1984》60、《1980年代的爱情》61、《本草纲目》62、《傅雷家书》63、《我们三》64、《围城》65、《钱钟书传》66、《草房子》67、《我的职业是小说家》68、《爱你就像爱生命》69、《这些人那些事》70、《明朝那些事》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++字符串操作]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2FC%2B%2B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1）字符串操作strcpy(p, p1) 复制字符串strncpy(p, p1, n) 复制指定长度字符串strcat(p, p1) 附加字符串strncat(p, p1, n) 附加指定长度字符串strlen(p) 取字符串长度strcmp(p, p1) 比较字符串strcasecmp忽略大小写比较字符串strncmp(p, p1, n) 比较指定长度字符串strchr(p, c) 在字符串中查找指定字符strrchr(p, c) 在字符串中反向查找strstr(p, p1) 查找字符串strpbrk(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找该集合的任一元素strspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找不属于该集合的任一元素的偏移strcspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找属于该集合的任一元素的偏移 具有指定长度的字符串处理函数在已处理的字符串之后填补零结尾符 2）字符串到数值类型的转换strtod(p, ppend) 从字符串 p 中转换 double 类型数值，并将后续的字符串指针存储到 ppend 指向的 char* 类型存储。strtol(p, ppend, base) 从字符串 p 中转换 long 类型整型数值，base 显式设置转换的整型进制，设置为 0 以根据特定格式判断所用进制，0x, 0X 前缀以解释为十六进制格式整型，0 前缀以解释为八进制格式整型atoi(p) 字符串转换到 int 整型atof(p) 字符串转换到 double 符点数atol(p) 字符串转换到 long 整型 12345678910111213141516void *memset(void *dest, int c, size_t count); 将dest前面count个字符置为字符c. 返回dest的值. void *memmove(void *dest, const void *src, size_t count); 从src复制count字节的字符到dest. 如果src和dest出现重叠, 函数会自动处理. 返回dest的值. void *memcpy(void *dest, const void *src, size_t count); 从src复制count字节的字符到dest. 与memmove功能一样, 只是不能处理src和dest出现重叠. 返回dest的值. void *memchr(const void *buf, int c, size_t count); 在buf前面count字节中查找首次出现字符c的位置. 找到了字符c或者已经搜寻了count个字节, 查找即停止. 操作成功则返回buf中首次出现c的位置指针, 否则返回NULL. void *_memccpy(void *dest, const void *src, int c, size_t count); 从src复制0个或多个字节的字符到dest. 当字符c被复制或者count个字符被复制时, 复制停止. 如果字符c被复制, 函数返回这个字符后面紧挨一个字符位置的指针. 否则返回NULL. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/*实现strcpy函数,将源串strSrc的内容复制到目标串strDest，返回值为指向目标串的指针*/char *strcpy(char *strDest,const char *strSrc)//源字符串+const，表明其为输入参数&#123; assert((strDest!=NULL&amp;&amp;(strSrc!=NULL))); //对源地址和目的地址加非0判断 char *address=strDest; while((*strDest++=*strSrc++)!='\0'); return address;&#125;/*实现strcat函数：将源串添加到str1的末尾，同时覆盖旧串末尾的'\0',在新串末尾+'\0',返回指向str1的指针。*/char *strcat(char *str1,char *str2)&#123; char *p=str1; assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(*str1!='\0') str1++; while(*str1++=*str2++); return p;&#125;/*strcmp函数：比较str1和str2两个字符串的大小，若str1&gt;str2，则返回正数；若str1&lt;str2，则返回负数；若str1==str2，则返回0。*/int strcmp(const char *str1,const char *str2)&#123; assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(*str1&amp;&amp;*str2&amp;&amp;(*str1==*str2)) &#123; str1++; str2++; &#125; return *str1-*str2;&#125;void memset(void *s,int c,size_t n) //将已开辟内存空间s的首n个字节的值设为c&#123; assert(s!=NULL); char *tmp=(char *)s; while(n--) &#123; *tmp++=(char)c; &#125; return s;&#125;void memcpy(void *dest,const void *src,size_t n)//从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中&#123; assert(dest!=NULL&amp;&amp;src!=NULL); char *tmpdest=(char *)dest; char *tmpsrc=(char *)src; while(n-- &gt;0) *tmpdest++=*tmpsrc++; return dest;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016电影]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%88%91%E7%9A%842016%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[1、《马力和马克思》2、《怦然心动》3、《天堂电影院》4、《海上钢琴师》5、《教父系列》6、《控方证人》7、《千与千寻》8、《从你的全世界路过》9、《战狼2》10、《金刚狼3》11、《大话西游系列》12、《鬼子来了》13、《让子弹飞》14、《天才枪手》15、《比利比恩的中场战事》16、《麦兜的故事》17、《美国丽人》18、《泰坦尼克号》19、《阿飞正传》20、《x森林系列》21、《辩护人》22、《记忆碎片》23、《哈尔的移动城堡》24、《烈日灼心》25、《一条狗的使命》26、《致命魔术》27、《星际穿越》28、《驯龙高手》29、《幸福终点站》30、《时空恋旅人》31、《致命ID》32、《你的名字》33、《幽灵公主》34、《盗梦空间》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>影视</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016书单]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%88%91%E7%9A%842016%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[你好,这是我的2016书单。1、《一句顶一万句》2、《寻路中国》3、《人类简史》4、《一只特立独行的猪》5、《三国演义》6、《世说新语》7、《战国策》8、《春风沉醉的夜晚》9、《水浒传》10、《茶花女》11、《天黑以后》12、《悟空传》13、《苦妓回忆录》14、《不属于我们的世纪》15、《身份的焦虑》16、《追忆似水年华》17、《约翰克里斯多夫》18、《无名的裘德》19、《高老头》20、《浮生六记》21、《二手时间》22、《洗澡》23、《爱情和其他魔鬼》24、《芳华》25、《冰与火之歌》26、《远山淡影》27、《目送》28、《自深深处》29、《巨人的陨落》30、《余华短篇集》31、《基督山伯爵》32、《三个火枪手》33、《和喜欢的一切在一起》34、《弗兰克尔自传》35、《重新认识你自己》36、《二十四史》37、《长恨歌》38、《面包树上的女人》39、《追随你的心》40、《不能不去爱的两件事》41、《在这复杂世界里》42、《坏小孩》43、《季羡林私人史》44、《金瓶梅》45、《孤独六讲》46、《我们生活在巨大的差距里》47、《分身》48、《宿命》49、《快乐是在心里》50、《我的精神家园》51、《万历十五年》52、《撒切尔夫人传》53、《飞鸟集》54、《幻灭》55、《当我跑步时我谈些什么》56、《富爸爸、穷爸爸》57、《雅舍小品》58、《一个女子恋爱的时候》59、《从一到无穷大》60、《虚无的十字架》61、《资本论》62、《白说》63、《在细雨中呼喊》]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[满江红]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%BB%A1%E6%B1%9F%E7%BA%A2%2F</url>
    <content type="text"><![CDATA[满江红–岳飞 怒发冲冠， 凭栏处，潇潇雨歇。 抬望眼， 仰天长啸， 壮怀激烈。 三十功名尘与土， 八千里路云和月。 某等闲，白了少年头， 空悲切， 靖康耻， 犹未雪。 臣子恨， 何时灭！ 驾长车， 踏破贺兰山缺。 壮志饥餐胡虏肉， 笑谈渴饮匈奴血。 待从头，收拾旧山河， 朝天阙。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
</search>
