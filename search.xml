<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ArrayList源码阅读]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FArrayList%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%2F</url>
    <content type="text"><![CDATA[ArrayList源码阅读（基于jdk1.8）我们先来看看类的定义：12public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable 用的都是Java泛型，继承了AbstractList类，实现了List、RandomAccess、Cloneable、Serializable接口，大致可以了解到了ArrayList是个列表，可以实现克隆，序列化，随机访问，RandomAccess相当于一个随机访问的标志。12private static final int DEFAULT_CAPACITY = 10;private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;; ArrayList默认初始容量为10，另外我们知道HashMap的默认初始容量为16，而普通的数组是没有默认初始大小的。底层数据结构就是一个object数组我们也可以自定义初始容量：1234567891011121314151617181920212223242526272829public ArrayList(int initialCapacity) &#123; //新建object数组时判断下初始容量的参数是否大于0，若果等于0，则依旧为空数组，如果小于0，那么抛出非法异常 if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity); &#125; &#125;/** * 使用默认值10构建一个空的List */ public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; &#125; //我们也可以构建一个包含collection的ArrayListpublic ArrayList(Collection&lt;? extends E&gt; c) &#123; elementData = c.toArray(); if ((size = elementData.length) != 0) &#123; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); &#125; else &#123; // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; &#125; &#125; ArrayList的扩容我们常说ArrayList就是一个动态数组，是因为它实现了动态扩容的机制。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * 如果有必要，增加ArrayList实例的容量以确保它至少能够容纳元素的数量 * @param minCapacity 所需的最少容量 */ public void ensureCapacity(int minCapacity) &#123; int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) // any size if not default element table ? 0 // larger than default for default empty table. It's already // supposed to be at default size. : DEFAULT_CAPACITY; if (minCapacity &gt; minExpand) &#123; ensureExplicitCapacity(minCapacity); &#125; &#125;//计算最小的扩容量 private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; //返回默认容量和输入最小容量的较大值 return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity; &#125;//判断是否需要扩容 private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); &#125; private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) //进行扩容 grow(minCapacity); &#125; /** * 要分配的最大数组大小 */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; /** * * ArrayList扩容核心方法 * @param minCapacity 所需的最小容量 */ private void grow(int minCapacity) &#123; // oldCapacity存放旧的容量，newCapacity存放新容量 int oldCapacity = elementData.length; //计算新容量，用到了位运算，相当于newCapacity=1.5倍的oldCapacity int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); //检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量 if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; /* 如果新容量大于数组定义的最大容量，那么调用 hugeCapacity(minCapacity)来比较minCapacity和 MAX_ARRAY_SIZE 如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。 */ if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: //最后要调用Arrays.copyOf将原数组整个复制到新数组里，这一操作性能开销较大 elementData = Arrays.copyOf(elementData, newCapacity); &#125; private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; &#125; System.arraycopy()和Arrays.copyOf()方法 arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置，arraycopy由本地方法C语言具体实现 1234public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); copyOf()是系统自动在内部新建一个数组，并返回该数组。我们可以发现copyOf()其实还是调用了arraycopy进行实现123456789public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) &#123; @SuppressWarnings("unchecked") T[] copy = ((Object)newType == (Object)Object[].class) ? (T[]) new Object[newLength] : (T[]) Array.newInstance(newType.getComponentType(), newLength); System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength)); return copy; &#125; Fail-FastmodCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。 在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 ConcurrentModificationException。 java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改） 相对应的自然还有Fail-Safe安全失败 采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。 java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。 和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。 ArrayList的遍历12345678910111213141516171819202122232425262728293031323334353637package Collection;import java.util.ArrayList;import java.util.Iterator;import java.util.List;public class TestArrayList &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add("hello"); list.add("World"); list.add("aaaa"); //第一种：for循环遍历 for(String str : list) &#123; System.out.println(str); &#125; //第二种：利用随机访问遍历 for(int i = 0; i &lt; list.size(); i++) &#123; System.out.print(list.get(i)); &#125; String[] strArray = new String[list.size()]; list.toArray(strArray); for(int i = 0; i &lt; strArray.length; i++) &#123; System.out.print(strArray[i]); &#125; //第三种：通过迭代器遍历 Iterator&lt;String&gt; ite = list.iterator(); while(ite.hasNext()) &#123; System.out.print(ite.next()); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999100010011002100310041005100610071008100910101011public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123; private static final long serialVersionUID = 8683452581122892189L; /** * 数组的默认初始容量 */ private static final int DEFAULT_CAPACITY = 10; private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;; private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;//保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。 transient Object[] elementData; // non-private to simplify nested class access /** * ArrayList的大小 (它包含的元素个数). */ private int size; /** * 使用指定容量大小构建一个空的list */ public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity); &#125; &#125; /** * 使用默认值10构建一个空的List */ public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA; &#125; /** * 构造一个包含指定集合的元素的列表，按照它们由集合的迭代器返回的顺序。 */ public ArrayList(Collection&lt;? extends E&gt; c) &#123; elementData = c.toArray(); if ((size = elementData.length) != 0) &#123; // c.toArray might (incorrectly) not return Object[] (see 6260652) if (elementData.getClass() != Object[].class) elementData = Arrays.copyOf(elementData, size, Object[].class); &#125; else &#123; // replace with empty array. this.elementData = EMPTY_ELEMENTDATA; &#125; &#125; /** * 对ArrayList进行大小修建，使之为当前list的大小. * 一个应用可以使用这个操作缩小ArrayList实例所占的存储空间. */ public void trimToSize() &#123; modCount++; if (size &lt; elementData.length) &#123; elementData = (size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size); &#125; &#125; public void ensureCapacity(int minCapacity) &#123; int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) : DEFAULT_CAPACITY; if (minCapacity &gt; minExpand) &#123; ensureExplicitCapacity(minCapacity); &#125; &#125; private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity; &#125; private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)); &#125; private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; // overflow-conscious code if (minCapacity - elementData.length &gt; 0) grow(minCapacity); &#125; private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8; private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); &#125; private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; &#125; /** * 返回list的元素个数 */ public int size() &#123; return size; &#125; /** * 利用size是否为0判断list里面有无元素 */ public boolean isEmpty() &#123; return size == 0; &#125; /** * 利用对象o的下标是否大于等于0判断list里面是否包含某一特定元素 */ public boolean contains(Object o) &#123; return indexOf(o) &gt;= 0; &#125; /** * 返回某个元素在数组中第一次出现时的下标,如果不存在返回-1 */ public int indexOf(Object o) &#123; if (o == null) &#123;//如果o为null先遍历数组是否存在为null的元素 for (int i = 0; i &lt; size; i++) if (elementData[i]==null) return i; &#125; else &#123; for (int i = 0; i &lt; size; i++) if (o.equals(elementData[i])) return i; &#125; return -1; &#125; /** * 返回某个元素在数组中最后一次出现的下标，若不存在，那么返回-1 * 逆序遍历即可 */ public int lastIndexOf(Object o) &#123; if (o == null) &#123; for (int i = size-1; i &gt;= 0; i--) if (elementData[i]==null) return i; &#125; else &#123; for (int i = size-1; i &gt;= 0; i--) if (o.equals(elementData[i])) return i; &#125; return -1; &#125; /** * 返回此ArrayList实例的浅拷贝。 （元素本身不被复制。） */ public Object clone() &#123; try &#123; ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone(); v.elementData = Arrays.copyOf(elementData, size); v.modCount = 0; return v; &#125; catch (CloneNotSupportedException e) &#123; // this shouldn't happen, since we are Cloneable throw new InternalError(e); &#125; &#125; /** * 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素 * 的数组 */ public Object[] toArray() &#123; return Arrays.copyOf(elementData, size); &#125; /** */ @SuppressWarnings("unchecked") public &lt;T&gt; T[] toArray(T[] a) &#123; if (a.length &lt; size) // Make a new array of a's runtime type, but my contents: return (T[]) Arrays.copyOf(elementData, size, a.getClass()); System.arraycopy(elementData, 0, a, 0, size); if (a.length &gt; size) a[size] = null; return a; &#125; // Positional Access Operations @SuppressWarnings("unchecked") E elementData(int index) &#123; return (E) elementData[index]; &#125; /** * 返回此列表中指定位置的元素。 */ public E get(int index) &#123; rangeCheck(index); return elementData(index); &#125; /** * 设置列表中指定索引的元素 */ public E set(int index, E element) &#123; //对index进行界限检查 rangeCheck(index); E oldValue = elementData(index); //用新值替换旧值 elementData[index] = element; return oldValue; &#125; /** * 在列表末位添加指定元素 */ public boolean add(E e) &#123; ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true; &#125; /** * 在此列表中的指定位置插入指定的元素。 *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大； *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。 */ public void add(int index, E element) &#123; rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! //用arraycopy()实现数组复制 System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; &#125; /** * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。 * 需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)，可以看出 ArrayList 删除元素的代价是非常高的。 */ public E remove(int index) &#123; rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if (numMoved &gt; 0) //可以看到在列表特定位置添加元素，删除元素用的都是arraycopy()方法 System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // 末尾元素指向null以便GC工作时回收 return oldValue; &#125; /** *从列表中删除指定元素的第一个出现（如果存在）。 如果列表不包含该元素，则它不会更改。返回true，如果此列表包含指定的元素 */ public boolean remove(Object o) &#123; if (o == null) &#123; for (int index = 0; index &lt; size; index++) if (elementData[index] == null) &#123; fastRemove(index); return true; &#125; &#125; else &#123; for (int index = 0; index &lt; size; index++) if (o.equals(elementData[index])) &#123; fastRemove(index); return true; &#125; &#125; return false; &#125; /* * Private remove method that skips bounds checking and does not * return the value removed. */ private void fastRemove(int index) &#123; modCount++; int numMoved = size - index - 1; if (numMoved &gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--size] = null; // clear to let GC do its work &#125; /** * 移除列表中所有元素 */ public void clear() &#123; modCount++; // clear to let GC do its work for (int i = 0; i &lt; size; i++) elementData[i] = null; size = 0; &#125; /** * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾 */ public boolean addAll(Collection&lt;? extends E&gt; c) &#123; Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount System.arraycopy(a, 0, elementData, size, numNew); size += numNew; return numNew != 0; &#125; /** * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。 */ public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; rangeCheckForAdd(index); Object[] a = c.toArray(); int numNew = a.length; ensureCapacityInternal(size + numNew); // Increments modCount int numMoved = size - index; if (numMoved &gt; 0) System.arraycopy(elementData, index, elementData, index + numNew, numMoved); System.arraycopy(a, 0, elementData, index, numNew); size += numNew; return numNew != 0; &#125; /** * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。 *将任何后续元素移动到左侧（减少其索引）。 */ protected void removeRange(int fromIndex, int toIndex) &#123; modCount++; int numMoved = size - toIndex; System.arraycopy(elementData, toIndex, elementData, fromIndex, numMoved); // clear to let GC do its work int newSize = size - (toIndex-fromIndex); for (int i = newSize; i &lt; size; i++) &#123; elementData[i] = null; &#125; size = newSize; &#125; /** * 检查给定的索引是否在size范围内，不是的话抛出下标越界异常 */ private void rangeCheck(int index) &#123; if (index &gt;= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; /** * add和addAll使用的rangeCheck的一个版本 */ private void rangeCheckForAdd(int index) &#123; if (index &gt; size || index &lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; /** * 返回IndexOutOfBoundsException细节信息 */ private String outOfBoundsMsg(int index) &#123; return "Index: "+index+", Size: "+size; &#125; /** * 从此列表中删除指定集合中包含的所有元素。 */ public boolean removeAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); return batchRemove(c, false); &#125; /** * 从此列表中删除其中不包含在指定集合中的所有元素。 */ public boolean retainAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); return batchRemove(c, true); &#125; private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123; final Object[] elementData = this.elementData; int r = 0, w = 0; boolean modified = false; try &#123; for (; r &lt; size; r++) if (c.contains(elementData[r]) == complement) elementData[w++] = elementData[r]; &#125; finally &#123; // Preserve behavioral compatibility with AbstractCollection, // even if c.contains() throws. if (r != size) &#123; System.arraycopy(elementData, r, elementData, w, size - r); w += size - r; &#125; if (w != size) &#123; // clear to let GC do its work for (int i = w; i &lt; size; i++) elementData[i] = null; modCount += size - w; size = w; modified = true; &#125; &#125; return modified; &#125; /** * 序列化列表，以流的形式保存状态 */ private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException&#123; // Write out element count, and any hidden stuff int expectedModCount = modCount; s.defaultWriteObject(); // Write out size as capacity for behavioural compatibility with clone() s.writeInt(size); // Write out all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; s.writeObject(elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; &#125; /** * 反序列化 */ private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException &#123; elementData = EMPTY_ELEMENTDATA; // Read in size, and any hidden stuff s.defaultReadObject(); // Read in capacity s.readInt(); // ignored if (size &gt; 0) &#123; // be like clone(), allocate array based upon size not capacity int capacity = calculateCapacity(elementData, size); SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity); ensureCapacityInternal(size); Object[] a = elementData; // Read in all elements in the proper order. for (int i=0; i&lt;size; i++) &#123; a[i] = s.readObject(); &#125; &#125; &#125; /** * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。 *指定的索引表示初始调用将返回的第一个元素为next 。 初始调用previous将返回指定索引减1的元素。 *返回的列表迭代器是fail-fast 。 */ public ListIterator&lt;E&gt; listIterator(int index) &#123; if (index &lt; 0 || index &gt; size) throw new IndexOutOfBoundsException("Index: "+index); return new ListItr(index); &#125; /** * 返回列表中的列表迭代器（按适当的顺序）。 *返回的列表迭代器是fail-fast 。 */ public ListIterator&lt;E&gt; listIterator() &#123; return new ListItr(0); &#125; /** * 以正确的顺序返回该列表中的元素的迭代器。 *返回的迭代器是fail-fast 。 */ public Iterator&lt;E&gt; iterator() &#123; return new Itr(); &#125; /** * An optimized version of AbstractList.ListItr */ private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123; ListItr(int index) &#123; super(); cursor = index; &#125; public boolean hasPrevious() &#123; return cursor != 0; &#125; public int nextIndex() &#123; return cursor; &#125; public int previousIndex() &#123; return cursor - 1; &#125; @SuppressWarnings("unchecked") public E previous() &#123; checkForComodification(); int i = cursor - 1; if (i &lt; 0) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i; return (E) elementData[lastRet = i]; &#125; public void set(E e) &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.set(lastRet, e); &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; public void add(E e) &#123; checkForComodification(); try &#123; int i = cursor; ArrayList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; &#125; /** * 返回一个fromIndex和toIndex之间的子列表 */ public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123; subListRangeCheck(fromIndex, toIndex, size); return new SubList(this, 0, fromIndex, toIndex); &#125; static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123; if (fromIndex &lt; 0) throw new IndexOutOfBoundsException("fromIndex = " + fromIndex); if (toIndex &gt; size) throw new IndexOutOfBoundsException("toIndex = " + toIndex); if (fromIndex &gt; toIndex) throw new IllegalArgumentException("fromIndex(" + fromIndex + ") &gt; toIndex(" + toIndex + ")"); &#125; private class SubList extends AbstractList&lt;E&gt; implements RandomAccess &#123; private final AbstractList&lt;E&gt; parent; private final int parentOffset; private final int offset; int size; SubList(AbstractList&lt;E&gt; parent, int offset, int fromIndex, int toIndex) &#123; this.parent = parent; this.parentOffset = fromIndex; this.offset = offset + fromIndex; this.size = toIndex - fromIndex; this.modCount = ArrayList.this.modCount; &#125; public E set(int index, E e) &#123; rangeCheck(index); checkForComodification(); E oldValue = ArrayList.this.elementData(offset + index); ArrayList.this.elementData[offset + index] = e; return oldValue; &#125; public E get(int index) &#123; rangeCheck(index); checkForComodification(); return ArrayList.this.elementData(offset + index); &#125; public int size() &#123; checkForComodification(); return this.size; &#125; public void add(int index, E e) &#123; rangeCheckForAdd(index); checkForComodification(); parent.add(parentOffset + index, e); this.modCount = parent.modCount; this.size++; &#125; public E remove(int index) &#123; rangeCheck(index); checkForComodification(); E result = parent.remove(parentOffset + index); this.modCount = parent.modCount; this.size--; return result; &#125; protected void removeRange(int fromIndex, int toIndex) &#123; checkForComodification(); parent.removeRange(parentOffset + fromIndex, parentOffset + toIndex); this.modCount = parent.modCount; this.size -= toIndex - fromIndex; &#125; public boolean addAll(Collection&lt;? extends E&gt; c) &#123; return addAll(this.size, c); &#125; public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123; rangeCheckForAdd(index); int cSize = c.size(); if (cSize==0) return false; checkForComodification(); parent.addAll(parentOffset + index, c); this.modCount = parent.modCount; this.size += cSize; return true; &#125; public Iterator&lt;E&gt; iterator() &#123; return listIterator(); &#125; public ListIterator&lt;E&gt; listIterator(final int index) &#123; checkForComodification(); rangeCheckForAdd(index); final int offset = this.offset; return new ListIterator&lt;E&gt;() &#123; int cursor = index; int lastRet = -1; int expectedModCount = ArrayList.this.modCount; public boolean hasNext() &#123; return cursor != SubList.this.size; &#125; @SuppressWarnings("unchecked") public E next() &#123; checkForComodification(); int i = cursor; if (i &gt;= SubList.this.size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[offset + (lastRet = i)]; &#125; public boolean hasPrevious() &#123; return cursor != 0; &#125; @SuppressWarnings("unchecked") public E previous() &#123; checkForComodification(); int i = cursor - 1; if (i &lt; 0) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i; return (E) elementData[offset + (lastRet = i)]; &#125; @SuppressWarnings("unchecked") public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123; Objects.requireNonNull(consumer); final int size = SubList.this.size; int i = cursor; if (i &gt;= size) &#123; return; &#125; final Object[] elementData = ArrayList.this.elementData; if (offset + i &gt;= elementData.length) &#123; throw new ConcurrentModificationException(); &#125; while (i != size &amp;&amp; modCount == expectedModCount) &#123; consumer.accept((E) elementData[offset + (i++)]); &#125; // update once at end of iteration to reduce heap write traffic lastRet = cursor = i; checkForComodification(); &#125; public int nextIndex() &#123; return cursor; &#125; public int previousIndex() &#123; return cursor - 1; &#125; public void remove() &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; SubList.this.remove(lastRet); cursor = lastRet; lastRet = -1; expectedModCount = ArrayList.this.modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; public void set(E e) &#123; if (lastRet &lt; 0) throw new IllegalStateException(); checkForComodification(); try &#123; ArrayList.this.set(offset + lastRet, e); &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; public void add(E e) &#123; checkForComodification(); try &#123; int i = cursor; SubList.this.add(i, e); cursor = i + 1; lastRet = -1; expectedModCount = ArrayList.this.modCount; &#125; catch (IndexOutOfBoundsException ex) &#123; throw new ConcurrentModificationException(); &#125; &#125; final void checkForComodification() &#123; if (expectedModCount != ArrayList.this.modCount) throw new ConcurrentModificationException(); &#125; &#125;; &#125; public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123; subListRangeCheck(fromIndex, toIndex, size); return new SubList(this, offset, fromIndex, toIndex); &#125; private void rangeCheck(int index) &#123; if (index &lt; 0 || index &gt;= this.size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; private void rangeCheckForAdd(int index) &#123; if (index &lt; 0 || index &gt; this.size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); &#125; private String outOfBoundsMsg(int index) &#123; return "Index: "+index+", Size: "+this.size; &#125; private void checkForComodification() &#123; if (ArrayList.this.modCount != this.modCount) throw new ConcurrentModificationException(); &#125; public Spliterator&lt;E&gt; spliterator() &#123; checkForComodification(); return new ArrayListSpliterator&lt;E&gt;(ArrayList.this, offset, offset + this.size, this.modCount); &#125; &#125; @Override public void forEach(Consumer&lt;? super E&gt; action) &#123; Objects.requireNonNull(action); final int expectedModCount = modCount; @SuppressWarnings("unchecked") final E[] elementData = (E[]) this.elementData; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; action.accept(elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; &#125; @Override public Spliterator&lt;E&gt; spliterator() &#123; return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0); &#125; /** Index-based split-by-two, lazily initialized Spliterator */ static final class ArrayListSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; &#123; private final ArrayList&lt;E&gt; list; private int index; // current index, modified on advance/split private int fence; // -1 until used; then one past last index private int expectedModCount; // initialized when fence set /** Create new spliterator covering the given range */ ArrayListSpliterator(ArrayList&lt;E&gt; list, int origin, int fence, int expectedModCount) &#123; this.list = list; // OK if null unless traversed this.index = origin; this.fence = fence; this.expectedModCount = expectedModCount; &#125; private int getFence() &#123; // initialize fence to size on first use int hi; // (a specialized variant appears in method forEach) ArrayList&lt;E&gt; lst; if ((hi = fence) &lt; 0) &#123; if ((lst = list) == null) hi = fence = 0; else &#123; expectedModCount = lst.modCount; hi = fence = lst.size; &#125; &#125; return hi; &#125; public ArrayListSpliterator&lt;E&gt; trySplit() &#123; int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1; return (lo &gt;= mid) ? null : // divide range in half unless too small new ArrayListSpliterator&lt;E&gt;(list, lo, index = mid, expectedModCount); &#125; public boolean tryAdvance(Consumer&lt;? super E&gt; action) &#123; if (action == null) throw new NullPointerException(); int hi = getFence(), i = index; if (i &lt; hi) &#123; index = i + 1; @SuppressWarnings("unchecked") E e = (E)list.elementData[i]; action.accept(e); if (list.modCount != expectedModCount) throw new ConcurrentModificationException(); return true; &#125; return false; &#125; public void forEachRemaining(Consumer&lt;? super E&gt; action) &#123; int i, hi, mc; // hoist accesses and checks from loop ArrayList&lt;E&gt; lst; Object[] a; if (action == null) throw new NullPointerException(); if ((lst = list) != null &amp;&amp; (a = lst.elementData) != null) &#123; if ((hi = fence) &lt; 0) &#123; mc = lst.modCount; hi = lst.size; &#125; else mc = expectedModCount; if ((i = index) &gt;= 0 &amp;&amp; (index = hi) &lt;= a.length) &#123; for (; i &lt; hi; ++i) &#123; @SuppressWarnings("unchecked") E e = (E) a[i]; action.accept(e); &#125; if (lst.modCount == mc) return; &#125; &#125; throw new ConcurrentModificationException(); &#125; public long estimateSize() &#123; return (long) (getFence() - index); &#125; public int characteristics() &#123; return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED; &#125; &#125; @Override public boolean removeIf(Predicate&lt;? super E&gt; filter) &#123; Objects.requireNonNull(filter); // figure out which elements are to be removed // any exception thrown from the filter predicate at this stage // will leave the collection unmodified int removeCount = 0; final BitSet removeSet = new BitSet(size); final int expectedModCount = modCount; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; @SuppressWarnings("unchecked") final E element = (E) elementData[i]; if (filter.test(element)) &#123; removeSet.set(i); removeCount++; &#125; &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; // shift surviving elements left over the spaces left by removed elements final boolean anyToRemove = removeCount &gt; 0; if (anyToRemove) &#123; final int newSize = size - removeCount; for (int i=0, j=0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123; i = removeSet.nextClearBit(i); elementData[j] = elementData[i]; &#125; for (int k=newSize; k &lt; size; k++) &#123; elementData[k] = null; // Let gc do its work &#125; this.size = newSize; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125; return anyToRemove; &#125; @Override @SuppressWarnings("unchecked") public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123; Objects.requireNonNull(operator); final int expectedModCount = modCount; final int size = this.size; for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123; elementData[i] = operator.apply((E) elementData[i]); &#125; if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125; @Override @SuppressWarnings("unchecked") public void sort(Comparator&lt;? super E&gt; c) &#123; final int expectedModCount = modCount; Arrays.sort((E[]) elementData, 0, size, c); if (modCount != expectedModCount) &#123; throw new ConcurrentModificationException(); &#125; modCount++; &#125;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis数据结构入门]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2Fredis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[参考资料：《redis设计与实现》 redis介绍Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。 上面一段话是redis中文网的官方介绍。有几个关键的点值得注意： redis属于内存存储，数据是存在内存里面的 redis本质是数据结构服务器，官方提供了各种数据结构供你使用，你可以将redis用作数据库或者缓存。 redis的存储方式为key-value的形式存储，所以redis是非关系型数据库 为什么我们要用redis学一门技术之前往往会出现这么一个问题，它好在哪里，为什么值得学？值得用？官方给出了以下几点优势： 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 我们看到上面第一点就是性能极高！！那么问题来了，redis是怎么做到这么快的读写速度的？这个问题我当时面试的时候也被问到过…说白了就是让你说清楚redis为什么很快？？ redis为什么很快关于redis为什么快的问题，有两点我们其实很容易想到： redis是基于内存的，内存的读写速度很快 redis是单线程的，在一定程度上减少了竞争锁和频繁的上下文切换 我们知道一般数据库的读写都是需要经过磁盘的，而磁盘的读写速度相对于内存来说绝对是算慢的了，所以我们需要用缓存，我们希望不要每次进行读写都跑去数据库进行操作。mybatis为什么要设置一级缓存，二级缓存？主要还是为了不希望每次读取数据都要到数据库去读取，以提升性能。 但是除了上述两点，还有什么特点是提升了redis的性能的呢？ 其实还有一点很重要：redis采用了非阻塞的网络IO多路复用技术来保证多连接的时候系统的高吞吐量。也就是指多个socket网络连接复用同一个线程。 另外还有两点： redis整体的hash数据结构提高了读取速度，以及压缩表和跳跃表等的使用。 redis采用了效率较高的事件分离器，内部采用非阻塞执行方式。 redis的数据类型Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。 数据类型 可以存储的值 操作 STRING 字符串、整数或者浮点数 对整个字符串或者字符串的其中一部分执行操作 对整数和浮点数执行自增或者自减操作 LIST 列表 从两端压入或者弹出元素 对单个或者多个元素 进行修剪，只保留一个范围内的元素 SET 无序集合 添加、获取、移除单个元素 检查一个元素是否存在于集合中 计算交集、并集、差集 从集合里面随机获取元素 HASH 包含键值对的无序散列表 添加、获取、移除单个键值对 获取所有键值对 检查某个键是否存在 ZSET 有序集合 添加、获取、删除元素 根据分值范围或者成员来获取元素 计算一个键的排名 redis的存储形式为key-value，其中key为字符串，value可以是string、list、hash、set、zset。redis并没有直接使用这些数据结构来构建key-value数据库，而是基于这些数据结构构建了一个对象系统。每个相应的键对象、值对象都有自己的类型、编码、和指向底层数据结构的指针。 字符串string是redis最基本的类型，一个key对应一个value。string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 实例12345678127.0.0.1:6379&gt; set name &quot;xiaohuang&quot;OK127.0.0.1:6379&gt; get name&quot;xiaohuang&quot;127.0.0.1:6379&gt; del name(integer) 1127.0.0.1:6379&gt; get name(nil) SDS(简单动态字符串)redis自己构建了一种叫做简单动态字符串（SDS）的抽象类型，并将SDS用作redis的默认字符串表示。每个sdshdr结构表示一个SDS值：12345678struct sdshdr &#123; //记录buf数组中已使用的字节数量 int len; //记录buf数组中未使用的字节数量 int free; //字节数组，用来保存字符串 char buf[];&#125; C字符串和SDS的区别 C字符串 SDS 获取字符串长度的复杂度为O(N) 获取字符串长度的复杂度为O(1) API不安全，可能会造成缓冲区溢出 API安全，不会造成缓冲区溢出 修改字符串长度n次必然要进行N次内存重分配 修改字符串N次最多需要N次内存重分配 只能保存文本数据 可以保存文本或二进制 可以使用所有&lt;string.h&gt;库函数 可以使用部分&lt;string.h&gt; 库函数 列表Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。 实例：12345678910127.0.0.1:6379&gt; lpush list-key redis(integer) 1127.0.0.1:6379&gt; lpush list-key mongodb(integer) 2127.0.0.1:6379&gt; rpush list-key java(integer) 3127.0.0.1:6379&gt; lrange list-key 0 51) &quot;mongodb&quot;2) &quot;redis&quot;3) &quot;java&quot; 链表 redis列表键的底层实现之一为链表 每个链表结点listnode的结构表示： 12345678typedef struct listNode &#123; //前置节点 struct listNode *prev; //后置节点 struct listNode *next; //结点值 void *value;&#125;listNode; list链表结构 1234567891011121314typedef struct list &#123; //表头节点 listNode *head; //表尾节点 listNode *tail; //链表节点数量 unsigned long len; //节点值复制函数 void *(*dup) (void *ptr); //节点值释放函数 void *(*free) (void *ptr); //节点值对比函数 int (*match) (void *ptr, void *key);&#125;list; redis链表特性 无环双向链表 获取表头指针和表尾指针的复杂度为O(1) 获取某个节点的前置节点和后置节点的复杂度为O(1) 获取链表中节点数量的复杂度为O(1) 链表使用 void* 指针来保存节点值，链表可以保存不同类型的值 哈希Redis hash 是一个键值对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 实例：12345678910111213141516171819127.0.0.1:6379&gt; hset hash-key field1 value1(integer) 1127.0.0.1:6379&gt; hset hash-key field2 value2(integer) 1127.0.0.1:6379&gt; hset hash-key field3 value3(integer) 1127.0.0.1:6379&gt; hset hash-key field1 value1(integer) 0127.0.0.1:6379&gt; hgetall hash-key1) &quot;field1&quot;2) &quot;value1&quot;3) &quot;field2&quot;4) &quot;value2&quot;5) &quot;field3&quot;6) &quot;value3&quot;127.0.0.1:6379&gt; hdel hash-key field1(integer) 1127.0.0.1:6379&gt; hget hash-key field2&quot;value2&quot; hash表结构与哈希表节点结构12345678910typedef struct dictht&#123; //哈希表数组 dictEntry **table; //哈希表大小 unsigned long size; //哈希表大小掩码，用于计算索引值，总是等于size-1 unsigned long sizemask; //该哈希表已有节点数量 unsigned long used;&#125;dictht; 123456789101112typedef struct dictEntry&#123; //键 void *key; //值 union&#123; void *val; uint64_t u64; int64_t s64; &#125;v; //指向下个哈希表节点，形成链表 struct dictEntry *next;&#125;dictEntry; 字典结构表示123456typedef struct dict&#123; dictType *type; void *privdata; dictht ht[2]; int trehashidx; /* rehashing not in progress if rehashidx == -1 */&#125;dict; 1234567891011121314typedef struct dictType &#123; //计算哈希值 unsigned int (*hashFunction) (const void *key); //复制键 void *(*keyDup) (void *privdata, const void *key); //复制值 void *(*valDup) (void *privdata, const void *obj); //对比建 int (*keyCompare) (void *privdata, const void *key1, const void *key2); //销毁键 void (*keyDestructor) (void *privdata, void *key); //销毁值 void (*valDestructor) (void *privdata, void *obj);&#125;dictType; 当我们要插入新的键值对到字典里面的时候，首先要根据键值对的键计算得到哈希值，然后根据哈希值得到索引值，最后将相应包含键值对的哈希表节点放到哈希数组的制定索引位置。整个过程你会发现和Java里的HashMap很相似。hash = dict-&gt;type-&gt;hashFunction(key);index = hash &amp; dict-&gt;ht[x].sizemask; 当两个或两个以上的键被分配到哈希表数组的同一个索引出，我们认为此时发生了hash冲突。和HashMap相似，redis的哈希表也是使用链地址法来解决哈希冲突。被分配到同一个索引的多个结点可以利用next指针构成一个单链表，并且为了提升性能，总是将新节点添加到链表的表头位置(复杂度为O(1)), 但是rehash（重新散列）redis和Java并不同，redis采用的是渐进式rehash，而不是一次性完成。因为如果数据量过大，一次性rehash会导致较大的计算延时，可能会导致服务器在一段时间内停止服务。 具体的rehash步骤： 为ht[0]分配空间，让字典同时持有ht[0]，ht[1]两个哈希表 在字典中维持一个索引计数器变量rehashidx，并将其设为0，表示rehash开始 在rehash期间，每次对字典执行添加、查找或更新操作时，程序除了执行指定的操作以外，还会将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash完成后，将rehashidx的值增加1 不断执行以上操作，当ht[0]的所有键值对都被rehash到ht[1]，程序将rehashidx的值设为-1，表示rehash完成。 集合集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 实例：12345678910111213141516171819127.0.0.1:6379&gt; sadd set-key redis(integer) 1127.0.0.1:6379&gt; sadd set-key java(integer) 1127.0.0.1:6379&gt; sadd set-key mysql(integer) 1127.0.0.1:6379&gt; sadd set-key redis(integer) 0127.0.0.1:6379&gt; smembers set-key1) &quot;java&quot;2) &quot;redis&quot;3) &quot;mysql&quot;127.0.0.1:6379&gt; sismember set-key redis(integer) 1127.0.0.1:6379&gt; srem set-key mysql(integer) 1127.0.0.1:6379&gt; smembers set-key1) &quot;java&quot;2) &quot;redis&quot; 整数集合(intset)整数集合是集合键的底层实现之一，当一个集合只包含整数值元素，并且元素数量不多，redis会使用整数集合作为集合键的底层实现。 12345678typedef struct intset&#123; //编码方式 uint32_t encoding; //集合包含的元素数量 uint32_t length; //保存元素的数组 int8_t contents[];&#125;intset; 关于整数集合如何升级，可以自行查阅黄建宏的《redis设计与实现》redis的整数集合底层为有序，无重复的数组，有需要时，程序会改变数组类型。整数集合只支持升级操作，不支持降级操作 有序集合实例：1234567891011121314151617181920212223127.0.0.1:6379&gt; zadd zset-key 11 member1(integer) 1127.0.0.1:6379&gt; zadd zset-key 9 member2(integer) 1127.0.0.1:6379&gt; zadd zset-key 13 member3(integer) 1127.0.0.1:6379&gt; zadd zset-key 13 member3(integer) 0127.0.0.1:6379&gt; zrange zset-key 0 -1 withscores1) &quot;member2&quot;2) &quot;9&quot;3) &quot;member1&quot;4) &quot;11&quot;5) &quot;member3&quot;6) &quot;13&quot;127.0.0.1:6379&gt; zrem zset-key member1(integer) 1127.0.0.1:6379&gt; zrange zset-key 0 -1 withscores1) &quot;member2&quot;2) &quot;9&quot;3) &quot;member3&quot;4) &quot;13&quot;127.0.0.1:6379&gt; 跳跃表跳跃表是一种有序数据结构，属于有序集合键的底层实现之一，它通过在每个节点中维持多个指向其他节点的指针，从而能够快速访问节点。平均复杂度O(logN)，最坏O(N)复杂度,如果一个有序集合包含的元素比较多，或者有序集合中元素的成员是比较长的字符串时，redis就会使用跳跃表来作为有序集合键的底层实现。跳跃表除了在有序集合中用到，在redis的集群节点中也有用作内部数据结构。 跳跃表节点结构123456789101112131415typedef struct zskiplistNode &#123; //后退指针 struct zskiplistNode *backward; //分值 double score; //成员对象 robj *obj; //层 struct zskiplistLevel &#123; //前进指针 struct zskiplistNode *forward; //跨度 unsigned int span; &#125;level[];&#125;zskiplistNode; 跳跃表结构 12345678typedef struct zskiplist &#123; //表头节点和表尾节点 structz skiplistNode *header, *tail; //表中节点数量 unsigned long length; //表中层数最大的节点的层数 int level;&#125;zskiplist; 每个跳跃表节点的层高都是1到32之间的随机数 在同一个跳跃表中，多个节点可以包含相同的分值，但每个节点的成员对象必须唯一 跳跃表中的节点按照分值大小进行排序，当分值相同，按照成员对象的大小进行排序 与红黑树等平衡树相比，跳跃表的优势在于： 插入速度快，不需要旋转等操作来维持平衡 支持无锁操作 实现相对简单]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蘑菇街Java实习凉面]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2F%E8%98%91%E8%8F%87%E8%A1%97Java%E5%AE%9E%E4%B9%A0%E5%87%89%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[清明前就接到了蘑菇街hr的电话，约我去现场面试，当时时间有冲突，就约了清明后的一天上午去面试。当天一大早起来就去赶公交车前往城西。 总体来说面试体验很好，我没想到蘑菇街面试这么看重项目，太菜的我被怼的很惨呀！！面试官人很好，问题一点点展开，没思路也会给你提示，但我还是答不上来…. 1 先做个自我介绍吧 2 项目介绍，你负责了哪一块？ 3 你在项目中碰到最困难的点是什么？讲讲看 4 看到你有负责前后端之间的数据通信，是怎么实现的？后面针对具体场景说我这一系列操作可能时延会较长，有没有想过怎么设计让交互速度更快？数据通信的安全问题考虑过吗？怎么解决安全隐患，比如客户端提交数据被人中途篡改？你平时有自己去学过安全相关的资料吗？ 5 redis有哪些数据结构？set集合底层怎么实现的？Redis平时用的多吗？怎么用Redis实现点赞功能？Redis除了缓存，还有哪些地方用到？我们怎么确保Redis缓存和db中的数据一致性？ 6 spring的aop用过吗？哪些地方用到了？现在假设我们需要对各种接口的权限管理采用aop编程，我们可以怎么设计？切点怎么确定？ 7 mysql的索引底层为什么要用B+树而不用B树？除了时间效率方面，在存储方面有哪些优势？后面给了一个场景让我设计索引…我真的不太会..索引有哪几类当时都不清楚。。 8 后面又是一个场景问题，给了一个一直发邮件的场景？假设中途邮件发送中断了，可以怎么设计解决发送中断问题？你可以先思考几分钟，考虑两三个方案解释下。 9 mybatis了解吗？mybatis是怎么防止sql注入的？sql语句里的#和 \$ 到底有什么区别？你觉得什么时候应该用#，什么时候应该用 $ 10 你有什么想问我的？ 最后我就凉凉了…..]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个成功的git分支模型]]></title>
    <url>%2F%E8%AF%91%E6%96%87%E9%9B%86%2F%E4%B8%80%E4%B8%AA%E6%88%90%E5%8A%9F%E7%9A%84git%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[一个成功的Git分支模型 原文链接：https://nvie.com/posts/a-successful-git-branching-model/原文作者： Vincent Driessen 在这片文章我介绍了一些我在一年前为一些项目（包括工作和私人）介绍的开发模型，并且事实证明非常成功。一直以来我都打算专门为其写一篇文章，然而我几乎完全找不到空闲的时间来做这件事，直到现在。我不会讨论任何有关项目的细节，只关注这个分支策略和发布管理。 为什么要用git？有关Git与集中式源代码控制系统相比的优缺点的详细讨论，请参阅如下网站：网站上述论坛有很多思想碰撞的火焰。作为一个开发者，在今天所有其他的工具里面我更偏爱Git。Git确实改变了开发人员对合并与分支的看法。从经典的CVS / Subversion世界来看，合并/分支一直被认为有点可怕（“小心合并冲突，它们会咬你！”）以及有时候你在一段时间只做一次的事情。 但是使用Git，这些操作变得非常轻便和简单，并且它们被认为是您日常工作流程的核心部分之一。例如，在CVS / Subversion 书籍中，分支与合并首先在后面的章节中被讨论（对于高级用户），而在 每一本 Git 书中，它已经在第3章（基础知识）中被介绍过。 由于其简单性和重复性，分支和合并不再是一件令人害怕的事情。版本控制工具应该比其他任何东西更有助于进行分支/合并的操作。 关于这个工具讲够了，让我们进入这个开发模型。我将在这里介绍的模型本质上不再是每个团队成员必须遵循的为了进入托管软件开发过程的一组程序。 分散但集中我们使用的存储库设置与该分支模型配合良好，具有中心“真实”存储库。请注意，这个仓库只被认为是一个中央仓库（因为Git是DVCS，在技术层面没有这种中央仓库这种东西）。我们将此repo称为origin，因为所有Git用户都熟悉此名称。 每个开发人员都会拉取并推送到origin。但除了集中式推拉关系之外，每个开发人员还可以从其他同行中获取更改以形成子团队。例如，在将正在进行的工作过早推进origin之前，在开发一项大的新功能时，这对于两个或更多开发人员一起工作可能是有用的 。在上图中，有爱丽丝和鲍勃，爱丽丝和大卫以及克莱尔和大卫这些子团队。 从技术上讲，这意味着Alice已经定义了一个Git远程，名为bob，指向Bob的存储库，反之亦然。 主要分支在核心部分，开发模型受到现有模型的极大启发。中央仓库拥有两个主要分支，具有无限的生命周期： master develop 该master分支的origin应该对每一位Git用户都很熟悉。与master分支并行的另一个分支称为develop分支。 我们认为origin/master是反映这个HEAD源代码生产就绪状态的主要分支 。 我们认为origin/develop是主要的分支，其源代码 HEAD始终反映了最新交付的下一版本中开发被更改的状态。有些人称之为“整合分支”。这是在夜间自动被构建的地方。 当develop分支中的源代码到达稳定点并准备好被发布时，所有的更改都应该以某种方式被合并到master分支，然后使用版本号进行标记。上述将如何执行进一步详细讨论。 因此，当每次将更改合并回master时，根据定义，这是一个新的生产版本。我们对此非常严格，因此从理论上讲，我们可以使用Git钩子脚本在每次提交时对master自动构建和发布我们的软件到我们的生产服务器 。 支持分支接着上面的主要分支master和develop，我们的发展模式，采用了多种支持分支机构，以帮助团队成员进行并行开发，缓解功能跟踪，为生产版本做准备，并协助快速修复现场制作的问题。与主要分支不同，这些分支的寿命有限，因为它们最终会被删除。 我们可能使用的不同类型的分支是： 功能分支 发布分支机构 修补程序分支 这些分支中的每一个都有特定的目的，并且必须遵守关于哪些分支可以是它们的起始分支以及哪些分支必须是它们的合并目标的严格规则。我们将在一分钟内讨论它们。 从技术角度来看，这些分支绝不是“特殊的”。分支类型根据我们如何使用它们进行分类。他们当然是老的Git分支。 功能分支 可能会分支于：develop 必须合并回：develop 分支命名约定：anything except master, develop, release-*, or hotfix-* 功能分支（或有时称为主题分支）用于为即将发布或将来的版本开发新功能。在开始开发功能时，此功能将会在其中合并的目标版本，但可能在此时未知。功能分支的本质是，只要功能处于开发阶段，它就会存在，但最终会被合并回develop（以便将新功能添加到即将发布的版本中）或丢弃（在实验令人失望的情况下）。 功能分支通常仅存在于开发人员存储库中，而不存在于origin。 创建一个功能分支12$ git checkout -b myfeature develop 切换到新分支“myfeature” 在开发中加入完成的功能完成的功能可能会合并到develop分支中，以确保将它们添加到即将发布的版本中： 12345678$ git checkout develop 切换到分支&apos;develop&apos;$ git merge --no-ff myfeature 更新ea1b82a..05e9557（更改摘要）$ git branch -d myfeature 已删除分支myfeature（为05e9557）。$ git push origin开发 该–no-ff标志会导致合并始终创建新的提交对象，即使可以使用快进执行合并。这样可以避免丢失有关历史上存在的功能分支的信息，并将所有一起添加的功能提交组合在一起。两者相比： 在后一种情况下，不可能从Git历史中看到哪些提交对象一起实现了一个功能 - 您必须手动读取所有日志消息。恢复整个功能（即一组提交）在后一种情况下也是一件真正令人头痛的事，而如果使用该–no-ff标志则很容易完成 。 是的，它会创建一些（空的）提交对象，但增益远远大于成本。 发布分支可能会分支于：develop必须合并回：develop 和 master分支命名约定：release-* 发布分支支持准备新的生产版本。它们允许最后一刻点缀我和交叉t。此外，它们允许修复小错误并为发布准备元数据（版本号，构建日期等）。通过在发布分支上执行所有这些工作，develop 分支将被清除以接收下一个大版本的功能。 新发布分支的关键时刻develop是开发（几乎）反映新版本的期望状态。至少所有针对要构建的版本的功能必须在此时合并到其中 。针对未来版本的所有功能可能不会 - 他们必须等到发布分支后。 正是在发布分支的开始，即将发布的版本被分配了一个版本号 - 而不是之前的版本号。直到那一刻，这个develop 分支反映了“下一个版本”的变化，但不清楚“下一个版本”最终是否会变为0.3或1.0，直到发布分支开始。该决定是在发布分支的开始时做出的，并根据项目相关版本号冲突的规则执行。 创建一个发布分支发布分支是从develop分支创建的。例如，假设版本1.1.5是当前的生产版本，我们即将推出一个大版本。状态develop为“下一个版本”做好了准备，我们已经决定这将成为版本1.2（而不是1.1.6或2.0）。因此，我们为发布分支提供反映新版本号的名称： 1234567$ git checkout -b release-1.2 develop 切换到新分支“release-1.2”$ ./bump-version.sh 1.2 文件修改成功，版本提升到1.2。$ git commit -a -m “Bumped version number to 1.2”[release-1.2 74d9424] Bumped version number改为1.21个文件被改变，1个插入（+），1个删除（ - ） 在创建新分支并切换到它后，我们会修改版本号。这个bump-version.sh是一个虚构的shell脚本，它可以更改工作副本中的某些文件以反映新版本。（这当然可以手动更改 - 关键是某些文件会发生变化。）然后，该冲突版本号会被提交。 这个新的分支可能存在一段时间，直到发布可能会被真正推出。在此期间，可以在此分支中应用错误修复（而不是在develop分支上）。严禁在此处添加大型新功能。它们必须合并到develop，因此要等待下一个大版本。 完成一个发布分支当发布分支的状态准备好成为真正的发布版本时，需要执行一些操作。首先，发布分支被合并到 master（因为每次提交到master的都是按照定义的新版本，请记住）。接下来，master必须标记该提交，以便将来参考此历史版本。最后，需要将发布分支上所做的更改合并回到develop，以便将来的版本也包含这些错误修复。 Git的前两个步骤：123456$ git checkout master切换到分支&apos;master&apos;$ git merge --no-ff release-1.2 由递归合并而成。（更改摘要）$ git tag -a 1.2 该版本现已完成，并标记以供将来参考。 编辑：您可能还想使用-s或-u 标记以加密方式对您的标记进行签名。 为了保持发布分支中所做的更改，我们需要将这些更改合并到develop。在Git中：12345$ git checkout develop 切换到分支&apos;develop&apos;$ git merge --no-ff release-1.2 由递归合并而成。（变更摘要） 这一步很可能导致合并冲突（甚至，因为我们已经更改了版本号）。如果是这样，请修复并提交。 现在我们已经完成了，并且可能会删除发布分支，因为我们不再需要它了： 12$ git branch -d release-1.2 删除了分支版本1.2（ff452fe）。 修补程序分支可能会分支于：master必须合并回：develop 和 master分支命名约定：hotfix-* 修补程序分支非常类似于发布分支，因为它们也是为了准备新的生产版本，尽管是计划外的。它们源于必须立即实际生产版本的不良状态采取反应。当必须立即解决生产版本中的关键错误时，可以从标记生产版本的主分支上的相应标记分支修补程序分支。 实质是团队成员（在develop分支机构）的工作可以继续，而另一个人正在准备快速生产修复。 创建修补程序分支从master分支创建修补程序分支。例如，假设版本1.2是当前生产版本正在运行的版本并且由于严重错误而出现了bug。但是变化在develop分支仍然不稳定。然后我们可以分支出修补程序分支并开始修复问题：1234567$ git checkout -b hotfix-1.2.1 master 切换到新分支“hotfix-1.2.1”$ ./bump-version.sh 1.2.1 文件修改成功，版本提升到1.2.1。$ git commit -a -m “Bumped version number to 1.2.1”[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.11个文件改变了，1个插入（+），1个删除（ - ） 分支后不要忘记碰撞版本号！然后，修复错误并在一个或多个单独的提交中提交修复。 123$ git commit -m “修复了严重生产问题”[hotfix-1.2.1 abbe5d6]修复了严重生产问题5个文件发生了变化，32个插入（+），17个删除（ - ） 完成一个修补程序分支完成后，需要将错误修复合并回到master，但也需要合并回到develop，以保证错误修复程序也包含在下一个版本中。这与发布分支的完成方式完全相似。首先，更新master并标记版本。 123456$ git checkout master 切换到分支&apos;master&apos;$ git merge --no-ff hotfix-1.2.1 由递归合并。（更改摘要）$ git tag -a 1.2.1 编辑：您可能还想使用-s或-u 标记以加密方式对您的标记进行签名。 接下来，在develop分支中也包括错误修复： 12345$ git checkout develop 切换到分支&apos;develop&apos;$ git merge --no-ff hotfix-1.2.1 由递归合并。（变更摘要） 此处规则的一个例外是， 当发布分支当前存在时，需要将修补程序更改合并到该发布分支中，而不是develop分支。在发布分支完成时，将错误修复反向合并到发布分支中最终会导致错误修复也被合并到develop分支。（如果develop分支立即工作并涉及次错误修复并且不能等待发布分支完成，您可以安全地将错误修复合并到develop分支。） 最后，删除临时分支： 12$ git branch -d hotfix-1.2.1 删除了分支修补程序-12.2.1（是abbe5d6）。 摘要虽然这个分支模型没有什么真正令人震惊的地方，但这篇文章开头的“大图”可以被证明在我们的项目中非常有用。它形成了一个易于理解的优雅模型，并能够让团队成员形成对分支和发布过程的共同理解。]]></content>
      <categories>
        <category>译文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[风口过了，猪还是猪]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E9%A3%8E%E5%8F%A3%E8%BF%87%E4%BA%86%EF%BC%8C%E7%8C%AA%E8%BF%98%E6%98%AF%E7%8C%AA%2F</url>
    <content type="text"><![CDATA[风口过了，猪还是不会飞互联网界内有句话挺有名，站在风口上，猪都能飞起来。这话不难理解，往前回顾这些年it行业的迅猛发展，一批又一批的独角兽成长起来，动不动估值上亿，上市的造富神话一个又一个，大家都期待着下一个阿里巴巴的诞生。但从2018年的p2p爆雷，以及年底和19年初的各个公司爆出了裁员。事实上大面积的裁员是真的，当然还在招人也是真的。这里一方面有国内大经济环境恶劣的原因，另一方行业本身的泡沫不小。 国内经济下行也不是我随便说说的，你们有关注过其他行业其实应该也有听到点消息，虽然通常都是互联网裁员会炒的比较火，但传统制造业日子也并不好过，全球制造业各个巨头也都在裁员，虽说还谈不上类似08年，97年的金融危机，但这个时候出现问题，风险还是蛮大的。至少我觉得资本一旦寒冬，且不说已经冬天，或许凛冬将至。这种时候能偷着乐的估计也就老师、公务员这种体制内的吧？给资本家打工你都需要意识到公司不是你的家。大环境不是我们这些普通人能够改变的，你能做的只有做好自己。我觉得如何应对危机，最重要的一条，那就是终身学习，你得让自己保持足够的竞争力。其余的点也有很多，比如别给自己加杠杆，背高负债，高消费等等。由俭入奢容易，由奢入俭难。裁员其实没那么可怕，能力在线，另外找一家就是了。但有些人压力就会不小。此前我就见过不少帖子，杭州，深圳都有，无非就是杠杆买了房，每个月背着一两万的房贷然后被炒鱿鱼，这就有点心累了。 这两年中国经济的持续增持有两条大腿一直在撑着，一条腿是房地产，一条腿是互联网。但恕我直言，我个人觉得经济泡沫最大的就是这两条腿。当像我这种在校生，或者你身边很多的人，开口闭口谈天都是房价，买房之类的，我觉得就很危险，这有点像全民买房的前兆，热钱全流入房地产，实体业必然受影响。杭州自从G20开完，再加上备受期待的亚运会加持，房价整体趋势就是猛涨，另一方面，棚改政策，城中村改造也是传出了不少造富神话，拆迁户各种送房送钱，补贴的钱又再次流入房地产，至于政府，卖地卖得好就行了。 互联网的问题一方面太虚了，另一方面各种红利用得也快差不多了，遭遇瓶颈是必然的。人口红利，微信，也好，淘宝也好，移动互联网这一块很大程度上得益于人口红利，但如今微信的用户其实已经很难再上涨。互金就不说了，去年倒闭的企业不少，至于游戏，国内主流游戏厂商股价全是下跌，游戏其实受政策影响很大，你版号拿不到，光有技术没什么卵用，另外游戏的赌博性质很高，虽说很赚钱，但往往是亏的企业多。大多数游戏的存活周期都不长，顶多几年算不错了，一款游戏从研发到最后发布，一系列的都是在砸钱，最后如果没什么用户，没什么玩家支持，那这些钱往往是打水漂的多。总之前几年互联网迅猛扩张，但并没出现什么新的比较好的增长点。倒是各种新概念很火，AI、VR、区块链等等，也许下一次产业革命就跟这些点有关，但是光有概念，没办法应用落地，赚不了钱，投资人是不会买账的！放放PPT，画画大饼就能融资的日子已经过去了。 总之大环境不好，个人是很难独善其身的，学生该学习的还是好好学习，该找工作的还是要好好找工作，该上班的还是好好上班。网上无非两种观点：悲观的认为这次的冬天会很冷，时间会很长，乐观的，对中国经济充满信息的，认为转暖也快了。特朗普会选择伤敌一千自损八百的贸易战政策不是没有原因的，直接的原因就是想扼制中国高端制造业的转型升级，也就是要扼制中国的发展，但我相信美国应该也看到了中国自身经济也存在着不少问题才敢直接打贸易战。既然是市场经济，与资本分不开的经济。那么经济规律你是躲不了的，经济危机你是避免不了的，可以说美国下一次金融危机必然还是会发生，或早或晚罢了，拖得越晚，反弹的越厉害。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[为什么我说考验人性多半会令你失望]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%AF%B4%E8%80%83%E9%AA%8C%E4%BA%BA%E6%80%A7%E5%A4%9A%E5%8D%8A%E4%BC%9A%E4%BB%A4%E4%BD%A0%E5%A4%B1%E6%9C%9B%2F</url>
    <content type="text"><![CDATA[永远不要去尝试考验人性,人性真的经不起考验! 下述内容多为个人见解，难免会犯学术上的错误，欢迎指正。 我可能有一天会不与代码打交道，但我这一生不可能不与人打交道，这是避免不了的。这也大大激发了了我对人性理解的兴趣，各类学科里面与人性关联度最高的，又属心理学最甚。为了防止有些人说我以偏概全，说还有某某圣人并非如此，某某大贤已经四大皆空，无欲无求，考验他们的人性纯粹多此一举。我只说大多数情况下的心理状态是如何如何。因为绝大多数人都只是普通人，大部分人既不是圣人，也不是恶人，只是一个普通人，你可以想想看你生活到现在遇到的人，是不是大多和你一样，有自己的欲望和所求，有自己的弱点和困惑。既然是普通人，那么面对各种压力或者说诱惑，不说他真实表现如何，你觉得他的内心想法是如何的呢？ 先来看看人性是什么，字面意思我觉得就是指人的本性，也就是请抛开各种约束，诸如道德，法律等等，人的心理表现已经相对应会做出的行为表现。百度百科的解释分了狭义和广义两种： 狭义上是指人的本质心理属性，也就是人之所以为人的那一部分属性，是人与其它动物相区别的属性；广义上是指人普遍所具有的心理属性，其中包括人与其它动物所共有的那部分心理属性。无论是人的本质心理属性，还是人与动物所共有的属性，由于它们都是人所共有的心理属性，那么这种属性也就不可能是后天的结果，只能是人类天性，属于无条件反射。 我们可以看到不论是狭义还是广义，都是人所共有的心理属性，也就是说指的是先天的，无条件的反射。所以我在之前就提到了，既然是讲人性，就不要将各种外在约束引进来，包括教育，各种行为规范，道德准则等等。因为在这些条件下做出的表现大多并不属于真正的人性表现。是经过了包装的。上述提到的定义其实也就指向了人性的本质，这里其实也引出了关于人性一直以来存在的贯穿于东西方世界的争论，人性本善还是本恶？中国古代关于这个问题一直争论不休，基本四中观点都涵盖了：包括孟子的性善论，认为人生来即有恻隐、善恶、辞让、是非四种“善端”，扩而充之，便可形成仁、义、礼、智的善性。荀子的性恶论，认为“人之性恶，其善伪也。”（《荀子·性恶》）善性是后天人为的。性无善无恶论，这包括：告子的“性无善无不善”论，认为“生之谓性”，“食色，性也”；性有善有恶论，这包括先秦世硕等的有善有恶论，汉杨雄的性善恶混论，董仲舒等的性三品论等：杨雄认为“人之性也，善恶混，修其善则为善人，修其恶则为恶人”；明清之际王夫之的性“日生日成”论，认为人性绝非在“初生之顷”就定型，一成不易，而是随着环境和教养的不同，“性屡移而异”，“未成可成，已成可革”，认为人性是可以培养和不断完善的；北宋的司马光的人性的先天不等论，司马光认为人生来在人性善恶上就先天不平等，无论圣人还是愚人善恶都是兼而有之，只是有些在善性上会占优势，有些人在恶性上会占优势。 人性最大的一个特点就是复杂性，因此首先我不认同纯粹的人性本恶或者性本善，我的观点就是有善有恶论，只不过是在恶性上占优势还是在善性上占优势因人而异。为什么我说复杂是人性的特点，这其实是很好理解，你看过很多真正出色艺术作品，小说也好，电影也好，电视剧也一样，真正塑造人物形象出色的，往往都是十分立体的人物形象。不像很多常规意义上的，哦，那谁谁谁是个好人，思想端庄正直，那谁谁谁是个坏人，无恶不作。一个人也许他不贪财，但他不一定不好色；一个人也许不好色，但他不一定不慕名；一个人也许不慕名，但他不一定不求权……同样的，一个贪财好色之人也可能重情重义，一个恶贯满盈之人也可能诚实有信，一诺千金。抗日战争时期，有一大波被人唾骂的汉奸，你能想象在这之前，这当中也有人做出过堪称为民族英雄的壮举。生活中人间人嫌弃的一个猥琐男，用钱各种抠门，色眯眯的眼睛不停在那些漂亮女生身上来回移动的家伙，怕是没几个人愿意和他交往，但是当一个同学得了绝症，竟然只有这个人拿出了自己几乎全部的几千块钱积蓄帮助他。 和复杂性关联比较大的一个特点就是变化性，也就是说人性不是一成不变的，而是可以一直变化着的。这一点说起来或许要困难不少。不是都说了人性是先天性的吗，是人所共有的生理，心理属性吗？难道是你通过教育，通过感化就能改变得了的吗？我认为是可变的，只是程度不同。我在之前提过，我支持的观点是人性有善有恶论，无非每个人善恶的比重不同，在成长过程中，可能一件不经意的小事，但对当事人却造成了极大的震撼，就是这份份震撼，不知不觉间就撼动了在他内心深处的善恶比重。看过武侠小说的人应该遇到过不少这种情况，一个一开始冷酷无情，杀人如麻的杀手为何在后期竟然渐渐放下了恶念，开始走自己的自我救赎之路？一个原先气质轩昂，众人称赞的武林正派人士，为何后期会走上背信弃义，追名逐利的道路？这些人都出现了变化，而这种变化往往都是有引子的。那个杀人如麻的冷血家伙可能有了温柔体贴的妻子，可爱聪慧的孩子，有了一个令人羡慕的美满家庭，他不想自己的亲人的命运因为自己而走上绝路，自然要做出内心的博弈。 人性另一个逃不开的特点就是自利性。当我提到自利，利己这样的字眼，很多人可能无意中就想到了阴暗面去，这又容易出问题，自利实在是太正常太普遍了，自利绝对不是错，不希望很多人想歪了。很多学者批判现在的学生一个个都是精致的利己主义者，这种批判是否合乎情理呢，或许他们是想说现在的人少了太多奉献精神，牺牲精神，集体精神。但这种批判从某个角度是不合人性的。人性本就是利己的，这是无可辩驳的，而且利己其实不是什么错，这才是真实人性的展现，这反倒有助于社会发展，进步，只要能够正视这样的本性，你想想看专制统治时期，统治者会让这种利己的思想得到发展吗？统治者只会想尽办法巩固自己的统治地位，让底层民众为皇族服务，以为皇族做出贡献为荣。利己心只得压抑着，过度放大显然就漏了马脚，因为这么做往往会触碰到统治阶级的蛋糕，这可是要杀头的哦。 除了自利性，还有就是普遍性，这我在最开头就说过了，定义里面也讲明了，人性人性，不就是人所共有的本性吗。既然如此，不论你是国家领袖，还是平民百姓；不论你是大学者，大教授，还是普通学生，职场白领，都有着许多共性的人性展露。你看看贪污腐败的问题，上到国务院高层，下到乡镇级村委，纵观历史各朝，哪朝哪代是没有贪污腐败现象的？这里其实展现了很好的人性问题。封建时期腐败问题严重，当然很大一部分是制度问题，纯粹让人性背锅就过分了。古代官场上的腐败，腐败之广，腐败之难治等等，都体现了人性的普遍性，自利性，贪婪性，很多大臣已经做到了一人之下，万人之上，为什么还是要贪污，要知道人性的贪婪可不是那么容易满足的哦。官场上的权臣之术，勾心斗角，权利角逐，无一不是人性的外在表现，帝王有着自己的野心，大臣打着自己的算盘，你想着捞够名和利就功成身退，我想着要你鞠躬尽瘁死而后已。 人性还有一个很好的表现常常展现的淋漓尽致，那就是性欲望，性欲很显然的，是来自内在本源驱动的。但是人类文化的发展，需要对性欲加工，性欲毫无限制的表现很多人认为是趋于兽性的，我们需要爱情来掩盖性欲，我们需要夫妻制来限制性欲，这都是人类文化前进的需求。但人的性与本身至今还是如初，不论你是否已婚，是否有了恋人，当一个充满魅惑的女子在你面前，往往还是能够勾起你本能的性欲，但是道德准则，爱情准则，法律准则告诫你，好好收起你内心的性欲吧，你是有妻子的，有家室的人了。当然也还是会有人出问题，出轨的现象有不少，这里当然也不能全让人性背锅，也许感情变了，也许不爱了，但也许真的只是一时的性欲冲昏了头脑。 人性的复杂让我不可能用几段文字将其介绍完尽，回过头，来看看很多人喜欢考验人性结果最后自讨苦吃的结局。这种事还是少做比较好，来看看考验人性的本质，既然你想要考验人性，那么其实你多半想要考验的其实是人性的阴暗面，也就是常常被人们藏起来的那一面。我说人性是有善有恶的，但你既然指的是考验，我想你总不会是想看看对方到底还能有多善良，多忠诚，多完美无缺，你想考验一下对方会不会背叛你，对方会不会不为名利所动，对方会不会不为美色所动。你想知道他能不能抗住自己的人性阴暗面，而不是想看看对方人性的阳光面有多美好，多善良。另外既然你说了是考验，那么本质上带有欺骗性，你想要看看对方在尽可能没有约束的环境下会做出何样的的选择。绝大多数人是普通人，普通人的定力又是相当有限，有了钱，想要更多，这才是人性，而不是知足常乐，有了恋人，想要长得更漂亮，身材更火辣，更温柔的对象，这才是人性；已经步入小康，想要往更高阶级爬，这才是人性；胜利了而骄傲，失败了而气馁，这才是人性。当你选择了考验，发现对方不过如此你又能如何，再说既然是欺骗，对方做出了遵从本性的选择实在是情理之中，你只能失望而归。生活已经如此艰难，你又何苦再让对方再人性的挣扎面前多几分纠结，最后甚至闹得不欢而散，好好珍惜对方为了你已经克服了人性的阴暗面吧，何苦还要在用欺骗的手法逼出人性的另一面呢，人性如何，由人性的普遍性可知大家很多时候都是心知肚明的。当你想要考验对方的时候，麻烦你先认真想想自己的本性如何，当真在七情六欲面前能够自控自如，收放自如？]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[215数组中的第K个最大元素]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F215%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 示例 1:12输入: [3,2,1,5,6,4] 和 k = 2输出: 5 示例 2:12输入: [3,2,3,1,2,4,5,5,6] 和 k = 4输出: 4 说明: 你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。 分析：我觉得这道题很典型很重要，要吃透还是很花时间的，我要理解估计还得花不少时间，这道题虽然本身不是什么复杂算法或高级数据结构，但是很考验基本功。或许很多人面试的时候被问到过10万个数里面取第k大的数算法怎么设计，这种属于海量数据问题，思路又要变化下，你回答的时候肯定不可能直接给出一个算法就结束了，主要是如何针对不同场景和限制如何给出最优解，这就很考验基本功了。这里面最核心的就是考虑时间和内存的限制了。先不管海量数据的情景，回到这题，我们一般考虑哪些思路。 1 最直接的想法，先对整个数组进行排序，然后取第k大的数。至于如何排序，那内容就多了。比如快排，堆排，偷懒的人可能直接调用STL里的sort函数就过了，但面试不能这么干，另外估计选择快排比较多的，比竟快排平均花费时间最少。时间复杂度O(nlogn) 2 利用快速选择的想法。也就是快排的分治思想。取一个指针pivot 如果pivot == k，则正好找到了第k小的元素 如果pivot &gt; k，则第k小的元素存在于pivot左边 如果pivot &lt; k，则第k小的元素存在于pivot右边3 利用最小堆维护一个容量为k的最小堆，在建完堆后将取堆内第k个数即可。关于快速选择的算法可以参考下算法导论。1234567class Solution &#123;public: int findKthLargest(vector&lt;int&gt;&amp; nums, int k) &#123; sort(nums.rbegin(), nums.rend()); return nums[k - 1]; &#125;&#125;; 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123;public: int findKthLargest(vector&lt;int&gt;&amp; nums, int k) &#123; if (nums.size() == 0 || k &lt; 1 || k &gt; nums.size())&#123; return -1; &#125; return partition(nums, 0, nums.size() - 1, nums.size() - k); &#125; int partition(vector&lt;int&gt; &amp;nums, int start, int end, int k) &#123; if (start &gt;= end) &#123; return nums[k]; &#125; int left = start, right = end; int pivot = nums[(start + end) / 2]; while (left &lt;= right) &#123; while (left &lt;= right &amp;&amp; nums[left] &lt; pivot) &#123; left++; &#125; while (left &lt;= right &amp;&amp; nums[right] &gt; pivot) &#123; right--; &#125; if (left &lt;= right) &#123; swap(nums, left, right); left++; right--; &#125; &#125; if (k &lt;= right) &#123; return partition(nums, start, right, k); &#125; if (k &gt;= left) &#123; return partition(nums, left, end, k); &#125; return nums[k]; &#125; void swap(vector&lt;int&gt; &amp;nums, int i, int j) &#123; int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; &#125;&#125;; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; shuffle(nums); k = nums.length - k; int low = 0; int high = nums.length - 1; while(low &lt; high) &#123; int pivot = partition(nums, low, high); if(pivot &lt; k) &#123; low = pivot + 1; &#125; else if(pivot &gt; k) &#123; high = pivot - 1; &#125; else &#123; break; &#125; &#125; return nums[k]; &#125; //参考算法第四版 int partition(int[] a, int low, int high) &#123; int i = low; int j = high + 1; while(true) &#123; while(j &lt; high &amp;&amp; less(a[++i], a[low])); while(j &gt; low &amp;&amp; less(a[low], a[--j])); if(i &gt;= j) &#123; break; &#125; exch(a, i, j); &#125; exch(a, low, j); return j; &#125; void exch(int[] a, int i, int j) &#123; int temp = a[i]; a[i] = a[j]; a[j] = temp; &#125; boolean less(int v, int w) &#123; return v &lt; w; &#125; void shuffle(int a[]) &#123; //在partition前将数组顺序打乱，保证不出现最坏情况。 Random random = new Random(); for(int i = 1; i &lt; a.length; i++) &#123; int r = random.nextInt(i + 1); exch(a, i, r); &#125; &#125;&#125; 123456789101112class Solution &#123; public int findKthLargest(int[] nums, int k) &#123; PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;Integer&gt;(); for(int val : nums) &#123; pq.offer(val); if(pq.size() &gt; k) &#123; pq.poll(); &#125; &#125; return pq.peek(); &#125;&#125; 扩展问题： 输入是两个整数数组，他们任意两个数的和又可以组成一个数组，求这个和中前k个数怎么做？ 有两个序列A和B,A=(a1,a2,…,ak),B=(b1,b2,…,bk)，A和B都按升序排列。对于1&lt;=i,j&lt;=k，求k个最小的（ai+bj）。 给定一个数列a1,a2,a3,…,an和m个三元组表示的查询，对于每个查询(i，j，k)，输出ai，ai+1，…，aj的升序排列中第k个数。 如果情境改为10亿个数的topK问题，怎么想。最好想的，还是先全部排序，然后查找。最快的排序算法的时间复杂度一般为O（nlogn），如快速排序。但是如果计算机内存不够大，这种方法很容易受内存限制。 主要解决方案： 分治+Trie树 hash+小顶堆 局部淘汰法用一个容器保存前1万个树，然后将剩余的所有数字一一和容器内最小的数字比较，如果后续元素比容器内的最小元素大就删掉容器内的最小元素，并将该元素插入容器，最后遍历玩这1亿个数，得到最终结果。 分治将1亿个数据分成100份，每份100万个数据，找出每份数据中最大的1万个，最后在剩下的100 X 10000个数据。也就是100万个数据里面找前1万 哈希通过hash法，把这1亿个数字去重复，这样如果重复率很高的话，会减少很大的内存用量，从而缩小运算空间， 最小堆先读入前10000个数来创建大小为10000的小顶堆，建堆的时间复杂度为O(mlogm),然后遍历后续数字，并与堆顶数字(最小)进行比较，如果比堆顶的数字大，替换堆顶元素调整堆为小顶堆。这个过程直到1亿个数全部遍历完。然后按照中序遍历的方式输出当前堆中的所有1万个数字。该算法的时间复杂度为O(nmlogm),空间复杂度是常数。 几种应用情境 单机+单核+足够大内存 单机+多核+足够大内存 单机+单核+受限内存 多机+受限内存 扩展问题： 有10000000个记录，这些查询串的重复度比较高，如果除去重复后，不超过3000000个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。请统计最热门的10个查询串，要求使用的内存不能超过1GB。 有一个1GB大小的文件，里面的每一行是一个词，词的大小不超过16个字节，内存限制大小是1MB。返回频数最高的100个词。 提取某日访问网站次数最多的那个IP。 10亿个整数找出重复次数最多的100个整数。]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何为Nginx服务器配置ssl证书]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2F%E5%A6%82%E4%BD%95%E4%B8%BANginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[如何为Nginx服务器配置ssl证书&emsp;&emsp;我前不久才把自己的hexo博客部署到阿里云服务器上，买的学生机LAMP6.0.1,操作系统是centos，部署成功后就去申请备案，备案前期的资料审核还是快的，最后一步管局审核写着不超过20天，结果真的过了20天才发信息来审核通过…&emsp;&emsp;之前的审核过程中，你的域名是不能进行访问，只能通过IP地址访问网站。审核通过后你可以通过http进行访问,但是不能通过进行https:进行访问。所以我们先来看看这两者的区别。 http与https的基本定义HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。 HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。 http与https的区别HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，这就是https的诞生。阿里云官网的回答 HTTP是过去很长一段时间我们经常用到的一种传输协议。HTTP协议传输的数据都是未加密的，这就意味着用户填写的密码、账号、交易记录等机密信息都是明文，随时可能被泄露、窃取、篡改，从而被黑客加以利用，因此使用HTTP协议传输隐私信息非常不安全。 HTTPS是一种基于SSL协议的网站加密传输协议，网站安装SSL证书后，使用HTTPS加密协议访问，可激活客户端浏览器到网站服务器之间的SSL加密通道(SSL协议)，实现高强度双向加密传输，防止传输数据被泄露或篡改。简单讲，HTTPS=HTTP+SSL，即HTTPS是HTTP的安全版。 HTTPS加密、加密、及验证过程，如下图所示： 按照网上博客的资料，两者主要有以下具体区别：1、HTTPS更安全：HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议的信息明文传输安全； 2、HTTPS需要申请证书：HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费，费用大概与.com域名差不多，每年需要大约几十元的费用。而常见的HTTP协议则没有这一项； 3、端口不同：HTTP使用的是大家最常见的80端口，而HTTPS连接使用的是443端口； 4、状态不同：HTTP的连接很简单，是无状态的。而HTTPS协议是SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比HTTP协议安全； 为Nginx服务器配置ssl证书具体步骤一：购买并申请免费证书 前往阿里云域名控制台–&gt;进入域名管理–&gt;申请免费开启ssl证书这个过程比较快，一般申请成功后不需要多久证书就会发到你的证书控制台。在证书控制台下载Nginx版本证书，下载到本地的是一个压缩文件，解压后里面包含.pem文件是证书文件，.key文件是证书的私钥文件（申请证书时如果没有选择系统创建CSR，则没有该文件）。 二、进入服务器配置Nginx.conf按照官方文档，我们首先进入服务器的Nginx目录下，新建一个目录cert1mkdir cert 目录建完以后就需要把你之前下载的证书解压后的文件都拷贝到该目录下面。从本地拷贝文件到远程服务器可以用scp命令1scp -r /Users/study/xxxxx root@xxx:/etc/nginx/cert 我当时没注意，结果直接把整个文件夹给拷进去了，这样一来等会编辑文件路径的时候就不能忘了修改。拷贝结束后就可以编辑Nginx.conf文件进行配置。1vim nginx.conf 1234567891011121314151617server &#123; listen 443; server_name localhost; ssl on; root html; index index.html index.htm; ssl_certificate cert/a.pem; ssl_certificate_key cert/a.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125; 我主要提几个初次接触的小白容易碰到的问题： include /etc/nginx/default.d/*.conf;这一行不需要取消注释 server_name 可以改为你自己的域名 location/{}里面的root注意要填写你当时配置的项目位置。 配置好以后保存并退出。之后重新加载并启动nginx 123nginx -s reloadsystemctl restart nginx.service 这里很多人一开始可能会出现启动失败的错误，这时不要慌，我的建议是最好学会查看日志文件，看看命令行提示报了什么错。1nginx -t 我碰到过的有一种是属于80端口被某个进程占用，当时我是直接强制杀死该进程解决的。其他启动失败的原因多数是你nginx.conf文件配置出错了，比如如法错误，多了什么或少了什么。我当时启动成功后采用https方式访问域名，结果一直都是显示Nginx welcome的首页面，这里其实就是我之前提到过的location/{}里面写错了。当时还有点慌，因为我不记得我把自己的hexo放在哪里了，但还好，把Nginx.conf往上翻就能找到我以前配置过的hexo的root信息，直接复制下来即可。 到这里，证书配置基本就完成了。]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[普通人如何稳固对自我价值的认同感]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%99%AE%E9%80%9A%E4%BA%BA%E5%A6%82%E4%BD%95%E7%A8%B3%E5%9B%BA%E5%AF%B9%E8%87%AA%E6%88%91%E4%BB%B7%E5%80%BC%E7%9A%84%E8%AE%A4%E5%90%8C%E6%84%9F%2F</url>
    <content type="text"><![CDATA[普通人自我认同感很低怎么办？&emsp;&emsp;最近又到了清华本科特将评选的日子，看了他们的简历，众多网友耐不住了。纷纷调侃“神仙打架”又开始了。&emsp;&emsp;不过毕竟神仙们打架对我们这些普通人影响其实并不是很大，毕竟距离太远了（指实力上的距离）。大多数人自我认同感低，其实还是因为身边的人，再加上各种网文贩卖焦虑，比如之前的某某单车创始人企业被收购，90后已经实现财务自由。于是有了你已被同龄人抛弃了之类的…在目前经济为王的社会里，各种浮躁的心态层出不穷，不论是在校的学生，还是在企业里的白领，似乎无时无刻不在焦虑着。为什么焦虑，因为怀疑，因为对自我价值的怀疑，导致对自己所做的努力，所做的事情同样产生怀疑。&emsp;&emsp;首先焦虑是正常的，对自己有所怀疑也是正常的。但注意我标题注明的是你几乎已经怀疑过了度。也就是说你甚至已经有些不认同自我价值了。到了这一步，问题其实已然不小。我想写这篇随笔，自然不是因为空想就想到了这么个话题。而是我自己就属于迷茫，不自信的一类人中的一个典型。不知道解决方案，但是写这篇随笔可以让我反思，让我平视，然后再次让自己正常的融入到学习生活中去。能达到这一点就足够。&emsp;&emsp;不同年龄段的人烦恼各不相同，但心态缺失类似的。我正处于学生时代的后期了，倘若不读研，那么在学校的日子几乎按着指头数也能数过来了。学校里终究还只是个象牙塔，与社会的庞杂相比还是相对单纯的多了，至少涉及物质层面的问题会少很多。说撑了无非就是些各种奖学金，助学金之类的。当然，不排除很多人爱慕虚荣，喜欢攀比。许多人的焦虑可能更多来自于学习。学渣与学霸之间的爱恨情仇似乎是学生时代过不去的一道坎也。当你看到身边的某某学霸又拿了个竞赛大奖，某某保研到了国内C9高效，某某某还在纠结于几个知名大厂的offer该选哪个时，你可能会有些触动，你可能还不知道自己想干嘛，毕业了工作能找到吗？上述几个例子自然是少数人，但是当你看到自己的同学如此优秀，你应该怀抱什么样的心态？嫉妒？自卑？蔑视？这里其实已经体现了自我认同感偏低的外因，那就是身边的人光芒四射，你找不到自己了。&emsp;&emsp;有一点还是要明确。我是相信存在智商碾压这回事的。努力确实是个好东西，但是收获未必如你所期望的，毕竟这个过程还得乘上个系数，不然就不存在我在最开头提到的“神仙打架的事情”了。那么好，如今你可能和我一样有些焦虑，有些自我怀疑，害怕自己和身边的神仙差距越来越大，怎么处理。在此之前，你或许也还算努力吧，上课认真听讲，课后也会去翻翻书，你也为了目标有所付出。但是这离你想要的生活并未接近多少。再想想，要不随大流，一起开几把黑，打打王者，看看小说，让自己过得轻松点不行么？嘻嘻，当然没问题，而且要注意，打王者，看小说等等操作与我的问题并不矛盾，很简单，玩游戏就会影响自我认同感吗？没啥关系吧？刚刚前几天LG还拿了世界总决赛冠军呢，多少高校宿舍，朋友圈里的男同胞在自豪的呐喊。那么问题在哪呢？如果这么想，反正我这么菜，还不如上课开开黑，让自己过得舒坦点何乐而不为。这里有个前提，你默认了自己是个菜鸟(自黑的除外)，你从心底里认为了自己不是个优秀的人，即使努力了也是菜鸟一枚，这就有了问题。你并不怎么认同自己，导致你不愿为了些什么东西制定个小计划，小目标什么的，持之以恒的去做点什么。这就糟糕了。&emsp;&emsp;当你开始转变，开始有所努力，慢慢认同自己的时候，你可能一不当心就陷入了另一个误区。那就是自我欺骗。你开始渐渐相信自己其实也很优秀，自己的存在不说对很多人，但对身边的人也还有点价值。于是你开始努力学习，认真生活，你希望让自己变得更加优秀，你希望放大自己的价值。你可能每天都有在刷算法题，你可能每天都在看技术书学习。然而过了段时间，你发现你刷了很多题，但问你一个算法原理你却还是云里雾里，你看了很多课外书，但问你个知识点你却是两眼发呆。你以为每天都在努力，那么自然每天都在收获，结果却是在原地踏步。这就会让你产生盲目的自我认同感。我们拿阅读技术书举例。你读过这本书，并不代表你读懂了，你读懂一个技术点，并不代表你会用了，你已经能够实践了，能够用了，并不代表你已经会变通了，因为你不了解它的底层是什么原理，只知道代码这么写会产生这样的效果。&emsp;&emsp;当你发现了误区，你又开始慢慢转变，你希望让假懂慢慢变成真懂，你希望自己不是假优秀，而是确实肚子里有点货，，慢慢慢慢，可能情况就会有所好转，只要能一步步走上正轨，那么对自我价值的认同感自然也就慢慢上来了。到后面，或许会这么想，“神仙”们的确很厉害，但我在陆地上当个”将军”也不错，“马云、王健林”们的确有钱，而我虽然实现不了财务自由，但也勉强够用了。有勇气平视大家，才能交到好朋友哦！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[回顾自己部署hexo博客的血泪史]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E5%9B%9E%E9%A1%BE%E8%87%AA%E5%B7%B1%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%A1%80%E6%B3%AA%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[回顾下自己使用hexo博客踩过的坑 从一开始接触hexo博客到现在也过去好几个月了，在很多大佬看来搭建部署个个人博客是个很小儿科的事情，但对我这样一个菜鸟来说陆陆续续的几乎是采坑无数，现在回想起来都是泪啊，尤其是碰到一些bug，百度谷歌都找不到你想要的解答时，真的绝望的感觉。我这次虽然是坐个总结，但时间过去很久了，一些具体的bug，以及处理代码我就不写出来了，所以如果你想在这里看到一些实操干货的话，可能要失望了，毕竟我写的不是教程。 我使用hexo博客主要经历了如下几个阶段： 下载hexo，选择主题，编辑配置文件，部署到GitHub 想优化主题，自定义了一些css样式，加入了一些插件 后面换了电脑，想要在多终端协同管理hexo 纠结于GitHub pages 访问速度不给力，考虑CDN，最后还是想部署到阿里云服务器。 一开始和很多人一样活跃于博客园，ＣＳＤＮ等第三方博客平台，那是还是大学刚开学的时候吧，还不怎么写博客，到了后面偶尔也学一些大佬写点题解啥的，但也并不积极。到了大二，学的东西、课程越来越多，内容越积越多，但显而易见的是，我们不可能记住所有内容，如何有效的总结知识点，最好将书上的变成自己的，如何深入理解，如何提升自己的写作水平，总的来说，写博客还是一个不错的提升自己的方式。可这时，可能是想追求个性，想有一个自己的个人博客，当时主要就想到了ＷｏｒｄＰｒｅｓｓ和ｈｅｘｏ，但是用ＷｏｒｄＰｒｅｓｓ还是要买域名和云服务器，虽说阿里云和腾讯云等服务商对学生的优惠力度都很大，但我最初并不是很想花钱，于是选择了ｈｅｘｏ。选择ｈｅｘｏ其实也有很多好处，帮我入门了ｇｉｔ和ＧｉｔＨｕｂ。决定以后，边去网上找各种教程，下载ｎｏｄｅ、ｈｅｘｏ、ｎｅｘｔ主题等等，之后配置文件，然后ｈｅｘｏ ｎｅｗ ｐｏｓｔ，ｈｅｘｏ ｓ，测试效果，这个过程中，出过一些小问题，但最后都能够成功部署，只是有一个小ｂｕｇ。部署成果后，导航栏的几个主要图标无法正常显示，我一直不明白到底是哪里出了问题，因为每一步都是按照网上的教程操作的，谷歌了好久也没解决。当时没辙，我就去问了我们的ｗｅｂ老师，然而老师说他也没搞过这个，所以并不了解，但是还是给出了建议，因为大部分ｂｕｇ，９９％前人肯定都遇到过，可以先去谷歌百度搜，实在不行可以去知乎等社区提问。我后面就去知乎发表提问，并要求了几位内行人回答，期初也没得到我想要的解答，但几天过去，总算是等来了我想要的。问题其实很简单，还是配置文件上没有填正确，之所以没有填正确。有两个主要原因：１版本问题，２自己不注意看官方注释。首先网上给出的教程并没有问题，但我完全照搬就出了问题，因为他们针对的版本与我再用的版本并不一样，而恰好我的版本在导航栏配置哪里格式有所区别，导致最后图标无法正常显示。总之，倒腾了半天，最后总算还顺利，我发布了自己的第一篇博客并且成功部署到了ＧｉｔＨｕｂ，网页上也能正常浏览。 我当时选择的是ｎｅｘｔ主题，我很喜欢这样简约大方的风格，大量留白，不花里胡哨，同时也能够满足我的需求，我只想写写东西，这样的就已经足够。但是还不够，我想往里面加点东西，改点东西。这个过程，也很心累，因为我前端没好好学，而页面设计这方面涉及的主要都是前端的点。我修改了一些样式，字体，颜色什么的，接了网易云嵌入式链接，开头评论功能，增加友链，用七牛做图床等等，总之就是各种折腾。有时看了自己改的很不满意又得想办法改回去。这个过程有一点很重要，就是了解ｈｅｘｏ主题的整体框架配置，知道哪个文件夹，哪个文件主要是负责哪一块的！ 后面我买了台二手ＭＢＰ，想在这台电脑上也能管理发布ｈｅｘｏ博客，于是又想办法，在网上各种搜教程，如何在两台电脑上管理ｈｅｘｏ。最后的解决方案是利用ＧｉｔＨｕｂ分支，新建一个分支，然后将原电脑上所需的本地文件拷到新电脑，在新电脑上把内容ｐｕｓｈ到相应分支。这个过程也很不容易，主要是我不怎么理解ＧｉｔＨｕｂ的分支操作，哎，但还算好吧，没有花太多时间。 又过了一段时间，随之我发布的博客内容越来越多，而ＧｉｔＨｕｂ ｐａｇｅｓ的访问速度又不稳定，有时还很令人纠结，这我就受不了了，我想着怎么才能加速访问，比较ＧｉｔＨｕｂ是国外的服务器，虽然免费给你一定空间使用，但访问速度我真的不满意。网上有说把博客再部署到ＣＯＤｉｎｇ上面的，也有说用ＣＤＮ的，我考虑过ＣＤＮ，当时选的是加速乐，但是生效要很久，我也没测试效果如何。最后想着趁现在自己还是学生，干脆去阿里云买个云服务器得了。服务器买了以后，问题又来了，如何将本地博客迁移到云服务器上了，这个过程有时让我掉了一堆头发。一开始就出了问题，按照网上的教程，我装好ｎｏｄｅ，ｇｉｔ，ｈｅｘｏ，Ｎｇｉｎｘ等等所需的软件，但是当我启动Ｎｇｉｎｘ的时候一直出错，无法启动，最初人物是自己在编辑．ｃｏｎｆ文件的时候可能哪里多了分号点号啥的，一直没搞清楚问题是啥，到后面干脆重置了虚拟机，将各种软件重新装了一遍。这是再次启动Ｎｇｉｎｘ，还是启动不了，真是崩溃的心都有了，没辙，只好按照命令行的提示，查看日志提示是哪里有ｂｕｇ，你别说，我这种菜鸟一开始看提示都还不大看得懂，只好又将提示代码复制到谷歌搜解答，但是这还不能马上搜到，因为有些时候一段提示信息可能会对应一堆可能的ｂｕｇ，但我这次还算运气可以吧。最后的结论是我的服务器上８０端口ｈｔｔｐｄ被占用，也就是说Ａｐａｃｈｅ和Ｎｇｉｎｘ不能同时启用吧，之后便停用８０端口，然后重新加载Ｎｇｉｎｘ，在游览器输入服务器ＩＰ，总算是见到了ｗｅｌｃｏｍｅ的页面了，松了一口气呀。之后要做的就是新建ｇｉｔ库，配置ｇｉｔｈｏｏｋｓ，配置Ｎｇｉｎｘ的ｓｅｒｖｅｒ的ｌｏｃａｔｉｏｎ等等，然后修改本地ｈｅｘｏ的．ｃｏｎｆｉｇ文件，然后将博客部署到服务器上。到这里你在输入ＩＰ到游览器便能够看到你的博客了。 上面就是我倒腾ｈｅｘｏ的主要历程，但是还有个问题要讲下，那就是域名，域名我很早就买了，也是在阿里云上买的，当时就是解析到了ＧｉｔＨｕｂ的ＸＸＸ．ｇｉｔｈｕｂ．ｉｏ，这样输入域名也能访问我的博客，另外由于访问的是国外服务器，所以我的域名也没有备案，换句话说，其实我也备不了案，因为我没有买服务器，也就没有备案服务号。后来我买了服务器就想着干脆也去备案下吧．．结果一开始我就觉得好烦，得我自己去打印核验单邮寄到贵州，还得用阿里云的幕布拍照，总觉得麻烦。现在还在备案中．．．]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[11. 盛最多水的容器]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器，且 n 的值至少为 2。 示例: 输入: [1,8,6,2,5,4,8,3,7]输出: 49 分析：考虑两种思路解法一：暴力法用两重for循环，考虑没对可能的线段组合并每次取较大值。时间复杂度为O(n^2),要超时解法二：双指针定义两个指针，一个指向开头，一个指向结尾，每次更新最大面积的时候，将指向较短线段的指针向着指向较长线段指针的方向移动一步，因为如果是将指向较长线段的指针往内侧移的话，矩形区域的面积还是要受制于较短的线段。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//// maxArea11.cpp// LeetCode//// Created by a on 2018/10/25.// Copyright © 2018 Leetcode. All rights reserved.//#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;int maxArea(vector&lt;int&gt;&amp; height) &#123; //时间复杂度O(n^2),空间复杂度O(1) int maxarea = 0; for(int i = 0; i &lt; height.size(); i++) &#123; for(int j = 0; j &lt; height.size(); j++) &#123; maxarea = max(maxarea, min(height[i], height[j]) * (j - i)); &#125; &#125; return maxarea;&#125;int maxArea2(vector&lt;int&gt;&amp; height) &#123; //时间复杂度O(n),空间复杂度O(1) int maxarea = 0; int left = 0; int right = height.size() - 1; while(left &lt; right) &#123; maxarea = max(maxarea, min(height[left], height[right] )* (right - left));; if(height[left] &lt; height[right]) &#123; left++; &#125; else &#123; right--; &#125; &#125; return maxarea; &#125;int main()&#123; vector&lt;int&gt; height; int n, x; cin &gt;&gt; n; for(int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; x; height.push_back(x); &#125; int maxarea1 = maxArea(height); int maxarea2 = maxArea2(height); cout&lt;&lt; maxarea1 &lt;&lt; " " &lt;&lt; maxarea2 &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java容器概述]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2FJava%E5%AE%B9%E5%99%A8%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Java容器(Container)什么是容器？容器可以管理对象的生命周期、对象与对象之间的依赖关系。直白点说容器就是一段Java程序，能够帮助你管理对象间的关系，而不需要你自行编写程序处理。维基百科定义： 在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。 Java内部的容器类Java内部的容器类主要分为两类：Collection(集合)与Map(图) Collection Set HashSet 基于哈希表实现，底层使用HashMap来保存所有元素。 不能保证迭代顺序 允许使用null元素 LinkedHashSet LinkedHashSet底层使用LinkedHashMap来保存所有元素，它继承于HashSet。 内部使用双向链表维护插入顺序。 TreeSet 基于（TreeMap）红黑树实现 TreeSet非同步，线程不安全 TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。 List ArrayList 实现 List 接口、底层使用数组保存所有元素。 相当于动态数组，支持动态扩容。 不同步 vector Vector 可以实现可增长的对象数组。 Vector 实现 List 接口，继承 AbstractList 类，同时还实现RandmoAccess 接口，Cloneable 接口 Vector 是线程安全的 LinkedListLinkedList 是基于链表实现的（通过名字也能区分开来），所以它的插入和删除操作比 ArrayList 更加高效。但也是由于其为基于链表的，所以随机访问的效率要比 ArrayList 差。 Queue LinkedList可以用于实现双向队列 PriorityQueue通过二叉小顶堆实现，可以用一棵完全二叉树表示。可以用于实现优先队列。优先队列的作用是能保证每次取出的元素都是队列中权值最小的（Java的优先队列每次取最小元素，C++的优先队列每次取最大元素）。 Map(用于映射（键值对）问题处理) HashMap HashMap根据键的HashCode来实现，访问速度较快，遍历顺序并不确定。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。 HashMap线程不安全，也就是说任意时刻可以有多个线程同时写HashMap，所以可能会导致数据的不一致。 如何确保线程安全？可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。 HashTable HashTable是遗留类，多数功能与HashMap类似，继承自Dictionary类。 HashTable是线程安全的。也就是说任意时刻只有一个线程能够写HashTable。 HashTable的并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。 LinkedHashMap基于哈希表和链表实现，借助双向链表确保迭代顺序是插入的顺序。 TreeMap 基于红黑树实现 默认按照键值得升序进行排序。 在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时抛出java.lang.ClassCastException类型的异常。]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[24. 两两交换链表中的节点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 示例:1给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3. 说明: 你的算法只能使用常数的额外空间。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 分析：解法一：题目要求两两链表中的结点，比较好想得应该还是直接遍历整个链表list，每次swap(list-&gt;val,list-&gt;next-&gt;val),但是题目明确要求了不能只是单纯的改变结点的数据域，所以上述方法尽管输出一样，但并不符合要求。解法二：首先定义一个dummy哑结点指向head作为首结点来辅助操作。之后定义一个current指向给定链表，定义一个前去指针pre指向dummy，定义一个临时链表temp储存每次要进行操作的两个结点。例如给定链表{1,2,3,4},先让temp指向3，然后分割{1,2}和{3,4},让2的后继指针指向1，之后让dummy指向2，让1指向3，最后让pre指向1，current指向3继续遍历。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879//// swapNodes.cpp// LeetCode//// Created by a on 2018/10/19.// Copyright © 2018 Leetcode. All rights reserved.//#include &lt;cstdio&gt;#include &lt;iostream&gt;#include &lt;cstdlib&gt;using namespace std;struct ListNode &#123; int val; ListNode *next; ListNode(int x) : val(x), next(NULL) &#123; &#125;&#125;;ListNode* creat( int Array[]) &#123; ListNode *p, *pre, *head; head = new ListNode(0); head-&gt;next = NULL; pre = head; for(int i = 0; i &lt; 5; i++) &#123; p = new ListNode(0); p-&gt;val = Array[i]; p-&gt;next = NULL; pre-&gt;next = p; pre = p; &#125; return head;&#125;ListNode* swapPairs( ListNode* head ) &#123; if(!head || !head-&gt;next) &#123; return NULL; &#125; ListNode* p = head; while(p &amp;&amp; p-&gt;next) &#123; swap(p-&gt;val, p-&gt;next-&gt;val); p = p-&gt;next-&gt;next; &#125; return head;&#125;ListNode* swapPairs2(ListNode* head) &#123; ListNode* dummy = new ListNode(0); dummy-&gt;next = head; ListNode* current = head; ListNode* pre = dummy; ListNode* temp; while(current &amp;&amp; current-&gt;next) &#123; temp = current-&gt;next-&gt;next; current-&gt;next-&gt;next = current; pre-&gt;next = current-&gt;next; current-&gt;next = temp; pre = current; current = current-&gt;next; &#125; return dummy-&gt;next;&#125;int main()&#123; int Array[5] = &#123;1, 2, 3, 4, 5&#125;; ListNode* head1 = creat(Array); ListNode* head2 = creat(Array); ListNode* L = swapPairs(head1); //L = L-&gt;next; ListNode* res = swapPairs2(head2); while(L != NULL) &#123; printf("%d ", L-&gt;val); L = L-&gt;next; &#125; printf("\n"); while(res != NULL) &#123; printf("%d ", res-&gt;val); res = res-&gt;next; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[支持推理小说家紫金陈]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E6%94%AF%E6%8C%81%E6%8E%A8%E7%90%86%E5%B0%8F%E8%AF%B4%E5%AE%B6%E7%B4%AB%E9%87%91%E9%99%88%2F</url>
    <content type="text"><![CDATA[紫金陈主要作品 《推理之王1：无证之罪》（2014年实体书出版） 《推理之王2：坏小孩》（2014年实体书出版） 《推理之王3：长夜难明》（2017年出版） 《浙大夜惊魂》（2010年出版改名《禁忌之地》） 《谋杀官员1》（2012年） 《谋杀官员2：化工女王的逆袭》（2012年） 《谋杀官员3：物理教师的时空诡计》（2013年1月更新完） 《谋杀官员4：代上帝之手(完结)》（2013年） 因为我自己主要就阅读了他的上述作品，所以其他书没有全都一一例举。 一提到推理小说，估计很多人又想到了我们的邻居－－岛国日本，推理小说早期兴起于欧美，后来在日本也有了极大的发展。平时我们读的很多推理或者侦探小说相比大多都是欧美或者日本的作品比较多吧。著名的作者比如美国的埃德加·爱伦·坡，英国的阿加莎·克里斯蒂，日本的江川户乱步、东野圭吾等都是推理小说界的大神，不仅高产还高质量，我已开始读的也是日本的推理小说比较多。大一看了几本东野大神的作品后无意中接触到了国内紫金陈写的《无证之罪》，顿时来了兴趣，陆陆续续的也看了他的一些代表作，就我个人而言还是蛮喜欢他的推理作品，虽然不像有些大神那么高产，也不是每一本都布局十分巧妙，但吸引人的点还是很多的。 我已开始接触《无证之罪》后就顺便看完了他的推理之王系列的另外两本，《坏小孩》与《长夜难明》，之后又看了他较早的几部作品，从《浙大惊魂夜》（后来再版改名为《禁忌之地》）到《谋杀官员系列》，可以看出作者在每部作品的布局构思上都花了很大心思。紫金陈本名陈徐，毕业于浙江大学，主要走的是社会派本格推理路线，比如《谋杀官员系列》就是他的本格推理代表作。他的作品里的主要人物背景很多也是浙大毕业的校友，至于社会背景大多在以浙江各个市为模板进行创作。《无证之罪》很多人会拿来与东野圭吾的《嫌疑人Ｘ的献身》进行对比，认为在情节完善和人物塑造等方面还有很多不足之处，作者融入中国社会的背景，但同样是一位高智商大神为了帮助失误犯了罪的可怜人摆脱警察的故事。《坏小孩》的故事我大都忘了，比较早看的一本，其实说起来推理之王系列我最推崇的是《长夜难明》，他的说我也就这本买过实体说。不过说起来《长夜难明》或许并算不上推理吧，情节也不悬疑，只能说属于社会派推理比较好，但反映的社会问题还是很沉重的，虽然是小说，但现实生活中有没有类似的案情或者更为残酷的事实恐怕很难说，或许黑暗一直存在只是没有笼罩在你身上罢了。很多人应该看过韩国的一部电影《熔炉》，内容很沉重，在韩国法律界社会界都引起了极大的反响。《长夜难明》反应了类似的社会法律问题，书中直至结局也没能揪出幕后大老虎，尽管已经有人为此献出了生命的代价，但是在权利的悬殊面前你很难立马冲破黑暗。甚至很有可能一味的付出却给自己带来了毁灭的报复。总感觉现实中这么正义凛然的人很少，大家内心都有自己的想法，为什么要为了不相干的人去得罪人，做吃力不讨好的事？但如果人人都这么想，那些弱势群体就一直被压榨下去吗？ 《谋杀官员系列》也不是每本都很精彩，有很多欠缺的地方还是明显的，尽管作为推理小说，或许不是非得文笔一流，但文笔不足的间接影响就是导致了人物造型，性格塑造方面不够鲜活，包括一些悬疑的点也很牵强。另外第二部和第四部都写到了屌丝对女神的爱，我就想说作者就不能放过广大屌丝吗，另外我想着尽管矮穷丑，但好歹是浙大高材生至于这么自卑吗，还是真的爱得真切，无法自拔。第四部结尾的有点牵强，竟然又扯出来了同性恋，但好在不是个完美的结尾，最后提到女神骆慧慧的孩子既不是李卫平也不是王红名的时候，估计很多人也蒙了，人性的复杂也只在这种时刻才能感受到。第二部又是一个单相思的家伙为了自己喜欢的人不惜付出一切为她犯罪，书名《化工女王的逆袭》估计误导了很多人，一直以为所谓的“同伙”就是化工女甘佳宁，结果这只是个幌子，但是“同伙”这个点设计的还是比较好的。另外这部反映的官场腐败等政治问题也挺厉害的，官场的腐败从上到下，从一手遮天的大老虎到仗势欺人的看家狗都让人不寒而栗，权利没有约束是很恐怖的。 我一般看这种推理小说并不怎么较真，不会太计较情节上的漏洞，除非是太明显的，毕竟自己只是个门外汉，娱乐为主哈哈。上述几本书看完倒也没花掉我多少时间，想想自己书架上的几本技术方面的恐龙📚，我内心就拔凉拔凉了，若是真想一本本从头看到尾，我又能吸收到少呢．．．]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>小说</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[137. 只出现一次的数字 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F137-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-II%2F</url>
    <content type="text"><![CDATA[给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 示例 1:12输入: [2,2,3,2]输出: 3 示例 2:12输入: [0,1,0,1,0,1,99]输出: 99 解法一：创建一个长度为sizeof(int)的数组count[sizeof(int)]，用count[i]来表示在i位出现的1的次数，如果count[i]是3的倍数，跳过，否则，取出该位。时间复杂度O(n),空间复杂度O(1) 12345678910111213141516171819class Solution &#123;public: int singleNumber(vector&lt;int&gt;&amp; nums) &#123; int w = sizeof(int) * 8; int count[w]; fill_n(&amp;count[0], w, 0); for(int i = 0; i &lt; nums.size(); i++) &#123; for(int j = 0; j &lt; w; j++) &#123; count[j] += (nums[i] &gt;&gt; j) &amp; 1; count[j] %= 3; &#125; &#125; int res = 0; for(int i = 0; i &lt; w; i++) &#123; res += count[i] &lt;&lt; i; &#125; return res; &#125;&#125;; 解法二：用二进制模拟三进制运算。用one记录到当前处理的元素为止，二进制1出现“1次”（mod 3 之后的 1）的有哪些二进制位；用two记录到当前计算的变量为止，二进制1出现“2次”（mod 3 之后的 2）的有哪些二进制位。当one和two中的某一位同时为1时表示该二进制位上1出现了3次，此时需要清零。时间复杂度O(n),空间复杂度O(1)1234567891011121314class Solution &#123;public: int singleNumber(vector&lt;int&gt;&amp; nums) &#123; int one = 0, two = 0, three = 0; for(auto i : nums) &#123; two |= (one &amp; i); one ^= i; three = ~(one &amp; two); one &amp;= three; two &amp;= three; &#125; return one; &#125;&#125;; 解法三：我们把数组中数字的每一位累加起来对3取余，剩下的结果就是那个单独数组该位上的数字.用二进制表示的过程为00-&gt;01-&gt;10-&gt;00,用a 和 b来表示一开始的状态的十位和个位：b = b ^ r &amp; ~a;a = a ^ r &amp; ~b;刚开始的时候，a和b都是0，当遇到数字1的时候，b更新为1，a更新为0，就是01的状态；再次遇到1的时候，b更新为0，a更新为1，就是10的状态；再次遇到1的时候，b更新为0，a更新为0，就是00的状态，相当于重置了；所以最后的结果保存在b中。1234567891011class Solution &#123;public: int singleNumber(vector&lt;int&gt;&amp; nums) &#123; int a = 0, b = 0; for (int i = 0; i &lt; nums.size(); ++i) &#123; b = (b ^ nums[i]) &amp; ~a; a = (a ^ nums[i]) &amp; ~b; &#125; return b; &#125;&#125;; 参考：https://soulmachine.gitbooks.io/algorithm-essentials/java/bitwise-operations/single-number-ii.html https://leetcode.com/problems/single-number-ii/discuss/43294/challenge-me-thx]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谈谈一部争议较大的日漫《缘之空》]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E8%B0%88%E8%B0%88%E4%B8%80%E9%83%A8%E4%BA%89%E8%AE%AE%E8%BE%83%E5%A4%A7%E7%9A%84%E6%97%A5%E6%BC%AB%E3%80%8A%E7%BC%98%E4%B9%8B%E7%A9%BA%E3%80%8B%2F</url>
    <content type="text"><![CDATA[我先给出自己的主要观点： 我不认为悠是渣男，恰恰相反，整部番里我觉得悠才是内心最纠结的可怜人。 我不支持兄妹乱伦的爱情，但我相信可能会有这样真实的感情。 我支持平行世界的剧情设计。 对我而言这部番吸引我的是BGM。 我不赞同有人纯粹拿这部番当里番来看，我不觉得这是部里番。 我不相信柏拉图式的爱情，完全没有性的爱情我觉得不存在。 日本动漫产业一直以来都是其他国家难以匹敌的一块，我平时看的动漫虽然不能说很少吧，但多是完全谈不上，你可能无法想象一些宅男腐女追番有多么疯狂，其实在其他方面我也是这种状况，看书，看电影，似乎各种都有所投入，但都只是了解很少一部分。动漫能吸引人主要有几个点：剧情、画风、配音、ＢＧＭ。有时我是真佩服那些声优和作曲家，明明剧情狗血的要命，也能让我感动起来．．．我这次想写关于缘之空的故事，其实是因为三轮学创作的ｂｇｍ太好听了（×……————……×） 嘻嘻…… 缘之空算是一部比较早期的作品了，是根据游戏改变过来的。当初游戏本就是分线路展开剧情的。所以后面改编成动画采用平行世界也没什么好奇怪的。游戏里主要有５条线，分别是宆悠线（也就是争议最大的兄妹线）、奈绪线、一叶线、悠瑛线、班长线。不过动漫里好像把班长那条线去掉了，只讲述了４条线。首先我们先来科普下平行世界的问题，我是在看之前就已经了解了剧情的构造，所以很多地方并不会觉得很奇怪或是难以理解。百度百科的定义如下：多元宇宙是一个理论上的无限个或有限个可能的宇宙的集合，包括了一切存在和可能存在的事物：所有的空间、时间、物质、能量以及描述它们的物理定律和物理常数。多元宇宙所包含的各个宇宙被称为平行宇宙（parallel universes）。好吧说实话我没怎么看明白，平行世界是否存在我也不知道，我这种物理渣渣还是就不要太纠结于这个了，一部动漫而已，太较真吃不消。按照字面意思来理解，缘之空其实就是讲述了男主悠在不同宇宙和一群相同的人之间发生的不同的故事。有和穹之间的故事，和奈绪之间的故事，和一叶之间的故事，还有瑛。 也许是改编成动漫时衔接的处理有些瑕疵，很多人认为悠是个渣男，脚踩都不止两只船了，可其实按照剧情设计，悠并没有脚踩两只船，他有同时在和两个女生交往吗？他有花心般的欺骗吗？和其他几个女生的交集更像是普通中学少男少女的青涩的爱情，只是到后来悠才意识的自己真正喜欢的是谁。穹妹给人的感觉有种红楼梦里林黛玉的影子，柔弱，多病，少话，内心却又感情丰富，有脾气有个性。这双胞胎兄妹的父母死于交通事故，两人相依为命，一起来到了祖父曾经生活过的奥木尔町生活，也是在这里发生了一系列的故事。 穹悠线饱受争议，就是因为双胞胎兄妹之间产生了情愫并甚至接受这样的情感。现实生活中包括我自己，想必很多人也是一样，很难想象或者说理解亲兄妹之间怎么能萌生出爱情的火花呢，从小一起长大。不知道你们有没有了解过韦斯特马效应，韦斯特马效应由芬兰人类学家爱德华·韦斯特马克在他的著作《The History of Human Marriage》（人类婚姻史）中提出，指出两个早年共同长大的儿童在成年后通常不会对彼此产生性吸引力：有血缘关系者也会存在亲缘监测机制（亲缘监测机制异常除外，三代以内越近越明显。）来保护；无血缘关系者由于生活在一起或可不会成年后产生性吸引；出生后六年的成长环境是一个关键时间点，其间生活在一起二者性吸引几率全会大大降低。但穹和悠却并不满足韦斯特马效应的前提，之前穹生病，兄妹二人长时间并未生活在一起，但突然间双亲离世，两人再次相遇，也许真有可能产生喜欢的情愫也说不定。但是兄妹恋终究是不被人认可的，所以可以感受悠的挣扎，悠和穹不一样，穹什么都不在乎，在乎的只有悠而已，悠作为哥哥，需要负起的应当是父亲般的责任，但却喜欢上了自己的妹妹，说出来谁能接受，不光会被人以异样的眼光看待，也没有做好一个哥哥的本分。动漫最后的处理是两人从湖中死里逃生最后一起移居他乡。我不知道这样的结局如何，如何确实互相爱慕，即使是兄妹，那么该不该在一起呢？我不知道，我不支持乱伦恋，但真实的感情并不能由外力改变，这是我相信的。 最后关于尺度问题，的确，这部动漫里有一些暴露的镜头，但我个人觉得并不过分，如果是爱情的话，这本也就是爱情的一部分，何必去特意躲闪。我大一暑假花了很长时间看完《金瓶梅》，好吧，我没那么纯洁，做不到看金瓶梅看出圣经来，但还是不否认这是一部伟大的文化作品，很多人认为金瓶梅的格调不如红楼梦，红楼梦当之无愧是我国古典文学的巅峰，但如果仅仅只是因为一个重点讲情、一个重点讲欲来评判高低那就太不公平了。缘之空很多人还是无法接受的，被禁我觉得也正常，有时也不能一天到晚黑广电，从国家层面来说，还是需要宣扬社会主义核心价值观比较好~~]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19. 删除链表的倒数第N个节点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例：123给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. 说明： 给定的 n 保证是有效的。 进阶： 你能尝试使用一趟扫描实现吗？ 分析：删除倒数第n个链表结点，两种想法。解法一：正向扫描，删除倒数第n个结点，就是删除第(len - n + 1)个结点（len 为链表长度）,可以先扫描整个链表，求出链表长度，然后再次扫描链表，找到len - n 的位置，最后删除该位置的后一个结点。 解法二：双指针，定义两个指针都指向链表首结点，第一个指针先走n + 1步，之后两个指针同步前进，当第一个指针到达表尾时，第二个指针指向的就是要删除的倒数第n个结点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package leetcode;class ListNode &#123; int val; ListNode next; ListNode(int x) &#123; val = x; &#125;&#125;public class RemoveNthFromEnd &#123; static ListNode head = new ListNode(0); public static void main(String[] args) &#123; // TODO Auto-generated method stub for(int i = 1; i &lt;= 5; i++) &#123; addVal(i); &#125; //ListNode res = removeNth(head, 3); ListNode res = removeNth2(head, 3); while(res != null) &#123; System.out.print(res.val + " "); res = res.next; &#125; System.out.print("\n"); &#125; public static void addVal(int val) &#123; ListNode node = new ListNode(val); ListNode current = head; while(current.next != null) &#123; current = current.next; &#125; current.next = node; &#125; public static ListNode removeNth(ListNode head, int n) &#123; // 时间复杂度O(n)，空间复杂度O(1） ListNode dummy = new ListNode(0); dummy.next = head; ListNode first = dummy; ListNode second = dummy; for(int i = 0; i &lt; n + 1; i++) &#123; first = first.next; &#125; while(first != null) &#123; first = first.next; second = second.next; &#125; second.next = second.next.next; return dummy.next; &#125; public static ListNode removeNth2(ListNode head, int n) &#123; // 时间复杂度O(n),空间复杂度O(1) ListNode dummy = new ListNode(0); dummy.next = head; int len = 0; ListNode first = head; while(first != null) &#123; len++; first = first.next; &#125; len = len - n; first = dummy; while(len &gt; 0) &#123; len--; first = first.next; &#125; first.next = first.next.next; return dummy.next; &#125;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Windows和Mac平台上协同管理hexo博客]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2F%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E5%92%8CMac%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%8D%8F%E5%90%8C%E7%AE%A1%E7%90%86hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[如何在多台电脑协同管理hexo博客我很早就想搞个个人博客，其实写博客主要有3种选择： 1 在第三方平台注册账号，直接在平台上写作并发布，例如博客圆，CSDN，新浪，网易等,这种方式最简单方便。 2 自己搭建博客。这种看个人需求，能力强的，可以完全前后端都自己代码实现，但大多数人一般也是直接采用模版的，简单省事。不过自己搭建的话需要去云服务商购买域名和云服务器，服务器的话学生优惠还是比较大的，阿里云，腾讯云上面都能买。 3 利用GitHub pages和hexo搭建静态博客，本地编写md文件，然后部署到github转化为html，相当于是托管于github。这种方法至少不用花钱买服务器，当然，你要是想绑定域名的话也可以照样去云服务商买一个，然后绑定到你的XXX.github.io上面。 现在假设你已经在之前的Windows平台上搭好了hexo博客，并且能够正常部署运行。但因为需要，你要在另一台Mac系统的电脑上也能够管理你的hexo博客，可以利用Git分支来实现。 在另一设备上管理博客 配置好环境 安装Node.js 安装Git 安装hexonode.js可以直接去官网下载相应的匹配版本，Git的话，如果你的电脑安装是Mac并且安装了xcode，那么便不用再重新安装，xcode里便已经装有Git。 配置GitHub的SSH key在新电脑上使用GitHub都需要先进行SSH key的配置，来获得GitHub的权限，以便本地和服务器之间数据的连接。 先测试你的电脑上是否已有ssh密钥,打开终端输入：1cd ~/.ssh 如果没有，则进入下一步，生成ssh key1ssh-keygen -t rsa -C &quot;邮件地址&quot; 将你的ssh key复制到GitHub上，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将ssh key复制进去。 最后测试你的ssh是否配置成功1ssh -T git@github.com 具体如何配置hexo博客可以参考：使用hexo快速搭建个人博客 创建分支 进入你的username.github.io仓库主要，新建一个分支，名字可以自定义，下面以hexo为例： 切换到hexo分支，并将该分支设置为默认分支后并保存。 上传配置文件到GitHub 克隆hexo分支将之前新建的分支克隆到本地1git clone -b hexo git@github.com/username/username.github.io 查看当前所在分支是否为新建的hexo分支1git branch 上传部署文件 将你原先电脑里的配置文件拷贝到你的username.github.io文件目录下，这里的拷贝有几个文件或文件夹是必须要拷贝的：拷贝文件时要注意如果你的themes主题文件下下面有.git文件夹，要先将.git文件夹删除，否则主题文件会上传失败，一个GitHub仓库只能有一个.git 12345_config.yml package.json scaffolds/ source/ themes/ 拷贝完以后执行npm install 安装必要的组件 执行如下命令更新分支： 123git add .git commit -m &quot;add new files&quot;git push 测试是否成功可以执行hexo new “post”,hexo s预览是否有效，之后便用hexo d -g上传部署。 使用Mac系统操作hexo命令是要求在最前面加上sudo，否则会报错，提示你权限不足。 master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来普陀山拜观音了]]></title>
    <url>%2F%E9%9A%8F%E7%AC%94%2F%E6%9D%A5%E6%99%AE%E9%99%80%E5%B1%B1%E6%8B%9C%E8%A7%82%E9%9F%B3%E4%BA%86%2F</url>
    <content type="text"><![CDATA[鉴于中国国情，一直以来我都是十分抵触国庆出游的，原因你懂得。但这次可能有点坐不住了，我姐说要带母亲去泰国旅游，家里没了人，我咋办呀～不行，我也得出去玩，我想了想，恩，爬山挺不错的，我喜欢。然后就去找高中同学商量着一起国庆去爬山。爬什么山呢，浙江附近有名的山还是有不少的，黄山，三清山，庐山，雁荡山．．．这些我都考虑过，后来同学提了句普陀山怎么样，我立马便决定，好，就去普陀山，顺便看看大海，拜拜观音。从后面看来，我的决定还是比较正确的。 那时还没到中秋，我们俩就提前把去舟山的车票，民宿订好了，民宿订的是个混合旅馆，住两晚。国庆景区人山人海，这是一直被人诟病的事实，但我这次总体体验还行，天公作美呀，这两天天气出奇的好，温度适宜，海风凉爽。起初我还有点担心台风的问题，但最后收到预警通知时我们都已经准备返程了。你说运气好不好。当然唯一有点遗憾的就是没去东极岛，我只知道这是韩寒拍后会无期的取景地，中国的第一缕阳光照射的地方，不过东极岛本就不在我的计划范围内，真说遗憾到也谈不上，毕竟是个小岛，而且也远，票都不一定抢的到。 ２号一大早起床，我就屁颠屁颠坐地铁来到杭州东站等大巴，坐着大巴离开杭州后的高速路上都很顺水，没发生什么堵车的问题，一直到了宁波镇海那边，速度有所减缓，真正发生堵车的地方就是在金塘大桥。这座桥是通往舟山的关键道路，也是图中碰到的第一座并且也是最长的一座跨海大桥。当然，比杭州湾跨海大桥要小点。看到大海以后最大的感慨就是为何如此混黄不清，与我心目中蔚蓝色大海相去甚远。但稍微想想，浙江的海应该都是灰黄灰黄的吧，不知道是因为地处钱塘江入海口还是其他原因。但浩瀚的气势还是有的，和我看惯了的千岛湖、西湖完全就是两种风格。进入舟山以后车子就开的较慢了，一路时停时走的来到了舟山普陀区，我当时也不记得自己买了到哪里的车票，结果就一路坐着过了观音大桥来到了朱家尖慈航广场，我一看，这哪行，我们定的民宿是在普陀区大岭下呀，然后有坐上车回程，司机带我们到彩虹广场放我们下来，我就顺便吃了饭再去民宿。 到了民宿后，我们结识了这次出行的第一位室友，聊了几句，发现他和我们一样也是大三学生，是个高高瘦瘦还有些帅气的萧山小伙子。我看到脖子上手臂上通红通红的，估计是被晒成这样的，当时他刚好玩累了回来，一脸虚脱样。他和我们不一样，我们是第一次来舟山，去普陀山拜观音的，他可不是第一次来了，他有两个大学同学是舟山人，这次放假就顺便陪他们来舟山玩两天再回家。到了傍晚，我们都没怎么饿，我就和同学商量着晚上去哪玩，这时萧山小哥说：“听说沈家门那边的鲁家峙大桥夜景挺不错的，我们一起去逛逛吧”，我们也没其他主意，于是在手机地图上查了查鲁家峙大桥的位置，写着距离２.４公里，我们一看，那也没多少路吗，直接走过去就得了。从大岭下出发，我们三人没走多久就遇到了个山洞，没想到这山洞出乎意料的长，我们三一前一后的排成一列，足足走了将近２０分钟才走到另一头，边上时不时几辆电瓶车飞驰而过，让我们老老实实贴着边缘走着，还真是不容易。没多久我们就来到了鲁家峙大桥桥底，上桥还得走个楼梯，从桥上往下望还是挺高的，桥下就是大海，这要掉下去可不是开玩笑的，我也不敢走太边上。我们在桥上赏了赏夜景，吹了吹海风，就返程了，返程我们可吃不消再走回去了，是坐公交回去的。回到民宿后，又和这位萧山小哥聊了聊，他在临安的浙江农林大学学法学，还准备要考研，司法考什么的，他倒是和我们聊起了昨晚和它住一起的室友，他说那位老哥昨晚大半夜的还在打电话，一个劲的拿头撞墙。我们听了一惊，只是咋回事呀，有啥想不开的？原来是被女朋友放了鸽子，放了鸽子还不算，他女朋友还要和他分手，而他早早地订好住宿，昨晚却在那电话里拼了命的求复合，一直闹腾到了大半夜，哎。我们那天也真是累了，第二天还得早起买票去，于是早早就上床休息了。 第二天６点多，我和同学起床吃了碗馄饨后就坐着公交来到慈航广场买船票了，那时还好，虽然已经有不少人在排队了，但还不算夸张，总之我们还是很庆幸自己出发的比较早。从朱家尖到普陀山的普通客船是３０元一人，普陀山进山门票是１８０，我们买了学生票９０元。进山后，我们往左开始游山，依次游览了百花园，观音古洞，磐陀石等，那时人还不多，所以游览起来还是蛮舒服的。普陀山应该也是个佛教圣地，山上寺庙众多，经常看到一些墙上写着喃无哦米投佛，我们一路翻山，来到百步沙，这是个沙滩，我们随即脱了鞋子去沙滩玩了，这时我又想到了天气好的好处，大暑假的你让我在这沙滩上晒太阳我怕是不大吃得消。我们俩走沙滩上都留了好久，捐起裤脚走在海边，看着海浪一波波涌来，但不敢走太里面，万一一不当心海浪盖过膝盖，那我的裤子是得湿透了。这之后已经快中午了，人山人海的架势也有点显现了，我们之后绕到了不肯去观音院和紫竹林，我一开始还以为这紫竹林是一大片竹林呢，结果到了以后半根竹子都没见着…逛了大半天，真事还没干，来普陀山怎么也得拜下南海观音吧，但是当我们到了南海观音雕像时已经是人山人海了，还有不少拿着香在哪虔诚的拜观音，我们就走在人群里，都不知道他们是在拜观音还是在拜我了。 我们的最后一站是南天门，二石壁立如门，所以不要以为南天门真的是扇门，只是三块大石头，两边各一块，顶上一块，状似一扇门，也就是所谓的南天门。南天门逛完后我们便返程了，还真是挺累的，走了大半天的路。 到了晚上，我们又结识了一位新室友，昨晚那位萧山小哥回家去了，今天搬进来了另一位小伙子。这小伙子更有意思，我们一直聊天聊到后半夜都意犹未尽。他也是个大三学生，还和我一样学的是计算机，你说巧不巧，同行遇同行，两眼泪汪汪，我们竟然开始聊起来了学习．．对的，你没听错，我们一开始聊得是学习．．我问他有什么打算，准备走什么方向，他是在江西读书，想考研，以后走算法方向，不过不是ＡＩ算法，而是数据处理那方面的。但我们聊学习没聊多久就转移了话题，你也知道两个学渣聊不出多大花头。我对这位小哥倒是很感兴趣，慢慢慢慢兴致也就上来了，首先，他是新疆人，这就足以勾起我很大好奇心了，平时我可是很少接触到新疆人呢。而且他有些想法我也比较认同。我告诉我们他这次从江西那边过来，先在宁波玩了两天然后又来舟山玩，他已经去了全国很多地方，他对我们说他出去旅游很多时候并不是为了看景点啥的，而是接触各种各样的人，到四处游玩可以让他接触很多没见过的东西，碰到很多不一样的人，这些人都有自己的一些习俗，想法，和他们聊天是件很有意思的事。我们之后聊了很多很多，有关于他中学是谈对象的故事，有关于他一个土豪室友的故事，还有很多关于新疆的故事，我们俩真是第一次听说新疆竟然是这样的。据他说新疆治安那时真的厉害，目标就是震慑一些犯罪分子，恐怖分子。记得之前发生了一件什么事，整个新疆整整半年停网停通讯，当然他没具体说什么事，毕竟属于机密事件，我也不敢乱写，不然得惹上不小麻烦。而且他们那边你可不能偷偷翻墙，一翻墙你就得接受“教育”了．．．总是我们各种瞎扯，时不时发点感慨，哇，土豪的世界我理解不了，哇，新疆竟然发生过这种事，我们听来就更听故事似的。 最后大家都累了，便熄灯安稳入睡了。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>旅游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[128. 最长连续序列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[给定一个未排序的整数数组，找出最长连续序列的长度。 要求算法的时间复杂度为 O(n)。 示例:123输入: [100, 4, 200, 1, 3, 2]输出: 4解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。 分析：如果先进行排序在遍历求最长连续序列的长度，那么时间复杂度需要O(nlogn)，但是这题要求时间复杂度为O(n).考虑用哈希表的想法，用一个哈希表unordered_map&lt;int,bool&gt; used来记录每个元素是否使用，以该元素在中心，向左右遍历，直到不连续为止，每次记录下向左向右扩张的最长长度。 123456789101112131415161718192021222324252627class Solution &#123;public: int longestConsecutive(vector&lt;int&gt;&amp; nums) &#123; unordered_map&lt;int, bool&gt; used; for(int i = 0; i &lt; nums.size(); i++) &#123; used[nums[i]] = false; &#125; int longest = 0; for(int i = 0; i &lt; nums.size(); i++) &#123; if(used[nums[i]]) &#123; continue; &#125; int length = 1; used[nums[i]] = true; for(int j = nums[i] + 1; used.find(j) != used.end(); ++j) &#123; used[j] = true; ++length; &#125; for(int j = nums[i] - 1; used.find(j) != used.end(); --j) &#123; used[j] = true; ++length; &#125; longest = max(longest, length); &#125; return longest; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[4. 两个排序数组的中位数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F4-%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。 请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。 你可以假设 nums1 和 nums2 不同时为空。 示例 1:1234nums1 = [1, 3]nums2 = [2]中位数是 2.0 示例 2:1234nums1 = [1, 2]nums2 = [3, 4]中位数是 (2 + 3)/2 = 2.5 分析：题目要求求出两个有序数组的中位数，其实这个问题属于TOPKth问题的一个特例，就是让你求两个有序数组的第k大数。思路：比较直观简单的想法就是合并两个有序数组然后再求中位数，但这种做法时间复杂度为O(m + n).可是题目里面要求时间复杂度控制为O(log(m + n)).换一种双指针想法，首先用一个计数器记录当前已找到的第m大的元素，同时让两个指针pA和pB分别指向两个数组的第一个元素，使用类似于归并排序的思想，如果数组nums1当前元素较小，那么pA++，同时m++；反之，pB++，同时m++。当m == k 遍历结束。时间复杂度O(k),空间复杂度O(1).但是如果k很接近m + n ,那么时间复杂度还是O(m + n)的。在换一种想法，要求O(log(m + n))复杂度，我们想到二分查找，但是直接用二分，时间复杂度在O(log(m*n))，只能说用类似二分的做法。我们假设nums1和nums2的元素个数都大于k / 2.我们比较nums1[k/2-1]和nums2[k/2-1]，有以下三种情况： nums1[k/2-1] == nums2[k/2-1] nums1[k/2-1] &gt; nums2[k/2-1] nums1[k/2-1] &lt; nums2[k/2-1] 如果nums1[k/2-1] &lt; nums2[k/2-1]，则nums1[0]~nums1[k/2-1]之间肯定在topK元素范围内，同理，如果nums1[k/2-1] &gt; nums2[k/2-1],则nums2[0] – nums2[k/2-1]肯定在topK元素范围内；如果nums1[k/2-1] == nums2[k/2-1] ，说明已找到第k大元素。采用递归写法的话，终止条件为： 当nums1或nums2为空时，直接返回nums1[k-1]或nums2[k-1] 当k == 1时，返回min(nums1[0],nums2[0]); 当nums1[k/2-1] == nums2[k/2-1],返回nums1[k/2-1]或nums2[k/2-1] 关于具体的数学证明可以参考下官网给出的提解，蛮详细的。https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123;public: double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; int lenA = nums1.size(); int lenB = nums2.size(); if((lenA + lenB) % 2 == 0) &#123; double r1 = (double) findKth(nums1, 0, lenA, nums2, 0, lenB, (lenA + lenB) / 2); double r2 = (double) findKth(nums1, 0, lenA, nums2, 0, lenB, (lenA + lenB) / 2 + 1); return (r1 + r2) / 2.0; &#125; else &#123; return findKth(nums1, 0, lenA, nums2, 0, lenB, (lenA + lenB + 1) / 2); &#125; &#125; int findKth(vector&lt;int&gt;&amp; A, int startA, int endA, vector&lt;int&gt;&amp; B,int startB, int endB, int k) &#123; int n = endA - startA; int m = endB - startB; if(n &lt;= 0) &#123; return B[startB + k - 1]; &#125; if(m &lt;= 0) &#123; return A[startA + k - 1]; &#125; if(k == 1) &#123; return A[startA] &lt; B[startB] ? A[startA] : B[startB]; &#125; int midA = (startA + endA) / 2; int midB = (startB + endB) / 2; if(A[midA] &lt;= B[midB]) &#123; if(n / 2 + m / 2 + 1 &gt;= k) &#123; return findKth(A, startA, endA, B, startB, midB, k); &#125; else &#123; return findKth(A, midA + 1, endA, B, startB, endB, k - n / 2 - 1); &#125; &#125; else &#123; if(n / 2 + m / 2 + 1 &gt;= k) &#123; return findKth(A, startA, midA, B, startB, endB, k); &#125; else &#123; return findKth(A, startA, endA, B, midB + 1, endB, k - m / 2 - 1); &#125; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaWeb开发环境设置]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2FJavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[第一步：下载所需要的开发工具 我这里的javaweb项目选择eclipse的javaee，下载网站：https://www.eclipse.org/downloads/packages/ 服务器下载Tomcat，下载网站：http://tomcat.apache.org/ java jdk下载：https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html jdk的环境配置这里我就不写了。 注意点：版本问题，每个软件版本都不是随便下的，首先不提倡急着下载最新版的，容易出bug。另外尤其要注意jdk版本和Tomcat版本的兼容问题，有一个版本过高或过低都是不行的。关于版本匹配：可以参考下图（Tomcat官网有介绍） 第二步：eclipse配置1 如下图：进入preferences 2 进入java选项下的installed JREs配置jdk目录 3 进入server配置tomcat的运行环境 第三步，新建一个javaweb项目，验证如下图，在web选项新建一个Dynamic Web Project,并新建一个jsp，在里面任意输入内容后并允许，若能够正常输出，则配置成功。]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 与Ｇithub入门介绍]]></title>
    <url>%2F%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91%2FGit-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Git是什么？ Git 是一款免费、开源的分布式版本控制系统，最早由 LinilusTorvalds 创建，用于管理 Linux 内核开发， 现已成为分布式版本控制的主流工具。版本控制系统（VCS）： 一种可以管理和追逐软件代码或其他类似类容的不同版本的工具。我们知道一旦启动一个项目，数据短暂且易失，对于相关的文本和代码，我们需要寻找合适的备份策略。而版本控制系统就是很好的备份策略，方便开发人员对变更进行追踪管理。。Git 由 Linus Torvalds 发明，起初是为了方便管理 Linux1内核的开发工作。如今，Git 已经在大量的项目中得到了 非常成功的应用。 Ｇｉｔ常见功能 从服务器上克隆数据库（包括代码和版本信息）到单机上。 在自己的机器上创建分支，修改代码。 在本地上自己创建的分支上提交代码。 在单机上合并分支。 新建⼀个分⽀，把服务器上最新版的代码fetch下来，然后跟⾃⼰的主分⽀合并。 ⽣成补丁（patch），把补丁发送给主开发者。 看主开发者的反馈，如果主开发者发现两个⼀般开发者之间有冲突（他们之间可 以合作解决的冲突），就会要求他们先解决冲突，然后再由其中⼀个⼈提交。如果 主开发者可以⾃⼰解决，或者没有冲突，就通过。 ⼀般开发者之间解决冲突的⽅法，开发者之间可以使⽤ pull 命令解决冲突，解决 完冲突之后再向主开发者提交补丁 Git初步入门 如果你是第一次安装使用Git，你需要设置署名和邮箱： $ git config --global user.name &quot;⽤户名&quot; $ git config --global user.email &quot;电⼦邮箱&quot; 关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。 链接：http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html 阮老师用了一张图介绍了最常用的6个命令。 1234* Workspace：工作区* Index / Stage：暂存区* Repository：仓库区（或本地仓库）* Remote：远程仓库 将代码仓库clone到本地，其实就是将代码复制到你的机器⾥，并交由Git来管理： $ git clone git@github.com:someone/symfony-docs-chs.git 初始化本地仓库，当前目录下会出现一个名为 .git 的目录 $ git init 新建一个目录，将其初始化为Git代码库 $ git init [project-name] 下载一个项目和它的整个代码历史 $ git clone [url] 删除工作区文件，并将这次删除放入暂存区 $ git rm [file1] [file2] … 向这个本地的代码仓库添加当前目录的所有改动。 $ git add . 提交文件到本地仓库 $ git commit -m “Hello” 提交暂存区的指定文件到仓库 $ git commit [file1] [file2] … -m [message] 添加某个文件 $ git add -p 查看现在的状态 $ git status 推送所有分支到远程仓库 $ git push [remote] –all Github是什么 维基百科的说明： GitHub 是⼀个共享虚拟主机服务，⽤于存放使⽤ Git 版本控制的软件代码 和内容项⽬。它由 GitHub 公司（曾称 Logical Awesome）的开发者 Chris Wanstrath、PJHyett和TomPreston-Werner使⽤RubyonRails编写⽽成。 官方介绍：GitHubisthebestplacetosharecodewithfriends,co-workers,classmates, andcompletestrangers. OvereightmillionpeopleuseGitHubtobuildamazingthingstogether. 对普通用户来说，它还可以是：1 网站2 静态博客3 管理配置文件4 资料收集库5 简历6 管理代码片段7 托管的编程环境8 写作…… 界面主要功能1 Git仓库2 Organization可以统一管理账户和权 限，还能统一支付一些费用。3 IssueIssue功能，是将一个任务或问题分配给一个 Issue进行追踪和管理的功能。每一个功能更改或修正都对应一个Issue，讨论或修正都以这个 Issue为中心进行。只要查看Issue，就能知道和这个更改相关的一切信 息，并以此进行管理。4 Wiki通过Wiki功能，任何人都能随时对一篇文章进行更改并保存，因 此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写 中。5 Pull Request开发者向GitHub的仓库推送更改或功能添加后，可以通过Pull Request 功能向别人的仓库提出申请，请求对方合并。 GitHub可以托管各种git库，并提供⼀个web界⾯，但与其它像SourceForge 或 GoogleCode 这样的服务不同，GitHub 的独特卖点在于从另外⼀个项⽬ 进⾏分⽀的简易性。为⼀个项⽬贡献代码⾮常简单：⾸先点击项⽬站点的 “fork” 的按钮，然后将代码检出并将修改加⼊到刚才分出的代码库中，最后通过内建的 “pullrequest” 机制向项⽬负责⼈申请代码合并。 GitHub项目创建可以直接在web页面new repository。或者12345$ git init$ git add .$ git commit -m &quot;first commit&quot;$ git remote add origin 地址$ git push -u origin master //将代码由本地仓库上传到Github远程仓库 Pull Request 的概要 Pull Request 是自己修改源代 码后，请求对方仓库采纳该修改时采取的一种行为。 PR流程：1 fork对方的repository2 clone你之前fork的repository到你的本地电脑 git clone git@url 3 与对方GitHub的repository建立连接 git remote add upstream url 4 建立工作分支 git checkout -b xiaoming-branch 5 添加代码 6 提交修改用 git diff命令查看修改是否已经正确进行。使用 git add PRTest ，git commit ,git push等系列命令提交 7 发起Pull Request]]></content>
      <categories>
        <category>业务开发</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018上半年的阅读整理]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F2018%E4%B8%8A%E5%8D%8A%E5%B9%B4%E7%9A%84%E9%98%85%E8%AF%BB%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[转眼间，２０１８大半年就过去了，今天想把自己这半年来的一些阅读整理下,看看哪些书自个感觉还不错，哪些书虽不错但因自己能力有限无法深读，哪些书只是为了消遣时间。 １《卑鄙的圣人：曹操》 这本书姑且可算作是本历史书吧，至少让我从另一个视角了解到了曹操，其实说起来，读三国的时候，其他人暂且不提，你若是问我曹操和刘备你喜欢哪个，毫无疑问我更看好曹操。三国乱世，枭雄方能立足，假仁假义的君子有何用。你说曹操奸诈也好，卑鄙也好，但你得承认他很牛，对用兵为政有自己的一套见解，作诗也是一把好手。曹操若非奸雄，别说后来的三国鼎立，怕是都活不到那时就已命丧黄泉了。 ２《包法利夫人》 《包法利夫人》是法国作家福楼拜创作的长篇小说。 小说描写包法利夫人爱玛为摆脱不幸婚姻，追求不正当爱情而导致堕落毁灭的悲剧。表面上是一个淫妇不满婚后情感而渴望爱情因此通奸偷晴，但确实一个真正可怜的角色，不光是情感上的，同时也是当时所处社会的悲剧。 ３《红楼梦评论》王国维 因为对红楼梦特别着迷，所以有些人写的一些关于红楼梦我的看法我也会去了解下，这本书或许也不算不上是本书吧，有点像是一篇论文，简要的论述了红楼梦在伦理，美术，艺术、哲学等方面的价值。 ４《依偎》 依偎是丁捷写的一部爱情小说，有点悲剧色彩。这本小说剧情展开也挺特别，主要根据安芬和小天互相讲故事来展开，最后一步步发现两人之间竟然还有着不为人知的联系并且深深相爱。 ５《陪安东尼度过漫长岁月》 这本书的写法也挺奇葩，至少很少看到，算是挺治愈的一本书。 ６《罗密欧与朱丽叶》 莎士比亚的一部很经典的悲剧。 ７《奥赛罗》 同样是莎士比亚的一部悲剧 ８《道德经》 ．．．篇幅不长，我看的是一段古文后面一段白话文解释的，有些倒还能理解，有些看着就有点玄乎了，或许是自己水平太差。 ９《伊豆的舞女》 《伊豆的舞女》是川端康成早期的代表作和成名作，也是一篇杰出的中篇小说。 展现了少男少女初恋时的朦胧与美好，挺清新的。 １０《告白》 挺好的剧情小说，人物角色多面性，而不是单的纯谁善谁恶，刻画出人性的复杂多面。 １１《少年的你，如此美丽》 玖月晞写的一本青春言情小说吧，剧情上感觉有一些地方有点雷同《白夜行》，但这部小说还是很大胆的刻画了青少年女生的校园欺凌事件，反映了弱势群体如何自保以及法律相关的问题。 １２《妻妾成群》 《妻妾成群》是作家苏童创作的一部中篇小说。这部作品通过描写一个“受过新时代教育”的女学生颂莲，自愿嫁入到高墙深院秩序井然的封建家族陈府，最终又在“妻妾成群”明争暗斗中走向精神崩溃的悲惨命运，艺术化地再现了中国封建礼教吞噬人性的恐怖景象。 １３《老婆，跟我回家吧》 酒小七写的网络言情小说，还算有点幽默吧 １４《魔道祖师》 这部小说是因为先看了动漫，好奇剧情发展而去看的。我是挺喜欢的，故事线完整，人物性格分明。最开始夷陵老祖魏无羡复活，我以为受尽冤屈与不公的他会走浩浩荡荡的复仇路线，但却并没有，内心依旧洒脱，和蓝忘机一同维护心中的正义。 １５《窦娥冤》 窦娥冤的冤情今天动地，但我一直不清楚窦娥冤在何处，但现在总算明白了。 １６《莺莺传》 读了西厢记，就顺便把元稹的莺莺传也读了 １７《斗破苍穹》 玄幻小说 １８《基都山伯爵》 复仇曲。我爱爱我的人，我很恨我的人。 １９《人间失格》太宰治 ２０《我的晃荡的青春》 东野圭吾的故事 ２１《富爸爸，穷爸爸》 这本书倒是略为提到了理财的方面，钱的重要性在现今社会不言而喻。 富爸爸喜欢买入资产，穷爸爸喜欢买入负债。 ２２《堂吉诃德》 骑士小说 ２３《罗生门》 《罗生门》以风雨不透的布局将人推向生死抉择的极限，从而展示了“恶”的无可回避，第一次传递出作者对人的理解，对人的无奈与绝望。 ２４《爱情和其他魔鬼》 加西亚马尔克斯眼中魔鬼般的爱情。 ２５《红顶商人胡雪岩》 商圣的传奇人生 ２６《韩寒的ｏｎｅ系列》 ２７《半小时漫画中国史》 有意思的漫画历史作品 ２８《死刑今夜执行》 思婷写的一部推理小说 ２９《革命时期的爱情》 ３０《杨绛传》 ３１《蒋勋说红楼梦》 也算是一个理解红楼梦的视角吧，只是蒋勋眼中的红楼梦我不能全都苟同，有些地方我怀疑作者的想法如你所说吗，我无从得知，但是蒋勋明显读的比我细比我深，还是学到了很多。 ３２《理想国》 ３３《婉约词》 一本词集，只有词，没有注释解释啥的，你可以把自己想象成古人，嘻嘻，陶冶一番。 ３４《小王子的领悟》 周保松理解的小王子，可以帮助理解。 ３５《邻人之妻》 由两性视角，诸多人物实例，反映美国社会这些年的发展。 ３６古典四大名剧《西厢记》《牡丹亭》《桃花扇》《长生殿》 ３７《战国策》 ３８《资治通鉴》原著 ３９《红手指》 东野圭吾较早的一部推理小说，但是也反映了家庭关系之间出现的一些问题 ４０《聊斋志异》以上主要是上半年看的一些书，其他的还有一些是关于编程的专业技能书，以及修仙玄幻言情等等网络小说，说白了，很多时候也就是为了消磨消磨时间，阅读就是挺能满足我的方式之一，嘻嘻。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[154. 寻找旋转排序数组中的最小值 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F154-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-II%2F</url>
    <content type="text"><![CDATA[假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 请找出其中最小的元素。 注意数组中可能存在重复的元素。 示例 1：12输入: [1,3,5]输出: 1 示例 2：12输入: [2,2,2,0,1]输出: 0 分析：查找旋转了的排序数组，数组里允许存在重复元素，我们知道在一个数组里求最小元素，遍历整个数组肯定能求出，但一般时间复杂度都不是最优的，所以采用二分查找，当然对于这道题，如果数组里重复元素过多，二分的优势也并不明显。分以下三种情况遍历： nums[mid] &gt; nums[left],查找右半区间 nums[mid] &lt; nums[left],查找左半区间 nums[mid] = nums[left] ，left++，跳过继续查找 1234567891011121314151617181920212223242526272829class Solution &#123;public: int findMin(vector&lt;int&gt;&amp; nums) &#123; int size = nums.size(); if(size == 0) &#123; return 0; &#125; else if(size == 1) &#123; return nums[0]; &#125; else if(size == 2) &#123; return min(nums[0], nums[1]); &#125; int left = 0; int right = size - 1; while(left &lt; right - 1) &#123; if(nums[left] &lt; nums[right]) &#123; return nums[left]; &#125; int mid = left + (right - left) / 2; if(nums[mid] &gt; nums[left]) &#123; left = mid; &#125; else if(nums[mid] &lt; nums[left]) &#123; right = mid; &#125; else &#123; left++; &#125; &#125; return min(nums[left], nums[right]); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18. 四数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。 注意： 答案中不可以包含重复的四元组。 示例： 给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。 满足要求的四元组集合为：12345[ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] 分析：这道题和三数之和思路类似，无非是多了一个数，首先对给定数组进行排序，是最后答案数组有序，用两个do while循环去重。123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) &#123; vector&lt;vector&lt;int&gt;&gt; res; if(nums.size() &lt;= 3) &#123; return res; &#125; sort(nums.begin(), nums.end()); for(int i = 0; i &lt; nums.size() - 3; i++) &#123; if(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) &#123; continue; &#125; for(int j = i + 1; j &lt; nums.size() - 2; j++) &#123; if(j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) &#123; continue; &#125; int k = j + 1; int l = nums.size() - 1; while(k &lt; l) &#123; int sum = nums[i] + nums[j] + nums[k] + nums[l]; if(sum == target) &#123; vector&lt;int&gt; curr; curr.push_back(nums[i]); curr.push_back(nums[j]); curr.push_back(nums[k]); curr.push_back(nums[l]); res.push_back(curr); do&#123;++k;&#125; while(k &lt; l &amp;&amp; nums[k] == nums[k - 1]); do&#123;--l;&#125; while(k &lt; l &amp;&amp; nums[l] == nums[l + 1]); &#125; else if(sum &lt; target) &#123; ++k; &#125; else &#123; --l; &#125; &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16. 最接近的三数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F16-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。 例如，给定数组 nums = [-1，2，1，-4], 和 target = 1. 与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2). 分析：还是双指针思想，类似之前的三数之和解法，设定3个指针，固定两个，根据和的大小移动另一个。 1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123;public: int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) &#123; if(nums.size() &lt;= 2) &#123; return -1; &#125; int res = 0; int distance = INT_MAX; sort(nums.begin(), nums.end()); for(int i = 0; i &lt; nums.size() - 2; i++) &#123; int j = i + 1; int k = nums.size() - 1; while(j &lt; k) &#123; int tempVal = nums[i] + nums[j] + nums[k]; int tempDis; if(tempVal &lt; target) &#123; tempDis = target - tempVal; if(tempDis &lt; distance) &#123; distance = tempDis; res = nums[i] + nums[j] + nums[k]; &#125; ++j; &#125; else if(tempVal &gt; target) &#123; tempDis = tempVal - target; if(tempDis &lt; distance) &#123; distance = tempDis; res = nums[i] + nums[j] + nums[k]; &#125; --k; &#125; else &#123; res = nums[i] + nums[j] + nums[k]; return res; &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[15. 三数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。 注意：答案中不可以包含重复的三元组。 例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为：1234[ [-1, 0, 1], [-1, -1, 2]] 分析：双指针思想，定位其中两个指针，根据和的大小来移动第三个指针。由于要求每个答案数组中的元素是升序排列的，所以在开始要对原数组进行排序，另外题目要求不能包含重复的答案数组，所以要有相应的去重操作。 123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123; vector&lt;vector&lt;int&gt;&gt; res; if(nums.size() &lt;= 2) &#123; return res; &#125; sort(nums.begin(), nums.end()); for(int i = 0; i &lt; nums.size() - 2; i++) &#123; int j = i + 1; int k = nums.size() - 1; while(j &lt; k) &#123; vector&lt;int&gt; curr; if(nums[i] + nums[j] + nums[k] == 0) &#123; curr.push_back(nums[i]); curr.push_back(nums[j]); curr.push_back(nums[k]); res.push_back(curr); ++j; --k; while(j &lt; k &amp;&amp; nums[j - 1] == nums[j]) &#123; ++j; &#125; while(j &lt; k &amp;&amp; nums[k] == nums[k + 1]) &#123; --k; &#125; &#125; else if(nums[i] + nums[j] + nums[k] &lt; 0) &#123; ++j; &#125; else &#123; --k; &#125; &#125; while(i &lt; nums.size() - 1 &amp;&amp; nums[i] == nums[i + 1]) &#123; ++i; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1057 Stack（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1057-Stack%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1057 Stack（30 分）Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). The basic operations include Push (inserting an element onto the top position) and Pop (deleting the top element). Now you are supposed to implement a stack with an extra operation: PeekMedian – return the median value of all the elements in the stack. With N elements, the median value is defined to be the (N/2)-th smallest element if N is even, or ((N+1)/2)-th if N is odd. Input Specification:Each input file contains one test case. For each case, the first line contains a positive integer N (≤10​5​​ ). Then N lines follow, each contains a command in one of the following 3 formats: Push keyPopPeekMedianwhere key is a positive integer no more than 10​5​​ . Output Specification:For each Push command, insert key into the stack and output nothing. For each Pop or PeekMedian command, print in a line the corresponding returned value. If the command is invalid, print Invalid instead. Sample Input:12345678910111213141516171817PopPeekMedianPush 3PeekMedianPush 2PeekMedianPush 1PeekMedianPopPopPush 5Push 4PeekMedianPopPopPopPop Sample Output:123456789101112InvalidInvalid322124453Invalid 分析：这道题除了要求实现栈的弹入和弹出操作，还要求查询栈内元素第k大（k是中位数），为了缩减时间复杂度，可以考虑分快思想，或者直接用树状数组1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;map&gt;#include&lt;stack&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100010;const int sqrn = 316;stack&lt;int&gt; st;int block[sqrn];int table[maxn];void peekMedian(int k) &#123; int sum = 0; int idx = 0; while(sum + block[idx] &lt; k) &#123; sum += block[idx++]; &#125; int num = idx * sqrn; while(sum + table[num] &lt; k) &#123; sum += table[num++]; &#125; printf("%d\n", num);&#125;void Push(int x) &#123; st.push(x); block[x / sqrn]++; table[x]++;&#125;void Pop() &#123; int x = st.top(); st.pop(); block[x / sqrn]--; table[x]--; printf("%d\n", x);&#125;int main() &#123; int x, query; memset(block, 0, sizeof(block)); memset(table, 0, sizeof(table)); char cmd[20]; scanf("%d", &amp;query); for(int i = 0; i &lt; query; i++) &#123; scanf("%s", cmd); if(strcmp(cmd, "Push") == 0) &#123; scanf("%d", &amp;x); Push(x); &#125; else if(strcmp(cmd, "Pop") == 0) &#123; if(st.empty() == true) &#123; printf("Invalid\n"); &#125; else &#123; Pop(); &#125; &#125; else &#123; if(st.empty() == true) &#123; printf("Invalid\n"); &#125; else &#123; int k = st.size(); if(k % 2 == 1) &#123; k = (k + 1) / 2; &#125; else &#123; k = k / 2; &#125; peekMedian(k); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1068 Find More Coins（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1068-Find-More-Coins%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1068 Find More Coins（30 分）Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she must pay the exact amount. Since she has as many as 10​4​​ coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find some coins to pay for it. Input Specification:Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (≤10​4​​ , the total number of coins) and M (≤10​2​​ , the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers. All the numbers in a line are separated by a space. Output Specification:For each test case, print in one line the face values V​1​​ ≤V​2​​ ≤⋯≤V​k​​ such that V​1​​ +V​2​​ +⋯+V​k​​ =M. All the numbers must be separated by a space, and there must be no extra space at the end of the line. If such a solution is not unique, output the smallest sequence. If there is no solution, output “No Solution” instead. Note: sequence {A[1], A[2], …} is said to be “smaller” than sequence {B[1], B[2], …} if there exists k≥1 such that A[i]=B[i] for all i&lt;k, and A[k] &lt; B[k]. Sample Input 1:128 95 9 8 7 2 3 4 1 Sample Output 1:11 3 5 Sample Input 2:124 87 2 4 3 Sample Output 2:1No Solution 题目大意：背包问题，有n枚硬币，给出每枚硬币的价值，现在要用这些硬币去支付价值为m的东西，问是否存在这样的方案使选择用来支付的硬币价值之和恰好为m，如果存在从小到大输出硬币的价值，如果有多种方案，则输出“字典序“”最小的 01背包问题：状态转移方程：dp[i][v] = max{dp[i - 1][v], dp[i - 1][v - w[i] + c[i]}开一个bool型二维数组choice[i][v]用来记录是选择了哪个策略，即是放第i件物品还是不放第i件物品。无解条件为dp[m] != m求解dp数组时，如果两种策略的大小相等，选择放第i件物品的策略。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;map&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 10010;const int maxv = 110;int w[maxn], dp[maxv] = &#123;0&#125;;bool choice[maxn][maxv], flag[maxn];bool cmp(int a, int b) &#123; return a &gt; b;&#125;int main() &#123; int n, m; scanf("%d%d", &amp;n, &amp;m); for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;w[i]); &#125; sort(w + 1, w + n + 1, cmp); for(int i = 1; i &lt;= n; i++) &#123; for(int v = m; v &gt;= w[i]; v--) &#123; if(dp[v] &lt;= dp[v - w[i]] + w[i]) &#123; dp[v] = dp[v - w[i]] + w[i]; choice[i][v] = 1; &#125; else &#123; choice[i][v] = 0; &#125; &#125; &#125; if(dp[m] != m) &#123; printf("No Solution"); &#125; else &#123; int k = n, num = 0, v = m; while(k &gt;= 0) &#123; if(choice[k][v] == 1) &#123; flag[k] = true; v -= w[k]; num++; &#125; else &#123; flag[k] = false; &#125; k--; &#125; for(int i = n; i &gt;= 1; i--) &#123; if(flag[i] == true) &#123; printf("%d", w[i]); num--; if(num &gt; 0) &#123; printf(" "); &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1021 Deepest Root（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1021-Deepest-Root%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1021 Deepest Root（25 分）A graph which is connected and acyclic can be considered a tree. The hight of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root. Input Specification:Each input file contains one test case. For each case, the first line contains a positive integer N (≤10​4​​ ) which is the number of nodes, and hence the nodes are numbered from 1 to N. Then N−1 lines follow, each describes an edge by given the two adjacent nodes’ numbers. Output Specification:For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print Error: K components where K is the number of connected components in the graph. Sample Input 1:1234551 21 31 42 5 Sample Output 1:123345 Sample Input 2:1234551 31 42 53 4 Sample Output 2:1Error: 2 components 题目大意：给出n个结点和n-1条边，问它们能否形成一棵n个结点的树，如果能，从中选出结点作为树根，使整棵树的高度最大。输出所有满足要求的可以作为树根的结点。思路：1 由于连通、边数为n-1的图一定是一棵树，因此需要判断给定数据是否能使图连通。使用并查集判断方法：每读入一条边的两个端点，判断这两个端点是否属于相同的集合，如果不同，则将它们合并到一个集合中，当处理完所有边后根据最终产生的集合个数是否为1来判断给定的图是否连通。2 确定图连通后，则确定了树，选择合适根结点使树高最大的做法为：先任意选择一个结点，从该节点开始遍历整棵树，获取能达到的最深的结点，记为集合A；然后从集合A中任意一个结点出发遍历整棵树，获取能达到的最深顶点，记为结点集合B。集合A与B的并集就是所求结果。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100010;vector&lt;int&gt; G[maxn];bool isRoot[maxn];int father[maxn];int findFather(int x) &#123; int a = x; while(x != father[x]) &#123; x = father[x]; &#125; while(a != father[a]) &#123; int z = a; a = father[a]; father[z] = x; &#125; return x;&#125;void Union(int a, int b) &#123; int faA = findFather(a); int faB = findFather(b); if(faA != faB) &#123; father[faA] = faB; &#125;&#125;void init(int n) &#123; for(int i = 1; i &lt;= n; i++) &#123; father[i] = i; &#125;&#125;int blockCnt(int n) &#123; int cnt = 0; for(int i = 1; i &lt;= n; i++) &#123; isRoot[findFather(i)] = true; &#125; for(int i = 1; i &lt;= n; i++) &#123; cnt += isRoot[i]; &#125; return cnt;&#125;int maxH = 0;vector&lt;int&gt; temp, ans;void dfs(int u, int height, int pre) &#123; if(height &gt; maxH) &#123; temp.clear(); temp.push_back(u); maxH = height; &#125; else if(height == maxH) &#123; temp.push_back(u); &#125; for(int i = 0; i &lt; G[u].size(); i++) &#123; if(G[u][i] == pre) &#123; continue; &#125; dfs(G[u][i], height + 1, u); &#125;&#125;int main() &#123; int a, b, n; scanf("%d", &amp;n); init(n); for(int i = 1; i &lt; n; i++) &#123; scanf("%d%d", &amp;a, &amp;b); G[a].push_back(b); G[b].push_back(a); Union(a, b); &#125; int block = blockCnt(n); if(block != 1) &#123; printf("Error: %d components\n", block); &#125; else &#123; dfs(1, 1, -1); ans = temp; dfs(ans[0], 1, -1); for(int i = 0; i &lt; temp.size(); i++) &#123; ans.push_back(temp[i]); &#125; sort(ans.begin(), ans.end()); printf("%d\n", ans[0]); for(int i = 1; i &lt; ans.size(); i++) &#123; if(ans[i] != ans[i - 1]) &#123; printf("%d\n", ans[i]); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1007 Maximum Subsequence Sum (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1007-Maximum-Subsequence-Sum-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1007 Maximum Subsequence Sum (25)（25 分）Given a sequence of K integers { N~1~, N~2~, …, N~K~ }. A continuous subsequence is defined to be { N~i~, N~i+1~, …, N~j~ } where 1 &lt;= i &lt;= j &lt;= K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20. Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence. Input Specification: Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (&lt;= 10000). The second line contains K numbers, separated by a space. Output Specification: For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence. Sample Input:1210-10 1 2 3 4 -5 -23 3 7 -21 Sample Output:110 1 4 求解最大连续子序列和，并且要求输出首尾元素，边界dp[0] = a[0]转移方程：if(dp[i - 1] + a[i]) &gt; a[i] : dp[i] = dp[i - 1] + a[i] else dp[i] = a[i]用s[i]表示以a[i]作为结尾的最大连续子序列是从哪个元素开始的两种情况1 只有一个元素，这个最大连续子序列就是从a[i]开始，s[i] = a[i]2 s[i] = s[i - 1] 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 10010;int a[maxn], dp[maxn];int s[maxn] = &#123;0&#125;;int main() &#123; int n; scanf("%d", &amp;n); bool flag = false; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;a[i]); if(a[i] &gt;= 0) &#123; flag = true; &#125; &#125; if(flag == false) &#123; printf("0 %d %d\n", a[0], a[n - 1]); return 0; &#125; dp[0] = a[0]; for(int i = 1; i &lt;= n; i++) &#123; if(dp[i - 1] + a[i] &gt; a[i]) &#123; dp[i] = dp[i - 1] + a[i]; s[i] = s[i - 1]; &#125; else &#123; dp[i] = a[i]; s[i] = i; &#125; &#125; int k = 0; for(int i = 1; i &lt; n; i++) &#123; if(dp[i] &gt; dp[k]) &#123; k = i; &#125; &#125; printf("%d %d %d\n", dp[k], a[s[k]], a[k]); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1013 Battle Over Cities (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1013-Battle-Over-Cities-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1013 Battle Over Cities (25)（25 分）It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly. For example, if we have 3 cities and 2 highways connecting city~1~-city~2~ and city~1~-city~3~. Then if city~1~ is occupied by the enemy, we must have 1 highway repaired, that is the highway city~2~-city~3~. Input Each input file contains one test case. Each case starts with a line containing 3 numbers N (&amp;lt1000), M and K, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then M lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to N. Finally there is a line containing K numbers, which represent the cities we concern. Output For each of the K cities, output in a line the number of highways need to be repaired if that city is lost. Sample Input12343 2 31 21 31 2 3 Sample Output123100 题目大意：给定一个无向图并规定：当删除图中某个顶点时，将会同时把与之连接的边一起删除，接下来给出k个查询，每个查询给出一个欲删除的顶点编号，求删除该顶点后需要增加多少边，才能使图连通。 分析：给定一个无向图，如何计算需要增加的边，使得整个图连通。显然需要增加的边数等于连通块个数减1求解一个无向图的连通块个数一般有两种方法： 图的遍历：在遍历图的过程中总是每次访问单个连通块，并将该连通块内的所有顶点都标记为已访问，然后去访问下个连通块，在访问过程中同时计数遍历的连通快数 并查集：判断无向图每条边的两个顶点是否在一个集合内，如果在同一个集合内，则不作处理；否则将这两个顶点加入同一个集合。最后统计集合个数关于删除顶点，当访问回到该顶点时返回即可。1 遍历图计算连通块123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 1111;vector&lt;int&gt; G[maxn];bool vis[maxn];int currentPoint;void dfs(int v) &#123; if(v == currentPoint) &#123; return ; &#125; vis[v] = true; for(int i = 0; i &lt; G[v].size(); i++) &#123; if(vis[G[v][i]] == false) &#123; dfs(G[v][i]); &#125; &#125;&#125;int n, m, k;int main() &#123; scanf("%d%d%d", &amp;n, &amp;m, &amp;k); for(int i = 0; i &lt; m; i++) &#123; int a, b; scanf("%d%d", &amp;a, &amp;b); G[a].push_back(b); G[b].push_back(a); &#125; for(int query = 0; query &lt; k; query++) &#123; scanf("%d", &amp;currentPoint); memset(vis, false, sizeof(vis)); int block = 0; for(int i = 1; i &lt;= n; i++) &#123; if(i != currentPoint &amp;&amp; vis[i] == false) &#123; dfs(i); block++; &#125; &#125; printf("%d\n", block - 1); &#125; return 0;&#125; 2 并查集求连通块 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 1111;vector&lt;int&gt; G[maxn];int father[maxn];bool vis[maxn];int findFather(int x) &#123; int a = x; while(x != father[x]) &#123; x = father[x]; &#125; while(a != father[a]) &#123; int z = a; a = father[a]; father[z] = x; &#125; return x;&#125;void Union(int a, int b) &#123; int faA = findFather(a); int faB = findFather(b); if(faA != faB) &#123; father[faA] = father[faB]; &#125;&#125;void init() &#123; for(int i = 1; i &lt; maxn; i++) &#123; father[i] = i; vis[i] = false; &#125;&#125;int n, m, k;int main() &#123; scanf("%d%d%d", &amp;n, &amp;m, &amp;k); for(int i = 0; i &lt; m; i++) &#123; int a, b; scanf("%d%d", &amp;a, &amp;b); G[a].push_back(b); G[b].push_back(a); &#125; int currentPoint; for(int query = 0; query &lt; k; query++) &#123; scanf("%d", &amp;currentPoint); init(); for(int i = 1; i &lt;= n; i++) &#123; for(int j = 0; j &lt; G[i].size(); j++) &#123; int u = i, v = G[i][j]; if(u == currentPoint || v == currentPoint) &#123; continue; &#125; Union(u, v); &#125; &#125; int block = 0; for(int i = 1; i &lt;= n; i++) &#123; if(i == currentPoint) &#123; continue; &#125; int fai = findFather(i); if(vis[fai] == false) &#123; block++; vis[fai] = true; &#125; &#125; printf("%d\n", block - 1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[707. 设计链表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例：1234567MyLinkedList linkedList = new MyLinkedList();linkedList.addAtHead(1);linkedList.addAtTail(3);linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3linkedList.get(1); //返回2linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3linkedList.get(1); //返回3 提示： 所有值都在 [1, 1000] 之内。操作次数将在 [1, 1000] 之内。请不要使用内置的 LinkedList 库。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106class MyLinkedList &#123;public: /** Initialize your data structure here. */ MyLinkedList() &#123; LinkedList = 0; &#125; ListNode* LinkedList; /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get(int index) &#123; int i = 0; ListNode* head = LinkedList; while(head &amp;&amp; i &lt; index) &#123; head = head-&gt;next; i++; &#125; if(head &amp;&amp; i == index) &#123; return head-&gt;val; &#125; else &#123; return -1; &#125; &#125; /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead(int val) &#123; ListNode* head = (ListNode*)malloc(sizeof(ListNode)); head-&gt;next = LinkedList; head-&gt;val = val; LinkedList = head; &#125; /** Append a node of value val to the last element of the linked list. */ void addAtTail(int val) &#123; ListNode* head = LinkedList; ListNode* temp = (ListNode*)malloc(sizeof(ListNode)); temp-&gt;next = 0; temp-&gt;val = val; if(!head) &#123; LinkedList = temp; return; &#125; while(head-&gt;next) &#123; head = head-&gt;next; &#125; head-&gt;next = temp; &#125; /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex(int index, int val) &#123; int i = 0; ListNode* head = LinkedList; if(!head &amp;&amp; index == 0) &#123; ListNode* temp = (ListNode*)malloc(sizeof(ListNode)); temp-&gt;val = val; temp-&gt;next = 0; LinkedList = temp; return ; &#125; while(head &amp;&amp; i &lt; index - 1) &#123; head = head-&gt;next; i++; &#125; if(head &amp;&amp; head-&gt;next == 0) &#123; ListNode* temp = (ListNode*)malloc(sizeof(ListNode)); temp-&gt;val = val; temp-&gt;next = 0; head-&gt;next = temp; &#125; else if(i == index - 1 &amp;&amp; head &amp;&amp; head-&gt;next) &#123; ListNode* temp = (ListNode*)malloc(sizeof(ListNode)); temp-&gt;val = val; temp-&gt;next = head-&gt;next; head-&gt;next = temp; &#125; &#125; /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex(int index) &#123; ListNode* head = LinkedList; int i = 0; while(head &amp;&amp; i &lt; index - 1) &#123; head = head-&gt;next; i++; &#125; if(head == 0) &#123; return; &#125; if(head-&gt;next == 0 &amp;&amp; index == 0) &#123; LinkedList = 0; return ; &#125; if(head-&gt;next) &#123; ListNode* temp = head-&gt;next; head-&gt;next = temp-&gt;next; free(temp); &#125; &#125;&#125;;/** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index,val); * obj.deleteAtIndex(index); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[687. 最长同值路径]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F687-%E6%9C%80%E9%95%BF%E5%90%8C%E5%80%BC%E8%B7%AF%E5%BE%84%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。 注意：两个节点之间的路径长度由它们之间的边数表示。 示例 1:12345678910输入: 5 / \ 4 5 / \ \ 1 1 5输出:2 示例 2:12345678910输入: 1 / \ 4 5 / \ \ 4 4 5输出:2 注意: 给定的二叉树不超过10000个结点。 树的高度不超过1000。 分析：考察二叉树的递归首先判断二叉树root是否为空，如果是直接返回0，之后对左右子结点分别调用当前函数，取其中较大值保存到临时变量，表示左右子树中最长的同值路径，然后跟当前树的最长同值路径进行比较，对左右子结点调用dfs函数，并传入当前结点值，将返回值与临时变量比较取较大值12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int longestUnivaluePath(TreeNode* root) &#123; if(!root) &#123; return 0; &#125; int sub = max(longestUnivaluePath(root-&gt;left), longestUnivaluePath(root-&gt;right)); return max(sub, dfs(root-&gt;left, root-&gt;val) + dfs(root-&gt;right, root-&gt;val)); &#125; int dfs(TreeNode* node, int parent) &#123; if(!node || node-&gt;val != parent) &#123; return 0; &#125; return 1 + max(dfs(node-&gt;left, node-&gt;val), dfs(node-&gt;right, node-&gt;val)); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[686. 重复叠加字符串匹配]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F686-%E9%87%8D%E5%A4%8D%E5%8F%A0%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[给定两个字符串 A 和 B, 寻找重复叠加字符串A的最小次数，使得字符串B成为叠加后的字符串A的子串，如果不存在则返回 -1。 举个例子，A = “abcd”，B = “cdabcdab”。 答案为 3， 因为 A 重复叠加三遍后为 “abcdabcdabcd”，此时 B 是其子串；A 重复叠加两遍后为”abcdabcd”，B 并不是其子串。 注意: A 与 B 字符串的长度在1和10000区间范围内。 在字符串b的长度范围内循环累加a并且判断是否存在子串，但要注意边界，所以循环结束后如果不存在，需要在累加一次并进行判断。12345678910111213141516171819 class Solution &#123; public int repeatedStringMatch(String A, String B) &#123; int lenb = B.length(); String res = A; int cnt = 1; while(res.length() &lt; lenb) &#123; res += A; cnt++; &#125; if(res.contains(B)) &#123; return cnt; &#125; res += A; if(res.contains(B)) &#123; return cnt + 1; &#125; return -1; &#125;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[690. 员工的重要性]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F690-%E5%91%98%E5%B7%A5%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%2F</url>
    <content type="text"><![CDATA[给定一个保存员工信息的数据结构，它包含了员工唯一的id，重要度 和 直系下属的id。 比如，员工1是员工2的领导，员工2是员工3的领导。他们相应的重要度为15, 10, 5。那么员工1的数据结构是[1, 15, [2]]，员工2的数据结构是[2, 10, [3]]，员工3的数据结构是[3, 5, []]。注意虽然员工3也是员工1的一个下属，但是由于并不是直系下属，因此没有体现在员工1的数据结构中。 现在输入一个公司的所有员工信息，以及单个员工id，返回这个员工和他所有下属的重要度之和。 示例 1:12输入: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1输出: 11 解释:员工1自身的重要度是5，他有两个直系下属2和3，而且2和3的重要度均为3。因此员工1的总重要度是 5 + 3 + 3 = 11。注意: 一个员工最多有一个直系领导，但是可以有多个直系下属员工数量不超过2000。 思路：这题本质还是二叉树的遍历，所以用dfs或bfs都能做。首先把 employees 存入 HashMap， id 为 key， Employee 为value。 然后建立一个 dfs function： 当员工的 subordinates 的 size 等于 0 的时候， 说明没有必要继续递归了，返回员工的重要值； 如果 size 大于0，那么遍历 subordinates，把每一个 员工id 递归，累加重要值。1234567891011121314151617181920212223242526272829303132/*// Employee infoclass Employee &#123; // It's the unique id of each node; // unique id of this employee public int id; // the importance value of this employee public int importance; // the id of direct subordinates public List&lt;Integer&gt; subordinates;&#125;;*/class Solution &#123; public int getImportance(List&lt;Employee&gt; employees, int id) &#123; HashMap&lt;Integer, Employee&gt; map = new HashMap&lt;&gt;(); for(Employee e : employees) &#123; map.put(e.id, e); &#125; return dfs(id, map); &#125;private int dfs(int id, HashMap&lt;Integer, Employee&gt; map) &#123; Employee e = map.get(id); if(e.subordinates.size() == 0) &#123; return e.importance; &#125; int res = e.importance; for(int sub : e.subordinates) &#123; res += dfs(sub, map); &#125; return res; &#125;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[665. 非递减数列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F665-%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97%2F</url>
    <content type="text"><![CDATA[给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。 我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。 示例 1:12输入: [4,2,3]输出: True 解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。示例 2:12输入: [4,2,1]输出: False 解释: 你不能在只改变一个元素的情况下将其变为非递减数列。说明: n 的范围为 [1, 10,000]。分析：要求最多改变一个元素问能否使给定序列成为非递减序列。遍历给定数组，计数递增节点个数。假设有一个数列a1a2a3a4a5,在a3之前一切正常，但是a4 &lt; a3，这时候有两种解决方案：一种是抬高a4，一种是降低a3，判断的依据就看a4和a2的关系，若a4 &lt; a2,则最好的解决方案就是抬高a4,抬高到a3的值刚好，反之亦然。 1234567891011121314151617181920class Solution &#123;public: bool checkPossibility(vector&lt;int&gt;&amp; nums) &#123; int len = nums.size(), needChange = 0; for(int i = 0; i &lt; len - 1; i++) &#123; if(nums[i + 1] &lt; nums[i]) &#123; needChange++; if(needChange &gt; 1) &#123; return false; &#125; if(i &gt; 0 &amp;&amp; nums[i + 1] &lt; nums[i - 1]) &#123; nums[i + 1] = nums[i]; &#125; else &#123; nums[i] = nums[i + 1]; &#125; &#125; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1107 Social Clusters（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1107-Social-Clusters%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1107 Social Clusters（30 分）When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A social cluster is a set of people who have some of their hobbies in common. You are supposed to find all the clusters. Input Specification:Each input file contains one test case. For each test case, the first line contains a positive integer N (≤1000), the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format: K​i​​ : h​i​​ [1] h​i​​ [2] … h​i​​ [K​i​​ ] where K​i​​ (&gt;0) is the number of hobbies, and h​i​​ [j] is the index of the j-th hobby, which is an integer in [1, 1000]. Output Specification:For each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line. Sample Input:12345678983: 2 7 101: 42: 5 31: 41: 31: 44: 6 8 1 51: 4 Sample Output:1234 3 1 题目大意：如果有两个人有任意一个活动相同，那么救称他们处于同一个社交网络，给定n个人，求n个人形成了多少社交网络。用course[h]记录喜欢活动h的人的编号，那么findFather(course[h])就是这个人所在的社交网络的根结点，合并当前读入的编号i与findFather(course[h])集合计数可以开一个isRoot数组表示x号人作为根结点的社交网络中有多少人12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 1010;int father[maxn];int isRoot[maxn] = &#123;0&#125;;int course[maxn] = &#123;0&#125;;int findFather(int x) &#123; int a = x; while(x != father[x]) &#123; x = father[x]; &#125; while(a != father[a]) &#123; int z = a; a = father[a]; father[z] = x; &#125; return x;&#125;void Union(int a, int b) &#123; int faA = findFather(a); int faB = findFather(b); if(faA != faB) &#123; father[faA] = faB; &#125;&#125;void init(int n) &#123; for(int i = 1; i &lt;= n; i++) &#123; father[i] = i; isRoot[i] = false; &#125;&#125;bool cmp(int a, int b) &#123; return a &gt; b;&#125;int main() &#123; int n, k, h; scanf("%d", &amp;n); init(n); for(int i = 1; i &lt;= n; i++) &#123; scanf("%d:", &amp;k); for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;h); if(course[h] == 0) &#123; course[h] = i; &#125; Union(i, findFather(course[h])); &#125; &#125; for(int i = 1; i &lt;= n; i++) &#123; isRoot[findFather(i)]++; &#125; int ans = 0; for(int i = 1; i &lt;= n; i++) &#123; if(isRoot[i] != 0) &#123; ans++; &#125; &#125; printf("%d\n", ans); sort(isRoot + 1, isRoot + n + 1, cmp); for(int i = 1; i &lt;= ans; i++) &#123; printf("%d", isRoot[i]); if(i &lt; ans) &#123; printf(" "); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1066 Root of AVL Tree (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1066-Root-of-AVL-Tree-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1066 Root of AVL Tree (25)（25 分）An AVL tree is a self-balancing binary search tree. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Figures 1-4 illustrate the rotation rules. Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree. Input Specification: Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=20) which is the total number of keys to be inserted. Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space. Output Specification: For each test case, print the root of the resulting AVL tree in one line. Sample Input 1:12588 70 61 96 120 Sample Output 1:170 Sample Input 2:12788 70 61 96 120 90 65 Sample Output 2:188 题目大意：给出n个整数，将他们依次插入一棵初始为空的AVL树上，求插入后根结点的值。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;struct node &#123; int v, height; node *lchild, *rchild;&#125;*root;node* newnode(int v) &#123; node* Node = new node; Node-&gt;v = v; Node-&gt;height = 1; Node-&gt;lchild = Node-&gt;rchild = NULL; return Node;&#125;int getHeight(node* root) &#123; if(root == NULL) &#123; return 0; &#125; return root-&gt;height;&#125;void updatahegiht(node* root) &#123; root-&gt;height = max(getHeight(root-&gt;lchild), getHeight(root-&gt;rchild)) + 1;&#125;int getbalancefac(node* root) &#123; return getHeight(root-&gt;lchild) - getHeight(root-&gt;rchild);&#125;void L(node* &amp;root) &#123; node* temp = root-&gt;rchild; root-&gt;rchild = temp-&gt;lchild; temp-&gt;lchild = root; updatahegiht(root); updatahegiht(temp); root = temp;&#125;void R(node* &amp;root) &#123; node* temp = root-&gt;lchild; root-&gt;lchild = temp-&gt;rchild; temp-&gt;rchild = root; updatahegiht(root); updatahegiht(temp); root = temp;&#125;void insert(node* &amp;root, int v) &#123; if(root == NULL) &#123; root = newnode(v); return ; &#125; if(v &lt; root-&gt;v) &#123; insert(root-&gt;lchild, v); updatahegiht(root); if(getbalancefac(root) == 2) &#123; if(getbalancefac(root-&gt;lchild) == 1) &#123; R(root); &#125; else if(getbalancefac(root-&gt;lchild) == -1) &#123; L(root-&gt;lchild); R(root); &#125; &#125; &#125; else &#123; insert(root-&gt;rchild, v); updatahegiht(root); if(getbalancefac(root) == -2) &#123; if(getbalancefac(root-&gt;rchild) == -1) &#123; L(root); &#125; else if(getbalancefac(root-&gt;rchild) == 1) &#123; R(root-&gt;rchild); L(root); &#125; &#125; &#125;&#125;node* create(int data[], int n) &#123; node* root = NULL; for(int i = 0; i &lt; n; i++) &#123; insert(root, data[i]); &#125; return root;&#125;int main() &#123; int n, v; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;v); insert(root, v); &#125; printf("%d\n", root-&gt;v); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1099 Build A Binary Search Tree（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1099-Build-A-Binary-Search-Tree%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1099 Build A Binary Search Tree（30 分）A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains only nodes with keys less than the node’s key.The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.Both the left and right subtrees must also be binary search trees.Given the structure of a binary tree and a sequence of distinct integer keys, there is only one way to fill these keys into the tree so that the resulting tree satisfies the definition of a BST. You are supposed to output the level order traversal sequence of that tree. The sample is illustrated by Figure 1 and 2. Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤100) which is the total number of nodes in the tree. The next N lines each contains the left and the right children of a node in the format left_index right_index, provided that the nodes are numbered from 0 to N−1, and 0 is always the root. If one child is missing, then −1 will represent the NULL child pointer. Finally N distinct integer keys are given in the last line. Output Specification:For each test case, print in one line the level order traversal sequence of that tree. All the numbers must be separated by a space, with no extra space at the end of the line. Sample Input:123456789101191 62 3-1 -1-1 45 -1-1 -17 -1-1 8-1 -173 45 11 58 82 25 67 38 42 Sample Output:158 25 82 11 38 67 45 73 42 题目大意：给出n个结点的二叉树的每个结点的左右孩子的编号，-1表示不存在，接着给出一个n个整数的序列，需要将这n个整数填入二叉树的结点中，使得二叉树成为一颗二叉查找树，输出这棵二叉查找树的层序遍历序列。 分析：采用二叉树的静态写法比较适合表示结点的编号关系，对一颗二叉查找树来说，中序遍历序列是递增的，所以要把给定n个整数从小到大排序，然后对給定的二叉树进行中序遍历，同时将排序后的数字填入二叉树，最后层序遍历输出。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 110;struct node &#123; int data; int lchild, rchild;&#125;Node[maxn];int n, in[maxn], num = 0;void inorder(int root) &#123; if(root == -1) &#123; return ; &#125; inorder(Node[root].lchild); Node[root].data = in[num++]; inorder(Node[root].rchild);&#125;void bfs(int root) &#123; queue&lt;int&gt; q; q.push(root); num = 0; while(!q.empty()) &#123; int now = q.front(); q.pop(); printf("%d", Node[now].data); num++; if(num &lt; n) &#123; printf(" "); &#125; if(Node[now].lchild != -1) &#123; q.push(Node[now].lchild); &#125; if(Node[now].rchild != -1) &#123; q.push(Node[now].rchild); &#125; &#125;&#125;int main() &#123; int lchild, rchild; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++) &#123; scanf("%d%d", &amp;lchild, &amp;rchild); Node[i].lchild = lchild; Node[i].rchild = rchild; &#125; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;in[i]); &#125; sort(in, in + n); inorder(0); bfs(0); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1064 Complete Binary Search Tree (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1064-Complete-Binary-Search-Tree-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1064 Complete Binary Search Tree (30)（30 分）A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains only nodes with keys less than the node’s key.The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.Both the left and right subtrees must also be binary search trees.A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right. Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST. Input Specification: Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000. Output Specification: For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line. Sample Input:12101 2 3 4 5 6 7 8 9 0 Sample Output:16 3 8 1 5 7 9 0 2 4 题目大意：给出n个非负整数，用他们构建一棵完全二叉排序树，输出这棵树的层序遍历序列。分析：用数组在存放完全二叉树，对完全二叉树中的任意一个节点x，其左孩子结点的编号为2x，右孩子编号为2x+1对一颗二叉排序树来说，其中序遍历序列是递增的，所以先将给定数字从小到大排序，然后对cbt数组表示的二叉树进行中序遍历，并再遍历过程中将数字从小到大填入数组1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 1010;int n, number[maxn], cbt[maxn], index = 0;void inorder(int root) &#123; if(root &gt; n) &#123; return ; &#125; inorder(root * 2); cbt[root] = number[index++]; inorder(root * 2 + 1);&#125;int main()&#123; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;number[i]); &#125; sort(number, number + n); inorder(1); for(int i = 1; i &lt;= n; i++) &#123; printf("%d", cbt[i]); if(i &lt; n) &#123; printf(" "); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1004 Counting Leaves (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1004-Counting-Leaves-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1004 Counting Leaves (30)（30 分）A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child. Input Each input file contains one test case. Each case starts with a line containing 0 &lt; N &lt; 100, the number of nodes in a tree, and M (&lt; N), the number of non-leaf nodes. Then M lines follow, each in the format: ID K ID[1] ID[2] … ID[K]where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children. For the sake of simplicity, let us fix the root ID to be 01. Output For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line. The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output “0 1” in a line. Sample Input122 101 1 02 Sample Output10 1 题目大意：给出一棵二叉树，遍历该树，问该树的每一层有多少叶子结点。1深度优先搜索用邻接表来存储树，用一个leaf数组存放每层的叶子结点个数，用maxh记录树的深度。dfs函数里先更新深度maxh，再判断当前结点是否为叶子结点，以此来决定是否要对leaf数组进行自增，在枚举完所有子结点后进入下一层 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 110;vector&lt;int&gt; G[maxn];int leaf[maxn] = &#123;0&#125;;int maxh = 1;void dfs(int index, int h) &#123; maxh = max(h, maxh); if(G[index].size() == 0) &#123; leaf[h]++; return; &#125; for(int i = 0; i &lt; G[index].size(); i++) &#123; dfs(G[index][i], h + 1); &#125;&#125;int main()&#123; int n, m, parent, child, k; scanf("%d%d", &amp;n, &amp;m); for(int i = 0; i &lt; m; i++) &#123; scanf("%d%d", &amp;parent, &amp;k); for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;child); G[parent].push_back(child); &#125; &#125; dfs(1, 1); printf("%d", leaf[1]); for(int i = 2; i &lt;= maxh; i++) &#123; printf(" %d", leaf[i]); &#125; return 0;&#125; 2 广度优先搜索bfs前要先将根结点压入队列q，然后再开始bfs。开始bfs时，先把队首元素弹出，同时更新最大深度maxh，之后判断当前访问节点是否为叶子结点，最后将所有子结点压入队列。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 110;vector&lt;int&gt; G[maxn];int h[maxn] = &#123;0&#125;;int leaf[maxn] = &#123;0&#125;;int maxh = 0;void bfs() &#123; queue&lt;int&gt; q; q.push(1); while(!q.empty()) &#123; int id = q.front(); q.pop(); maxh = max(maxh, h[id]); if(G[id].size() == 0) &#123; leaf[h[id]]++; &#125; for(int i = 0; i &lt; G[id].size(); i++) &#123; h[G[id][i]] = h[id] + 1; q.push(G[id][i]); &#125; &#125;&#125;int main()&#123; int n, m, parent, child, k; scanf("%d%d", &amp;n, &amp;m); for(int i = 0; i &lt; m; i++) &#123; scanf("%d%d", &amp;parent, &amp;k); for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;child); G[parent].push_back(child); &#125; &#125; h[1] = 1; bfs(); for(int i = 1; i &lt;= maxh; i++) &#123; if(i == 1) &#123; printf("%d", leaf[i]); &#125; else &#123; printf(" %d", leaf[i]); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[830. 较大分组的位置]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F830-%E8%BE%83%E5%A4%A7%E5%88%86%E7%BB%84%E7%9A%84%E4%BD%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在一个由小写字母构成的字符串 S 中，包含由一些连续的相同字符所构成的分组。 例如，在字符串 S = “abbxxxxzyy” 中，就含有 “a”, “bb”, “xxxx”, “z” 和 “yy” 这样的一些分组。 我们称所有包含大于或等于三个连续字符的分组为较大分组。找到每一个较大分组的起始和终止位置。 最终结果按照字典顺序输出。 示例 1:123输入: &quot;abbxxxxzzy&quot;输出: [[3,6]]解释: &quot;xxxx&quot; 是一个起始于 3 且终止于 6 的较大分组。 示例 2:123输入: &quot;abc&quot;输出: []解释: &quot;a&quot;,&quot;b&quot; 和 &quot;c&quot; 均不是符合要求的较大分组。 示例 3:12输入: &quot;abcdddeeeeaabbbcd&quot;输出: [[3,5],[6,9],[12,14]] 说明: 1 &lt;= S.length &lt;= 10001234567891011121314151617181920212223class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; largeGroupPositions(string S) &#123; vector&lt;vector&lt;int&gt;&gt; res; int left = 0; int right = 0; for(int i = 1; i &lt; S.size(); i++) &#123; if(S[i] == S[i - 1]) &#123; right++; &#125; else &#123; if(right - left &gt;= 2) &#123; res.push_back(&#123;left, right&#125;); &#125; right = right + 1; left = right; &#125; &#125; if(right - left &gt;= 2) &#123; res.push_back(&#123;left, right&#125;); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1094 The Largest Generation (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1094-The-Largest-Generation-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1094 The Largest Generation (25)（25 分）A family hierarchy is usually presented by a pedigree tree where all the nodes on the same level belong to the same generation. Your task is to find the generation with the largest population. Input Specification: Each input file contains one test case. Each case starts with two positive integers N (&amp;lt100) which is the total number of family members in the tree (and hence assume that all the members are numbered from 01 to N), and M (&amp;ltN) which is the number of family members who have children. Then M lines follow, each contains the information of a family member in the following format: ID K ID[1] ID[2] … ID[K] where ID is a two-digit number representing a family member, K (&amp;gt0) is the number of his/her children, followed by a sequence of two-digit ID’s of his/her children. For the sake of simplicity, let us fix the root ID to be 01. All the numbers in a line are separated by a space. Output Specification: For each test case, print in one line the largest population number and the level of the corresponding generation. It is assumed that such a generation is unique, and the root level is defined to be 1. Sample Input:123456789101112131423 1321 1 2301 4 03 02 04 0503 3 06 07 0806 2 12 1313 1 2108 2 15 1602 2 09 1011 2 19 2017 1 2205 1 1107 1 1409 1 1710 1 18 Sample Output:19 4 题目大意：给定树的结点个数n，非叶子节点个数m，然后输入m个非叶子结点各自的孩子结点编号，输出结点个数最多的一层的结点个数以及层号 思路：定义一个hashTable数组用来记录每一层的结点个数写一个dfs函数，用来记录当前访问的结点编号index与该结点的层号level，进入函数，先令hashTable[level]加1，之后遍历结点index的所有孩子结点，对每个孩子结点进行递归，递归时level+112345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 110;vector&lt;int&gt; node[maxn];int hashTable[maxn] = &#123;0&#125;;void dfs(int index, int level) &#123; hashTable[level]++; for(int j = 0; j &lt; node[index].size(); j++) &#123; dfs(node[index][j], level + 1); &#125;&#125;int main()&#123; int n, m, parent, k, child; scanf("%d%d", &amp;n, &amp;m); for(int i = 0; i &lt; m; i++) &#123; scanf("%d%d", &amp;parent, &amp;k); for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;child); node[parent].push_back(child); &#125; &#125; dfs(1, 1); int maxLevel = -1, maxValue = 0; for(int i = 1; i &lt; maxn; i++) &#123; if(hashTable[i] &gt; maxValue) &#123; maxValue = hashTable[i]; maxLevel = i; &#125; &#125; printf("%d %d\n", maxValue, maxLevel); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1090 Highest Price in Supply Chain (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1090-Highest-Price-in-Supply-Chain-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1090 Highest Price in Supply Chain (25)（25 分）A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the highest price we can expect from some retailers. Input Specification: Each input file contains one test case. For each case, The first line contains three positive numbers: N (&lt;=10^5^), the total number of the members in the supply chain (and hence they are numbered from 0 to N-1); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then the next line contains N numbers, each number S~i~ is the index of the supplier for the i-th member. S~root~ for the root supplier is defined to be -1. All the numbers in a line are separated by a space. Output Specification: For each test case, print in one line the highest price we can expect from some retailers, accurate up to 2 decimal places, and the number of retailers that sell at the highest price. There must be one space between the two numbers. It is guaranteed that the price will not exceed 10^10^. Sample Input:129 1.80 1.001 5 4 4 -1 4 5 3 6 Sample Output:11.85 2 与1079相类似，要求所有叶结点中的最高价格以及这个价格的叶结点个数。由于不需要考虑点权，所以可以直接用vector数组来存放树，树的最大深度可通过dfs或bfs获得。123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 100010;vector&lt;int&gt; child[maxn];double p, r;int n, maxDepth = 0, num = 0;void dfs(int index, int depth) &#123; if(child[index].size() == 0) &#123; if(depth &gt; maxDepth) &#123; maxDepth = depth; num = 1; &#125; else if(depth == maxDepth) &#123; num++; &#125; return ; &#125; for(int i = 0; i &lt; child[index].size(); i++) &#123; dfs(child[index][i], depth + 1); &#125;&#125;int main()&#123; int fa, root; scanf("%d%lf%lf", &amp;n, &amp;p, &amp;r); r /= 100; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;fa); if(fa != -1) &#123; child[fa].push_back(i); &#125; else &#123; root = i; &#125; &#125; dfs(root, 0); printf("%.2f %d\n", p * pow(1 + r, maxDepth), num); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1079 Total Sales of Supply Chain (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1079-Total-Sales-of-Supply-Chain-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1079 Total Sales of Supply Chain (25)（25 分）A supply chain is a network of retailers（零售商）, distributors（经销商）, and suppliers（供应商）– everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one’s supplier in a price P and sell or distribute them in a price that is r% higher than P. Only the retailers will face the customers. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the total sales from all the retailers. Input Specification: Each input file contains one test case. For each case, the first line contains three positive numbers: N (&lt;=10^5^), the total number of the members in the supply chain (and hence their ID’s are numbered from 0 to N-1, and the root supplier’s ID is 0); P, the unit price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then N lines follow, each describes a distributor or retailer in the following format: K~i~ ID[1] ID[2] … ID[K~i~] where in the i-th line, K~i~ is the total number of distributors or retailers who receive products from supplier i, and is then followed by the ID’s of these distributors or retailers. K~j~ being 0 means that the j-th member is a retailer, then instead the total amount of the product will be given after K~j~. All the numbers in a line are separated by a space. Output Specification: For each test case, print in one line the total sales we can expect from all the retailers, accurate up to 1 decimal place. It is guaranteed that the number will not exceed 10^10^. Sample Input:123456789101110 1.80 1.003 2 3 51 91 41 70 72 6 11 80 90 40 3 Sample Output:142.4 题目大意：给出一棵树根唯一的销售供应的树，在树根处货物的价格为p，然后从根节点每往子结点走一层，盖层的货物价格会在父亲结点的价格上上涨r%。给出每个叶结点的货物量，求出价格之和。 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 100010;struct node &#123; double data; vector&lt;int&gt; child;&#125;Node[maxn];int n;double p, r, ans = 0;void dfs(int index, int depth) &#123; if(Node[index].child.size() == 0) &#123; ans += Node[index].data * pow(1 + r, depth); return ; &#125; for(int i = 0; i &lt; Node[index].child.size(); i++) &#123; dfs(Node[index].child[i], depth + 1); &#125;&#125;int main()&#123; int k, child; scanf("%d%lf%lf", &amp;n, &amp;p, &amp;r); r /= 100; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;k); if(k == 0) &#123; scanf("%lf", &amp;Node[i].data); &#125; else &#123; for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;child); Node[i].child.push_back(child); &#125; &#125; &#125; dfs(0, 0); printf("%.1f\n", p * ans); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1102 Invert a Binary Tree（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1102-Invert-a-Binary-Tree%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1102 Invert a Binary Tree（25 分）The following is from Max Howell @twitter: Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.Now it’s your turn to prove that YOU CAN invert a binary tree! Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤10) which is the total number of nodes in the tree – and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node from 0 to N−1, and gives the indices of the left and right children of the node. If the child does not exist, a - will be put at the position. Any pair of children are separated by a space. Output Specification:For each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line. Sample Input:12345678981 -- -0 -2 7- -- -5 -4 6 Sample Output:123 7 2 6 4 0 5 16 5 7 4 3 2 0 1 题目大意：二叉树有n个结点，给出每个结点的左右孩子的节点编号，把该二叉树反转，输出反转后二叉树的层序遍历序列和中序遍历序列。 思路：进行后序遍历反转二叉树，在访问根结点时转换lchild和rchild 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 110;struct node &#123; int lchild, rchild;&#125;Node[maxn];bool notRoot[maxn] = &#123;false&#125;;int n, num = 0;void print(int id) &#123; printf("%d", id); num++; if(num &lt; n) &#123; printf(" "); &#125; else &#123; printf("\n"); &#125;&#125;void inorder(int root) &#123; if(root == -1) &#123; return ; &#125; inorder(Node[root].lchild); print(root); inorder(Node[root].rchild);&#125;void bfs(int root) &#123; queue&lt;int&gt; q; q.push(root); while(!q.empty()) &#123; int now = q.front(); q.pop(); print(now); if(Node[now].lchild != -1) &#123; q.push(Node[now].lchild); &#125; if(Node[now].rchild != -1) &#123; q.push(Node[now].rchild); &#125; &#125;&#125;void postorder(int root) &#123; if(root == -1) &#123; return ; &#125; postorder(Node[root].lchild); postorder(Node[root].rchild); swap(Node[root].lchild, Node[root].rchild);&#125;int strTonum(char c) &#123; if(c == '-') &#123; return -1; &#125; else &#123; notRoot[c - '0'] = true; return c - '0'; &#125;&#125;int findRoot() &#123; for(int i = 0; i &lt; n; i++) &#123; if(notRoot[i] == false) &#123; return i; &#125; &#125;&#125;int main()&#123; char lchild, rchild; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++) &#123; getchar(); scanf("%c %c", &amp;lchild, &amp;rchild); Node[i].lchild = strTonum(lchild); Node[i].rchild = strTonum(rchild); &#125; int root = findRoot(); postorder(root); bfs(root); num = 0; inorder(root); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[706. 设计哈希映射]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F706-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84%2F</url>
    <content type="text"><![CDATA[不使用任何内建的哈希表库设计一个哈希映射 具体地说，你的设计应该包含以下的功能 put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。remove(key)：如果映射中存在这个键，删除这个数值对。 示例：123456789MyHashMap hashMap = new MyHashMap();hashMap.put(1, 1); hashMap.put(2, 2); hashMap.get(1); // 返回 1hashMap.get(3); // 返回 -1 (未找到)hashMap.put(2, 1); // 更新已有的值hashMap.get(2); // 返回 1 hashMap.remove(2); // 删除键为2的数据hashMap.get(2); // 返回 -1 (未找到) 注意： 所有的值都在 [1, 1000000]的范围内。操作的总数目在[1, 10000]范围内。不要使用内建的哈希库。1234567891011121314151617181920212223242526272829303132class MyHashMap &#123;public: /** Initialize your data structure here. */ MyHashMap() &#123; HashMap = vector&lt;int&gt; (1000001, -1); &#125; /** value will always be positive. */ void put(int key, int value) &#123; HashMap[key] = value; &#125; /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */ int get(int key) &#123; return HashMap[key]; &#125; /** Removes the mapping of the specified value key if this map contains a mapping for the key */ void remove(int key) &#123; HashMap[key] = -1; &#125;private: vector&lt;int&gt; HashMap;&#125;;/** * Your MyHashMap object will be instantiated and called as such: * MyHashMap obj = new MyHashMap(); * obj.put(key,value); * int param_2 = obj.get(key); * obj.remove(key); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[705. 设计哈希集合]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F705-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[不使用任何内建的哈希表库设计一个哈希集合 具体地说，你的设计应该包含以下的功能 add(value)：向哈希集合中插入一个值。contains(value) ：返回哈希集合中是否存在这个值。remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。 示例:123456789MyHashSet hashSet = new MyHashSet();hashSet.add(1); hashSet.add(2); hashSet.contains(1); // 返回 truehashSet.contains(3); // 返回 false (未找到)hashSet.add(2); hashSet.contains(2); // 返回 truehashSet.remove(2); hashSet.contains(2); // 返回 false (已经被删除) 注意： 所有的值都在 [1, 1000000]的范围内。操作的总数目在[1, 10000]范围内。不要使用内建的哈希集合库。 1234567891011121314151617181920212223242526272829303132333435class MyHashSet &#123;public: /** Initialize your data structure here. */ MyHashSet() &#123; hashSet = vector&lt;bool&gt; (1000001, false); &#125; void add(int key) &#123; hashSet[key] = true; return ; &#125; void remove(int key) &#123; if(hashSet[key]) &#123; hashSet[key] = false; return ; &#125; return ; &#125; /** Returns true if this set did not already contain the specified element */ bool contains(int key) &#123; return hashSet[key]; &#125;private: vector&lt;bool&gt; hashSet;&#125;;/** * Your MyHashSet object will be instantiated and called as such: * MyHashSet obj = new MyHashSet(); * obj.add(key); * obj.remove(key); * bool param_3 = obj.contains(key); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1086 Tree Traversals Again (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1086-Tree-Traversals-Again-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1086 Tree Traversals Again (25)（25 分）An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree. \ Figure 1 Input Specification: Each input file contains one test case. For each case, the first line contains a positive integer N (&lt;=30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). Then 2N lines follow, each describes a stack operation in the format: “Push X” where X is the index of the node being pushed onto the stack; or “Pop” meaning to pop one node from the stack. Output Specification: For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line. Sample Input:123456789101112136Push 1Push 2Push 3PopPopPush 4PopPopPush 5Push 6PopPop Sample Output:13 4 2 6 5 1 题目大意：用栈来模拟一棵二叉树的先序和中序遍历，求这棵二叉树的后序遍历序列，思路：每次访问一个结点就把它入栈，类似先序遍历先访问根结点，所以push的次序就是先序遍历序列中元素的顺序，pop是按照左子树，根结点，右子树的顺序进行，所以pop的次序就是中序遍历序列中的元素顺序。所以就是要根据二叉树的先序遍历序列和中序遍历序列，重构二叉树然后进行后序遍历1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;stack&gt;#include&lt;queue&gt;using namespace std;const int maxn = 50;struct node &#123; int data; node* lchild; node* rchild;&#125;;int pre[maxn], in[maxn], post[maxn];int n;node* create(int preL, int preR, int inL, int inR) &#123; if(preL &gt; preR) &#123; return NULL; &#125; node* root = new node; root-&gt;data = pre[preL]; int k; for(k = inL; k &lt;= inR; k++) &#123; if(in[k] == pre[preL]) &#123; break; &#125; &#125; int numLeft = k - inL; root-&gt;lchild = create(preL + 1, preL + numLeft, inL, k - 1); root-&gt;rchild = create(preL + numLeft + 1, preR, k + 1, inR); return root;&#125;int num = 0;void postorder(node* root) &#123; if(root == NULL) &#123; return; &#125; postorder(root-&gt;lchild); postorder(root-&gt;rchild); printf("%d", root-&gt;data); num++; if(num &lt; n) &#123; printf(" "); &#125;&#125;int main()&#123; scanf("%d", &amp;n); char str[5]; stack&lt;int&gt; st; int x, preIndex = 0, inIndex = 0; for(int i = 0; i &lt; 2 * n; i++) &#123; scanf("%s", str); if(strcmp(str, "Push") == 0) &#123; scanf("%d", &amp;x); pre[preIndex++] = x; st.push(x); &#125; else &#123; in[inIndex++] = st.top(); st.pop(); &#125; &#125; node* root = create(0, n - 1, 0, n - 1); postorder(root); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1091 Acute Stroke (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1091-Acute-Stroke-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1091 Acute Stroke (30)（30 分）One important factor to identify acute stroke (急性脑卒中) is the volume of the stroke core. Given the results of image analysis in which the core regions are identified in each MRI slice, your job is to calculate the volume of the stroke core. Input Specification: Each input file contains one test case. For each case, the first line contains 4 positive integers: M, N, L and T, where M and N are the sizes of each slice (i.e. pixels of a slice are in an M by N matrix, and the maximum resolution is 1286 by 128); L (&lt;=60) is the number of slices of a brain; and T is the integer threshold (i.e. if the volume of a connected core is less than T, then that core must not be counted). Then L slices are given. Each slice is represented by an M by N matrix of 0’s and 1’s, where 1 represents a pixel of stroke, and 0 means normal. Since the thickness of a slice is a constant, we only have to count the number of 1’s to obtain the volume. However, there might be several separated core regions in a brain, and only those with their volumes no less than T are counted. Two pixels are “connected” and hence belong to the same region if they share a common side, as shown by Figure 1 where all the 6 red pixels are connected to the blue one. \ Figure 1 Output Specification: For each case, output in a line the total volume of the stroke core. Sample Input:123456789101112131415163 4 5 21 1 1 11 1 1 11 1 1 10 0 1 10 0 1 10 0 1 11 0 1 10 1 0 00 0 0 01 0 1 10 0 0 00 0 0 00 0 0 10 0 0 11 0 0 0 Sample Output:126 题目大意：给出一个三维数组，数组元素的取值为0或1。与某一个元素相邻的元素为其上下左右前后6个方向的邻接元素。若干个相邻元素的1称为一个块，如果块中1的个数不小于t，则称这个块为卒中核心区。要求所有卒中核心区中1的个数之和。 基本思路：三维广度优先搜索。枚举三维数组的每一个位置，如果为0，则跳过；如果为1，则使用bfs查询与该位置相邻的6个位置，递归判断他们是否为1。为了防止重复判断，用一个inq数组标记每个位置是否已经入队。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include&lt;queue&gt;using namespace std;struct node &#123; int x, y, z;&#125;Node;int n, m, slice, t;int pixel[1290][130][61];bool inq[1290][130][61] = &#123;false&#125;;int X[6] = &#123;0, 0, 0, 0, 1, -1&#125;;int Y[6] = &#123;0, 0, 1, -1, 0, 0&#125;;int Z[6] = &#123;1, -1, 0, 0, 0, 0&#125;;bool judge(int x, int y, int z) &#123; if(x &gt;= n || x &lt; 0 || y &gt;= m || y &lt; 0 || z &gt;= slice || z &lt; 0) &#123; return false; &#125; if(pixel[x][y][z] == 0 || inq[x][y][z] == true) &#123; return false; &#125; return true;&#125;int bfs(int x, int y, int z) &#123; int tot = 0; queue&lt;node&gt; q; Node.x = x, Node.y = y, Node.z = z; q.push(Node); inq[x][y][z] = true; while(!q.empty()) &#123; node top = q.front(); q.pop(); tot++; for(int i = 0; i &lt; 6; i++) &#123; int newx = top.x + X[i]; int newy = top.y + Y[i]; int newz = top.z + Z[i]; if(judge(newx, newy, newz)) &#123; Node.x = newx; Node.y = newy; Node.z = newz; q.push(Node); inq[newx][newy][newz] = true; &#125; &#125; &#125; if(tot &gt;= t) &#123; return tot; &#125; else &#123; return 0; &#125;&#125;int main()&#123; scanf("%d%d%d%d", &amp;n, &amp;m, &amp;slice, &amp;t); for(int z = 0; z &lt; slice; z++) &#123; for(int x = 0; x &lt; n; x++) &#123; for(int y = 0; y &lt; m; y++) &#123; scanf("%d", &amp;pixel[x][y][z]); &#125; &#125; &#125; int ans = 0; for(int z = 0; z &lt; slice; z++) &#123; for(int x = 0; x &lt; n; x++) &#123; for(int y = 0; y &lt; m; y++) &#123; if(pixel[x][y][z] == 1 &amp;&amp; inq[x][y][z] == false) &#123; ans += bfs(x, y, z); &#125; &#125; &#125; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[680. 验证回文字符串 Ⅱ]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F680-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2-%E2%85%A1%2F</url>
    <content type="text"><![CDATA[给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。 示例 1:12输入: &quot;aba&quot;输出: True 示例 2:12输入: &quot;abca&quot;输出: True 解释: 你可以删除c字符。注意: 字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。 考虑双指针，从两段向中间进行比较，如果发现不匹配，因为只能删除一个字符，所以只有两种情况，即左指针后移或右指针前移。123456789101112131415161718192021222324class Solution &#123;public: bool validPalindrome(string s) &#123; int left = 0, right = s.size() - 1; while(left &lt; right) &#123; if(s[left] != s[right]) &#123; return isPalindrome(s, left + 1, right) || isPalindrome(s, left, right - 1); &#125; ++left; --right; &#125; return true; &#125; bool isPalindrome(string&amp; s, int left, int right) &#123; while(left &lt; right) &#123; if(s[left] != s[right]) &#123; return false; &#125; ++left; --right; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[674. 最长连续递增序列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F674-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[给定一个未经排序的整数数组，找到最长且连续的的递增序列。 示例 1:12输入: [1,3,5,4,7]输出: 3 解释: 最长连续递增序列是 [1,3,5], 长度为3。尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。示例 2:12输入: [2,2,2,2,2]输出: 1 解释: 最长连续递增序列是 [2], 长度为1。注意：数组长度不会超过10000。 思路：遍历数组的时候用一个临时变量记录连续递增序列的长度，对每次的结果去最大值123456789101112131415161718class Solution &#123;public: int findLengthOfLCIS(vector&lt;int&gt;&amp; nums) &#123; if(nums.size() == 0) &#123; return 0; &#125; int maxm = -1, temp = 1; for(int i = 1; i &lt; nums.size(); i++) &#123; if(nums[i] &gt; nums[i - 1]) &#123; temp += 1; &#125; else &#123; maxm = max(maxm, temp); temp = 1; &#125; &#125; return max(maxm, temp); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[661. 图片平滑器]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F661-%E5%9B%BE%E7%89%87%E5%B9%B3%E6%BB%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均灰度 (向下舍入) ，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八个，则尽可能多的利用它们。 示例 1:123456789101112输入:[[1,1,1], [1,0,1], [1,1,1]]输出:[[0, 0, 0], [0, 0, 0], [0, 0, 0]]解释:对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0 注意: 给定矩阵中的整数范围为 [0, 255]。矩阵的长和宽的范围均为 [1, 150]。123456789101112131415161718192021222324252627class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; imageSmoother(vector&lt;vector&lt;int&gt;&gt;&amp; M) &#123; int rows = M.size(); int cols = M[0].size(); vector&lt;vector&lt;int&gt;&gt; res = M; for(int i=0; i&lt;rows; i++) &#123; for(int j=0; j&lt;cols; j++) &#123; int sum = 0; int count = 0; // sum 3x3 area and take care of the boundary for(int x=max(0,i-1); x&lt;=min(rows-1, i+1); x++) &#123; for(int y=max(0, j-1); y&lt;=min(cols-1, j+1); y++) &#123; sum += M[x][y]; // sum up cells value count++; // count cells number &#125; &#125; res[i][j] = sum / count; // get average value &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[836. 矩形重叠]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F836-%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0%2F</url>
    <content type="text"><![CDATA[矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。 如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。 给出两个矩形，判断它们是否重叠并返回结果。 示例 1：12输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]输出：true 示例 2：12输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]输出：false 说明： 两个矩形 rec1 和 rec2 都以含有四个整数的列表的形式给出。矩形中的所有坐标都处于 -10^9 和 10^9 之间。 考虑重叠部分矩形的左下角坐标和右上角坐标12345678910class Solution &#123;public: bool isRectangleOverlap(vector&lt;int&gt;&amp; rec1, vector&lt;int&gt;&amp; rec2) &#123; int x1 = max(rec1[0], rec2[0]); int x2 = min(rec1[2], rec2[2]); int y1 = max(rec1[1], rec2[1]); int y2 = min(rec1[3], rec2[3]); return x1 &lt; x2 &amp;&amp; y1 &lt; y2; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[695. 岛屿的最大面积]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF%2F</url>
    <content type="text"><![CDATA[给定一个包含了一些 0 和 1的非空二维数组 grid , 一个 岛屿 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。 找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。) 示例 1:1234567891011121314[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]]对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。示例 2:[[0,0,0,0,0,0,0,0]]对于上面这个给定的矩阵, 返回 0。 注意: 给定的矩阵grid 的长度和宽度都不超过 50。 用dfs或bfs搜索遍历二维数组。 深度优先搜索借助递归，沿着某找路径往下直到结束。123456789101112131415161718192021222324252627282930313233343536class Solution &#123;public: int maxAreaOfIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123; if(grid.empty()) &#123; return 0; &#125; int res = 0; vector&lt;vector&lt;bool&gt;&gt; mark(grid.size(), vector&lt;bool&gt;(grid[0].size(), false)); int deep = grid.size(); int len = grid[0].size(); for(int i = 0; i &lt; deep; i++) &#123; for(int j = 0; j &lt; len; j++) &#123; if(mark[i][j]) &#123; continue; &#125; int temp = dfs(grid, i, j, mark); res = max(res, temp); &#125; &#125; return res; &#125;private: int dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y, vector&lt;vector&lt;bool&gt;&gt;&amp; mark) &#123; if(x &gt;= grid.size() || y &gt;= grid[0].size() || x &lt; 0 || y &lt; 0) &#123; return 0; &#125; if(mark[x][y]) &#123; return 0; &#125; if(grid[x][y] == 0) &#123; return 0; &#125; mark[x][y] = true; return 1 + dfs(grid, x + 1, y, mark) + dfs(grid, x - 1, y, mark) + dfs(grid, x, y + 1, mark) + dfs(grid, x, y - 1, mark); &#125;&#125;; bfs需要借助栈进行一层层遍历搜索。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution &#123;public: int maxAreaOfIsland(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123; if(grid.empty()) &#123; return 0; &#125; int res = 0; vector&lt;vector&lt;bool&gt;&gt; mark(grid.size(), vector&lt;bool&gt;(grid[0].size(), false)); int deep = grid.size(); int len = grid[0].size(); for(int i = 0; i &lt; deep; i++) &#123; for(int j = 0; j &lt; len; j++) &#123; if(mark[i][j]) &#123; continue; &#125; if(grid[i][j] == 0) &#123; continue; &#125; int temp = 0; stack&lt;pair&lt;int, int&gt;&gt; st; st.push(make_pair(i, j)); mark[i][j] = true; while(!st.empty()) &#123; temp++; pair&lt;int, int&gt; cur = st.top(); st.pop(); int x = cur.first; int y = cur.second; if(x - 1 &gt;= 0 &amp;&amp; grid[x - 1][y] == 1 &amp;&amp; mark[x - 1][y] == false) &#123; st.push(make_pair(x - 1, y)); mark[x - 1][y] = true; &#125; if(x + 1 &lt; deep &amp;&amp; grid[x + 1][y] == 1 &amp;&amp; mark[x + 1][y] == false) &#123; st.push(make_pair(x + 1, y)); mark[x + 1][y] = true; &#125; if(y - 1 &gt;= 0 &amp;&amp; grid[x][y - 1] == 1 &amp;&amp; mark[x][y - 1] == false) &#123; st.push(make_pair(x, y - 1)); mark[x][y - 1] = true; &#125; if(y + 1 &lt; len &amp;&amp; grid[x][y + 1] == 1 &amp;&amp; mark[x][y + 1] == false) &#123; st.push(make_pair(x, y + 1)); mark[x][y + 1] = true; &#125; &#125; res = max(res, temp); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[849. 到最近的人的最大距离]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F849-%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%BA%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%9D%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[在一排座位（ seats）中，1 代表有人坐在座位上，0 代表座位上是空的。 至少有一个空座位，且至少有一人坐在座位上。 亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。 返回他到离他最近的人的最大距离。 示例 1：12345678910输入：[1,0,0,0,1,0,1]输出：2解释：如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。因此，他到离他最近的人的最大距离是 2 。 示例 2：输入：[1,0,0,0]输出：3 解释：如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。这是可能的最大距离，所以答案是 3 。提示： 1 &lt;= seats.length &lt;= 20000seats 中只含有 0 和 1，至少有一个 0，且至少有一个 1。 考虑三种情况，根据0的个数来计算，最左边或最右边有最多的连续0，那么结果就是相应0的个数，如果连续0在中间，连续0位为偶数个，那么个数/2就行，否则还要加上1。12345678910111213141516171819202122232425262728293031323334353637383940class Solution &#123;public: int maxDistToClosest(vector&lt;int&gt;&amp; seats) &#123; int cnt = 0, res = 0, n = seats.size(); int i = 0; for(; i &lt; n; i++) &#123; if(seats[i] == 0) &#123; cnt++; &#125; else &#123; break; &#125; &#125; res = max(cnt, res); cnt = 0; int j = n - 1; for(; j &gt;= 0; j--) &#123; if(seats[j] == 0) &#123; cnt++; &#125; else &#123; break; &#125; &#125; res = max(cnt, res); cnt = 0; while(i &lt; j) &#123; if(seats[i] == 0) &#123; cnt++; &#125; else &#123; cnt = 0; &#125; if(cnt % 2 == 0) &#123; res = max(res, cnt / 2); &#125; else &#123; res = max(res, cnt / 2 + 1); &#125; i++; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[821. 字符的最短距离]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F821-%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组。 示例 1:12输入: S = &quot;loveleetcode&quot;, C = &apos;e&apos;输出: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] 说明: 字符串 S 的长度范围为 [1, 10000]。C 是一个单字符，且保证是字符串 S 里的字符。S 和 C 中的所有字母均为小写字母。12345678910111213141516171819class Solution &#123;public: vector&lt;int&gt; shortestToChar(string S, char C) &#123; int n = S.size(); vector&lt;int&gt; ans(n, n); for(int i = 0; i &lt; n; i++) &#123; if(S[i] == C) &#123; ans[i] = 0; &#125; &#125; for(int i = 1; i &lt; n; i++) &#123; ans[i] = min(ans[i], ans[i - 1] + 1); &#125; for(int i = n - 2; i &gt;= 0; i--) &#123; ans[i] = min(ans[i], ans[i + 1] + 1); &#125; return ans; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[724. 寻找数组的中心索引]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。 我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。 示例 1:12345678910111213输入: nums = [1, 7, 3, 6, 5, 6]输出: 3解释: 索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。同时, 3 也是第一个符合要求的中心索引。示例 2:输入: nums = [1, 2, 3]输出: -1解释: 数组中不存在满足此条件的中心索引。 说明: nums 的长度范围为 [0, 10000]。任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 思路：先求出数组总和，然后遍历数组，判断左侧和与右侧和是否相等，右侧和可以用总和减去左侧和减去nums[i]表示12345678910111213141516171819class Solution &#123;public: int pivotIndex(vector&lt;int&gt;&amp; nums) &#123; if(nums.size() == 0) &#123; return -1; &#125; int sum = 0, leftsum = 0; for(int i = 0; i &lt; nums.size(); i++) &#123; sum += nums[i]; &#125; for(int i = 0; i &lt; nums.size(); i++) &#123; if(leftsum == sum - leftsum - nums[i]) &#123; return i; &#125; leftsum += nums[i]; &#125; return -1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[700. 二叉搜索树中的搜索]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。 例如， 给定二叉搜索树:12345 4 / \ 2 7 / \1 3 和值: 2你应该返回如下子树:1234 2 / \ 1 3在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。 123456789101112131415161718192021222324/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* searchBST(TreeNode* root, int val) &#123; if(root == NULL) &#123; return NULL; &#125; if(root-&gt;val == val) &#123; return root; &#125; else if(root-&gt;val &gt; val) &#123; return searchBST(root-&gt;left, val); &#125; else &#123; return searchBST(root-&gt;right, val); &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[783. 二叉搜索树结点最小距离]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F783-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%BB%93%E7%82%B9%E6%9C%80%E5%B0%8F%E8%B7%9D%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[给定一个二叉搜索树的根结点 root, 返回树中任意两节点的差的最小值。 示例：123456789101112输入: root = [4,2,6,1,3,null,null]输出: 1解释:注意，root是树结点对象(TreeNode object)，而不是数组。给定的树 [4,2,6,1,3,null,null] 可表示为下图: 4 / \ 2 6 / \ 1 3 最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。注意： 二叉树的大小范围在 2 到 100。二叉树总是有效的，每个节点的值都是整数，且不重复。12345678910111213141516171819202122232425262728/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int minDiffInBST(TreeNode* root) &#123; int res = INT_MAX, pre = INT_MAX; getres(root, pre, res); return res; &#125; void getres(TreeNode* root, int&amp; pre, int&amp; res) &#123; if(root==NULL) &#123; return; &#125; getres(root-&gt;left, pre, res); if(pre != INT_MAX) &#123; res = min(res, abs(pre - root-&gt;val)); &#125; pre = root-&gt;val; getres(root-&gt;right, pre, res); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[671. 二叉树中第二小的节点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F671-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%B0%8F%E7%9A%84%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。 给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。 示例 1:1234567891011121314151617输入: 2 / \ 2 5 / \ 5 7输出: 5说明: 最小的值是 2 ，第二小的值是 5 。示例 2:输入: 2 / \ 2 2输出: -1 说明: 最小的值是 2, 但是不存在第二小的值。12345678910111213141516171819202122232425262728293031323334/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int findSecondMinimumValue(TreeNode* root) &#123; set&lt;int&gt; res; stack&lt;TreeNode* &gt; s; s.push(root); while(!s.empty()) &#123; TreeNode* node = s.top(); s.pop(); res.insert(node-&gt;val); if(node-&gt;left) &#123; s.push(node-&gt;left); &#125; if(node-&gt;right) &#123; s.push(node-&gt;right); &#125; &#125; set&lt;int&gt;::iterator it = res.begin(); if(res.size() &gt; 1) &#123; return *(++it); &#125; else &#123; return -1; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[669. 修剪二叉搜索树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R&gt;=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。 示例 1:1234567891011121314151617181920212223242526272829303132输入: 1 / \ 0 2 L = 1 R = 2输出: 1 \ 2示例 2:输入: 3 / \ 0 4 \ 2 / 1 L = 1 R = 3输出: 3 / 2 / 1 先看根节点：如果节点值比L还小，说明根节点和左子树都需要被剪掉，继续对右子树进行修剪。如果节点值比R还大，说明根节点和右子树都需要被剪掉。继续对左子树进行修剪。如果节点值在区间内:则对左子树和右子树再进行修剪。 1234567891011121314151617181920212223242526 /** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* trimBST(TreeNode* root, int L, int R) &#123; if(root == NULL) &#123; return NULL; &#125; if(root-&gt;val &lt; L) &#123; return trimBST(root-&gt;right, L, R); &#125; if(root-&gt;val &gt; R) &#123; return trimBST(root-&gt;left, L, R); &#125; root-&gt;left = trimBST(root-&gt;left, L, R); root-&gt;right = trimBST(root-&gt;right, L, R); return root; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[479. 最大回文数乘积]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F479-%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E6%95%B0%E4%B9%98%E7%A7%AF%2F</url>
    <content type="text"><![CDATA[你需要找到由两个 n 位数的乘积组成的最大回文数。 由于结果会很大，你只需返回最大回文数 mod 1337得到的结果。 示例:12345输入: 2输出: 987解释: 99 x 91 = 9009, 9009 % 1337 = 987 说明: n 的取值范围为 [1,8]。分析：直接暴力搜索是要超时的。先确定n位数的范围，然后遍历这个区间的数字。当n&gt;1时，两个n位数乘积的最大回文数一定是2n位的。所以将当前数字的前半段反转后拼接到后面，组成一个回文数 12345678910111213141516class Solution &#123;public: int largestPalindrome(int n) &#123; int upper = pow(10, n) - 1, lower = upper / 10; for(int i = upper; i &gt; lower; i--) &#123; string t = to_string(i); long p = stol(t + string(t.rbegin(), t.rend())); for(long j = upper; j * j &gt; p; j--) &#123; if(p % j == 0) &#123; return p % 1337; &#125; &#125; &#125; return 9; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[475. 供暖器]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F475-%E4%BE%9B%E6%9A%96%E5%99%A8%2F</url>
    <content type="text"><![CDATA[冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。 现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。 所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。 说明: 给出的房屋和供暖器的数目是非负数且不会超过 25000。给出的房屋和供暖器的位置均是非负数且不会超过10^9。只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。所有供暖器都遵循你的半径标准，加热的半径也一样。示例 1:123输入: [1,2,3],[2]输出: 1解释: 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。 示例 2:123输入: [1,2,3,4],[1,4]输出: 1解释: 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。 二分解法：123456789101112131415161718192021222324252627282930313233class Solution &#123;public: int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123; sort(heaters.begin(), heaters.end()); int radius = 0; for(int h : houses) &#123; radius = max(radius, binarySearch(h, heaters)); &#125; return radius; &#125;private: int binarySearch(int val, vector&lt;int&gt; heaters) &#123; int left = 0; int right = heaters.size() - 1; int diff = INT_MAX; while(left &lt; right) &#123; int mid = left + (right - left) / 2; if(val &lt; heaters[mid]) &#123; right = mid; &#125; else &#123; left = mid + 1; &#125; &#125; if(left &gt; 0) &#123; diff = min(abs(val - heaters[left]), abs(val - heaters[left - 1])); &#125; if(left &lt; heaters.size() - 1) &#123; diff = min(diff, abs(val - heaters[left + 1])); &#125; diff = min(diff, abs(val - heaters[left])); return diff; &#125;&#125;; 双指针法：123456789101112131415class Solution &#123;public: int findRadius(vector&lt;int&gt;&amp; houses, vector&lt;int&gt;&amp; heaters) &#123; sort(houses.begin(), houses.end()); sort(heaters.begin(), heaters.end()); int i = 0, res = 0; for(int house : houses) &#123; while(i &lt; heaters.size() - 1 &amp;&amp; heaters[i] + heaters[i + 1] &lt;= house * 2) &#123; i++; &#125; res = max(res, abs(heaters[i] - house)); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[482. 密钥格式化]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F482-%E5%AF%86%E9%92%A5%E6%A0%BC%E5%BC%8F%E5%8C%96%2F</url>
    <content type="text"><![CDATA[给定一个密钥字符串S，只包含字母，数字以及 ‘-‘（破折号）。N 个 ‘-‘ 将字符串分成了 N+1 组。给定一个数字 K，重新格式化字符串，除了第一个分组以外，每个分组要包含 K 个字符，第一个分组至少要包含 1 个字符。两个分组之间用 ‘-‘（破折号）隔开，并且将所有的小写字母转换为大写字母。 给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。 示例 1：123输入：S = &quot;5F3Z-2e-9-w&quot;, K = 4输出：&quot;5F3Z-2E9W&quot; 解释：字符串 S 被分成了两个部分，每部分 4 个字符； 注意，两个额外的破折号需要删掉。示例 2：123输入：S = &quot;2-5g-3-J&quot;, K = 2输出：&quot;2-5G-3J&quot; 解释：字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。 提示: S 的长度不超过 12,000，K 为正整数S 只包含字母数字（a-z，A-Z，0-9）以及破折号’-‘S 非空思路：忽略原字符串的连接号从后往前遍历。当字符个数整除k的时候要把多余的-pop掉1234567891011121314151617181920212223class Solution &#123;public: string licenseKeyFormatting(string S, int K) &#123; string res = ""; int countk = 0; for(int i = S.size() - 1; i &gt;= 0; i--) &#123; char letter = S[i]; if(letter != '-') &#123; res += toupper(letter); countk++; if(countk == K) &#123; res += '-'; countk = 0; &#125; &#125; &#125; if(res.size() != 0 &amp;&amp; res[res.size() - 1] == '-') &#123; res.pop_back(); &#125; reverse(res.begin(), res.end()); return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1024 Palindromic Number (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1024-Palindromic-Number-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers. Non-palindromic numbers can be paired with palindromic ones via a series of operations. First, the non-palindromic number is reversed and the result is added to the original number. If the result is not a palindromic number, this is repeated until it gives a palindromic number. For example, if we start from 67, we can obtain a palindromic number in 2 steps: 67 + 76 = 143, and 143 + 341 = 484. Given any positive integer N, you are supposed to find its paired palindromic number and the number of steps taken to find it. Input Specification: Each input file contains one test case. Each case consists of two positive numbers N and K, where N (&lt;= 10^10^) is the initial numer and K (&lt;= 100) is the maximum number of steps. The numbers are separated by a space. Output Specification: For each test case, output two numbers, one in each line. The first number is the paired palindromic number of N, and the second number is the number of steps taken to find the palindromic number. If the palindromic number is not found after K steps, just output the number obtained at the Kth step and K instead. Sample Input 1:167 3 Sample Output 1:124842 Sample Input 2:169 3 Sample Output 2:1213533 题目大意：给定一个正整数和操作次数限制，问在给定限制内能否得到回文数。该操作为让一个整数加上这个整数首尾颠倒的数字。思路：讲几个主要步骤写成分个函数1 将字符串转化为相应结构的大整数2 实现高精度的a + b，可以直接用模板3 判断是否回文4 输出函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;struct bign &#123; int d[10000]; int len; bign() &#123; memset(d, 0, sizeof(d)); len = 0; &#125;&#125;;bign change(string str) &#123; bign a; a.len = str.size(); for(int i = 0; i &lt; a.len; i++) &#123; a.d[i] = str[a.len - i - 1] - '0'; &#125; return a;&#125;bign add(bign a, bign b) &#123; bign c; int carry = 0; for(int i = 0; i &lt; a.len || i &lt; b.len; i++) &#123; int temp = a.d[i] + b.d[i] + carry; c.d[c.len++] = temp % 10; carry = temp / 10; &#125; if(carry != 0) &#123; c.d[c.len++] = carry; &#125; return c;&#125;bool judge(bign a) &#123; for(int i = 0; i &lt;= a.len / 2; i++) &#123; if(a.d[i] != a.d[a.len - i - 1]) &#123; return false; &#125; &#125; return true;&#125;void print(bign a) &#123; for(int i = a.len - 1; i &gt;= 0; i--) &#123; printf("%d",a.d[i]); &#125; printf("\n");&#125;int main() &#123; string str; int t, k = 0; cin&gt;&gt;str&gt;&gt;t; bign a = change(str); while(k &lt; t &amp;&amp; judge(a) == false) &#123; bign b = a; reverse(b.d, b.d + b.len); a = add(a, b); k++; &#125; print(a); printf("%d\n", k); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[599. 两个列表的最小索引总和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F599-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C%2F</url>
    <content type="text"><![CDATA[假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。 你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。 示例 1:12345输入:[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;][&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]输出: [&quot;Shogun&quot;]解释: 他们唯一共同喜爱的餐厅是“Shogun”。 示例 2:12345输入:[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;][&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]输出: [&quot;Shogun&quot;]解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。 提示: 两个列表的长度范围都在 [1, 1000]内。两个列表中的字符串的长度将在[1，30]的范围内。下标从0开始，到列表的长度减1。两个列表都没有重复的元素。 思路：考察哈希表，用空间换时间，用map建立第一个列表字符串和索引的映射，然后在第二个列表里面遍历查找最小索引。1234567891011121314151617181920212223class Solution &#123;public: vector&lt;string&gt; findRestaurant(vector&lt;string&gt;&amp; list1, vector&lt;string&gt;&amp; list2) &#123; vector&lt;string&gt; res; map&lt;string, int&gt; data; int minVal = INT_MAX; for(int i = 0; i &lt;list1.size(); i++) &#123; data.insert(pair&lt;string, int&gt;(list1[i], i)); &#125; for(int i = 0; i &lt; list2.size(); i++) &#123; if(data.find(list2[i]) != data.end()) &#123; if(data[list2[i]] + i &lt; minVal) &#123; minVal = data[list2[i]] + i; res.clear(); res.push_back(list2[i]); &#125; else if(data[list2[i]] + i == minVal) &#123; res.push_back(list2[i]); &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[598. 范围求和 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F598-%E8%8C%83%E5%9B%B4%E6%B1%82%E5%92%8C-II%2F</url>
    <content type="text"><![CDATA[给定一个初始元素全部为 0，大小为 m*n 的矩阵 M 以及在 M 上的一系列更新操作。 操作用二维数组表示，其中的每个操作用一个含有两个正整数 a 和 b 的数组表示，含义是将所有符合 0 &lt;= i &lt; a 以及 0 &lt;= j &lt; b 的元素 M[i][j] 的值都增加 1。 在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。 示例 1:12345678910111213141516171819输入: m = 3, n = 3operations = [[2,2],[3,3]]输出: 4解释: 初始状态, M = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]执行完操作 [2,2] 后, M = [[1, 1, 0], [1, 1, 0], [0, 0, 0]]执行完操作 [3,3] 后, M = [[2, 2, 1], [2, 2, 1], [1, 1, 1]] M 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。注意: m 和 n 的范围是 [1,40000]。a 的范围是 [1,m]，b 的范围是 [1,n]。操作数目不超过 10000。 12345678910class Solution &#123;public: int maxCount(int m, int n, vector&lt;vector&lt;int&gt;&gt;&amp; ops) &#123; for(auto op : ops) &#123; m = min(m, op[0]); n = min(n, op[1]); &#125; return m * n; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[594. 最长和谐子序列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F594-%E6%9C%80%E9%95%BF%E5%92%8C%E8%B0%90%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。 现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。 示例 1:123输入: [1,3,2,2,5,2,3,7]输出: 5原因: 最长的和谐数组是：[3,2,2,2,3]. 说明: 输入的数组长度最大不超过20,000. 思路：题目要求最长和谐子序列的长度，实际上就是让你求数组里面大小相差为1，并且个数最多的那两个数的数量。考察了哈希表的思想。可以直接利用map的映射特性和自动排序特性，建立一个数和该数个数的映射，然后遍历map，求值 123456789101112131415161718class Solution &#123;public: int findLHS(vector&lt;int&gt;&amp; nums) &#123; int res = 0; map&lt;int, int&gt; m; for(int i = 0; i &lt; nums.size(); i++) &#123; m[nums[i]]++; &#125; map&lt;int, int&gt;::iterator it = m.begin(), pre; for(;it != m.end(); it++) &#123; pre = prev(it); if(it-&gt;first == pre-&gt;first + 1) &#123; res = max(res, it-&gt;second + pre-&gt;second); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[581. 最短无序连续子数组]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F581-%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。 你找到的子数组应是最短的，请输出它的长度。 示例 1:123输入: [2, 6, 4, 8, 10, 9, 15]输出: 5解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。 说明 : 输入的数组长度范围在 [1, 10,000]。输入的数组可能包含重复元素 ，所以升序的意思是&lt;=。 法一：我觉得简单的写法还是用个辅助数组，也就是一个对原数组已进行排序的数组，然后分别从头尾往中间遍历找到第一个不匹配的位置123456789101112131415class Solution &#123;public: int findUnsortedSubarray(vector&lt;int&gt;&amp; nums) &#123; int i = 0, j = nums.size() - 1; vector&lt;int&gt; help = nums; sort(help.begin(), help.end()); while(i &lt; nums.size() &amp;&amp; help[i] == nums[i]) &#123; ++i; &#125; while(j &gt; i &amp;&amp; help[j] == nums[j]) &#123; --j; &#125; return j - i + 1; &#125;&#125;; 法二： 要求无序连续子数组的长度，那么就需要确定该无序连续子数组的起始和结尾位置。 12345678910111213141516171819202122class Solution &#123;public: int findUnsortedSubarray(vector&lt;int&gt;&amp; nums) &#123; int res = 0; int start = -1; int len = nums.size(); for(int i = 1; i &lt; len; i++) &#123; if(nums[i] &lt; nums[i - 1]) &#123; int j = i; while(j &gt; 0 &amp;&amp; nums[j] &lt; nums[j - 1]) &#123; swap(nums[j], nums[j - 1]); --j; &#125; if(start == -1 || start &gt; j) &#123; start = j; &#125; res = max(res, i - start + 1); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[876. 链表的中间结点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9%2F</url>
    <content type="text"><![CDATA[给定一个带有头结点 head 的非空单链表，返回链表的中间结点。 如果有两个中间结点，则返回第二个中间结点。 示例 1：12345输入：[1,2,3,4,5]输出：此列表中的结点 3 (序列化形式：[3,4,5])返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。注意，我们返回了一个 ListNode 类型的对象 ans，这样：ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL. 示例 2：123输入：[1,2,3,4,5,6]输出：此列表中的结点 4 (序列化形式：[4,5,6])由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。 提示： 给定链表的结点数介于 1 和 100 之间。 分析，求给定单链表的中间节点，用双指针思想，定义两个指针都指向头结点，一个指针每次走两步，一个每次走一步，当快指针到达最后结点，慢指针指向的就是中间结点1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* middleNode(ListNode* head) &#123; if(head == NULL || head-&gt;next == NULL) &#123; return head; &#125; ListNode* pa = head; ListNode* pb = head; while(pa-&gt;next != NULL) &#123; pa = pa-&gt;next; pb = pb-&gt;next; if(pa-&gt;next != NULL) &#123; pa = pa-&gt;next; &#125; &#125; return pb; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[501. 二叉搜索树中的众数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F501-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。 假定 BST 有如下定义： 结点左子树中所含结点的值小于等于当前结点的值结点右子树中所含结点的值大于等于当前结点的值左子树和右子树都是二叉搜索树例如：给定 BST [1,null,2,2],123456 1 \ 2 / 2返回[2]. 提示：如果众数超过1个，不需考虑输出顺序 进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内） 思路：常规解法是直接遍历二叉树，用哈希表来计数，但是空间复杂度就要求O(n)或者利用二叉搜索树的性质，进行中序遍历后的序列是有序序列，因此可以在中序遍历时求众数12345678910111213141516171819202122232425262728293031323334353637/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; res; int mx = 0, cnt = 1; vector&lt;int&gt; findMode(TreeNode* root) &#123; TreeNode* pre = NULL; inorder(root, pre); return res; &#125; void inorder(TreeNode* node, TreeNode*&amp; pre) &#123; if(!node) &#123; return ; &#125; inorder(node-&gt;left, pre); if(pre) &#123; cnt = (node-&gt;val == pre-&gt;val) ? cnt + 1 : 1; &#125; if(cnt &gt;= mx) &#123; if(cnt &gt; mx) &#123; res.clear(); &#125; res.push_back(node-&gt;val); mx = cnt; &#125; pre = node; inorder(node-&gt;right, pre); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[563. 二叉树的坡度]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F563-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9D%A1%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，计算整个树的坡度。 一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0。 整个树的坡度就是其所有节点的坡度之和。 示例:12345678910输入: 1 / \ 2 3输出: 1解释: 结点的坡度 2 : 0结点的坡度 3 : 0结点的坡度 1 : |2-3| = 1树的坡度 : 0 + 0 + 1 = 1 注意: 任何子树的结点的和不会超过32位整数的范围。坡度的值不会超过32位整数的范围。 用后序遍历，直接从叶结点开始计算左右子树和，直接进行坡度计算1234567891011121314151617181920212223242526272829/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int res = 0; int findTilt(TreeNode* root) &#123; if(root == NULL) &#123; return res; &#125; helper(root); return res; &#125; int helper(TreeNode* root) &#123; if(root == NULL) &#123; return 0; &#125; int sumLeft = helper(root-&gt;left); int sumRight = helper(root-&gt;right); res += abs(sumLeft - sumRight); return sumLeft + sumRight + root-&gt;val; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[606. 根据二叉树创建字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F606-%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。 空节点则用一对空括号 “()” 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。 示例 1:12345678输入: 二叉树: [1,2,3,4] 1 / \ 2 3 / 4 输出: &quot;1(2(4))(3)&quot; 解释: 原本将是“1(2(4)())(3())”，在你省略所有不必要的空括号对之后，它将是“1(2(4))(3)”。示例 2:12345678输入: 二叉树: [1,2,3,null,4] 1 / \ 2 3 \ 4 输出: &quot;1(2()(4))(3)&quot; 解释: 和第一个示例相似，除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。 思路：按照先序遍历根结点-左子树-右子树的顺序递归，在左子结点为空但右子结点不为空的时候递归加上”()”1234567891011121314151617181920212223242526272829303132/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: string tree2str(TreeNode* t) &#123; string res; if(t == NULL) &#123; return ""; &#125; helper(t, res); return string(res.begin() + 1, res.end() - 1); &#125; void helper(TreeNode* t, string&amp; res) &#123; if(t == NULL) &#123; return ; &#125; res += "(" + to_string(t-&gt;val); if(t-&gt;left == NULL &amp;&amp; t-&gt;right != NULL) &#123; res += "()"; &#125; helper(t-&gt;left, res); helper(t-&gt;right, res); res += ")"; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1023 Have Fun with Numbers (20)（20 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1023-Have-Fun-with-Numbers-20-%EF%BC%8820-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again! Now you are suppose to check if there are more numbers with this property. That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number. Input Specification: Each input file contains one test case. Each case contains one positive integer with no more than 20 digits. Output Specification: For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number. Sample Input:11234567899 Sample Output:12Yes2469135798 题目大意：给一个长度不超过20位的整数，问这个整数的两倍后的数位是不是原整数数位的一个排列。 判断是不是原整数数位的一个排列可以开一个count数组，用来存放0~9中每个数字出现次数，对新整数中出现的每个数字都在相应位置减1，最后判断coun数组中元素的值是不是都是012345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;using namespace std;struct bign &#123; int d[21]; int len; bign() &#123; memset(d, 0 ,sizeof(d)); len = 0; &#125;&#125;;bign change(string str) &#123; bign a; a.len = str.size(); for(int i = 0; i &lt; a.len; i++) &#123; a.d[i] = str[a.len - i - 1] - '0'; &#125; return a;&#125;bign multi(bign a, int b) &#123; bign c; int carry = 0; for(int i = 0; i &lt; a.len; i++) &#123; int temp = a.d[i] * b + carry; c.d[c.len++] = temp % 10; carry = temp / 10; &#125; while(carry != 0) &#123; c.d[c.len++] = carry % 10; carry /= 10; &#125; return c;&#125;bool judge(bign a, bign b) &#123; if(a.len != b.len) &#123; return false; &#125; int count[10] = &#123;0&#125;; for(int i = 0; i &lt; a.len; i++) &#123; count[a.d[i]]++; count[b.d[i]]--; &#125; for(int i = 0; i &lt; 10; i++) &#123; if(count[i] != 0) &#123; return false; &#125; &#125; return true;&#125;void print(bign a) &#123; for(int i = a.len - 1; i &gt;= 0; i--) &#123; printf("%d", a.d[i]); &#125;&#125;int main() &#123; string str; getline(cin, str); bign a = change(str); bign mul = multi(a, 2); if(judge(a, mul)) &#123; printf("Yes\n"); &#125; else &#123; printf("No\n"); &#125; print(mul); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1096 Consecutive Factors (20)（20 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1096-Consecutive-Factors-20-%EF%BC%8820-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Among all the factors of a positive integer N, there may exist several consecutive numbers. For example, 630 can be factored as 356*7, where 5, 6, and 7 are the three consecutive numbers. Now given any positive N, you are supposed to find the maximum number of consecutive factors, and list the smallest sequence of the consecutive factors. Input Specification: Each input file contains one test case, which gives the integer N (1&lt;N&lt;2^31^). Output Specification: For each test case, print in the first line the maximum number of consecutive factors. Then in the second line, print the smallest sequence of the consecutive factors in the format “factor[1] factor[2] …* factor[k]”, where the factors are listed in increasing order, and 1 is NOT included. Sample Input:1630 Sample Output:1235*6*7 题目大意：给出一个正整数n，求一段连续的整数，使n能被这段连续整数的乘积整除，如果有多个方案，输出连续整数个数最多的方案；如果还有多种方案，输出第一个数最小的方案。步骤：1 由于n不会被除自己以外的大于根号n的整数整除，所以只需从2~根号n遍历连续整数的第一个，求此时n能被最多多少个连续整数的乘积整除，同时记录对应连续整数的第一个数和最多个数2 如果遍历结束最长长度为0，那么答案就是n本身，否则输出相应结果。 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cmath&gt;#include&lt;cstring&gt;using namespace std;typedef long long LL;int main() &#123; LL n; scanf("%lld", &amp;n); LL sqr = (LL)sqrt(1.0 * n), first = 0, maxLen = 0; for(LL i = 2; i &lt;= sqr; i++) &#123; LL temp = 1, j = i; while(1) &#123; temp *= j; if(n % temp != 0) &#123; break; &#125; if(j - i + 1 &gt; maxLen) &#123; first = i; maxLen = j - i + 1; &#125; j++; &#125; &#125; if(maxLen == 0) &#123; printf("1\n%lld", n); &#125; else &#123; printf("%lld\n", maxLen); for(LL i = 0; i &lt; maxLen; i++) &#123; printf("%lld", first + i); if(i &lt; maxLen - 1) &#123; printf("*"); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1015 Reversible Primes (20)（20 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1015-Reversible-Primes-20-%EF%BC%8820-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[A reversible prime in any number system is a prime whose “reverse” in that number system is also a prime. For example in the decimal system 73 is a reversible prime because its reverse 37 is also a prime. Now given any two positive integers N (&lt; 10^5^) and D (1 &lt; D &lt;= 10), you are supposed to tell if N is a reversible prime with radix D. Input Specification: The input file consists of several test cases. Each case occupies a line which contains two integers N and D. The input is finished by a negative N. Output Specification: For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not. Sample Input:123473 1023 223 10-2 Sample Output:123YesYesNo 题目大意：给出正整数n和进制radix，如果n是素数，且n在radix进制下反转后得到的整数也是素数，则输出Yes，否则，输出No 分析：1先判断n是否为素数，不是素数直接输出No2如果n是素数，将n转换为radix进制，判断该数是否素数。1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;bool isPrime(int n) &#123; if(n &lt;= 1) &#123; return false; &#125; for(int i = 2; i * i &lt;= n; i++) &#123; if(n % i == 0) &#123; return false; &#125; &#125; return true;&#125;int d[111];int main() &#123; int n, radix; while(~scanf("%d", &amp;n)) &#123; if(n &lt; 0) &#123; break; &#125; scanf("%d", &amp;radix); if(isPrime(n) == false) &#123; printf("No\n"); &#125; else &#123; int len = 0; do &#123; d[len++] = n % radix; n /= radix; &#125; while(n != 0); for(int i = 0; i &lt; len; i++) &#123; n = n * radix + d[i]; &#125; if(isPrime(n) == true) &#123; printf("Yes\n"); &#125; else &#123; printf("No\n"); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1049 Counting Ones (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1049-Counting-Ones-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[The task is simple: given any positive integer N, you are supposed to count the total number of 1’s in the decimal form of the integers from 1 to N. For example, given N being 12, there are five 1’s in 1, 10, 11, and 12. Input Specification: Each input file contains one test case which gives the positive N (&lt;=2^30^). Output Specification: For each test case, print the number of 1’s in one line. Sample Input:112 Sample Output:15 题目大意：给出一个数字n，求1~n的所有数字里面出现1的个数 分析：一个个枚举计算肯定是超时的，这是个数学问题，需要寻找规律从特殊扩展到一般。设当前处理至第k位，那么记left为第k位的高位所表示的数，now为第k位数，right为第k位的低位表示的数，分三种情况： 若now == 0， ans += left * a; now == 1 , ans += left * a + right + 1; now == 2 , ans += (left + 1) * a; 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;int main() &#123; int n, a = 1, ans = 0; int left, right, now; scanf("%d", &amp;n); while(n / a != 0) &#123; left = n / (a * 10); now = n / a % 10; right = n % a; if(now == 0) &#123; ans += left * a; &#125; else if(now == 1) &#123; ans += left * a + right + 1; &#125; else &#123; ans += (left + 1) * a; &#125; a *= 10; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1044 Shopping in Mars (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1044-Shopping-in-Mars-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Shopping in Mars is quite a different experience. The Mars people pay by chained diamonds. Each diamond has a value (in Mars dollars M\$). When making the payment, the chain can be cut at any position for only once and some of the diamonds are taken off the chain one by one. Once a diamond is off the chain, it cannot be taken back. For example, if we have a chain of 8 diamonds with values M\$3, 2, 1, 5, 4, 6, 8, 7, and we must pay M\$15. We may have 3 options: Cut the chain between 4 and 6, and take off the diamonds from the position 1 to 5 (with values 3+2+1+5+4=15).\ Cut before 5 or after 6, and take off the diamonds from the position 4 to 6 (with values 5+4+6=15).\Cut before 8, and take off the diamonds from the position 7 to 8 (with values 8+7=15).\Now given the chain of diamond values and the amount that a customer has to pay, you are supposed to list all the paying options for the customer. If it is impossible to pay the exact amount, you must suggest solutions with minimum lost. Input Specification: Each input file contains one test case. For each case, the first line contains 2 numbers: N (&lt;=10^5^), the total number of diamonds on the chain, and M (&lt;=10^8^), the amount that the customer has to pay. Then the next line contains N positive numbers D~1~ … D~N~ (D~i~&lt;=10^3^ for all i=1, …, N) which are the values of the diamonds. All the numbers in a line are separated by a space. Output Specification: For each test case, print “i-j” in a line for each pair of i &lt;= j such that D~i~ + … + D~j~ = M. Note that if there are more than one solution, all the solutions must be printed in increasing order of i. If there is no solution, output “i-j” for pairs of i &lt;= j such that D~i~ + … + D~j~ &gt; M with (D~i~ + … + D~j~ - M) minimized. Again all the solutions must be printed in increasing order of i. It is guaranteed that the total value of diamonds is sufficient to pay the given amount. Sample Input 1:1216 153 2 1 5 4 6 8 7 16 10 15 11 9 12 14 13 Sample Output 1:12341-54-67-811-11 Sample Input 2:125 132 4 5 7 9 Sample Output 2:122-44-5 题目大意：给出一个数字序列和一个数s，在数字序列里求出所有和值为s的连续子序列。如果没有，就输出所有和值大于s的子序列里面和值最接近s的子序列。分析：用sum[i]表示a[1]到a[i]的和值，那么a[i]到a[j]的和值就是sum[j] - sum[i - 1].因为给出的数均为正数，所以sum数组严格单调递增，所以可以二分。根据sum[j] - sum[i - 1] = s，在sum数组的[i,n]范围内查找值为sum[i-1] + s的元素是否存在，若果存在，则对应的下标记为右端点j，如果不存在，找到第一个使和值超过s的右端点j 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn = 100010;int sum[maxn];int n, s, nears = 100000010;/*int upper_bound(int&amp; l, int&amp; r, int x) &#123; int mid; int left = l, right = r; while(left &lt; right) &#123; mid = (left + right) / 2; if(sum[mid] &gt; x) &#123; right = mid; &#125; else &#123; left = mid + 1; &#125; &#125; return left;&#125;*/int main() &#123; scanf("%d%d", &amp;n, &amp;s); sum[0] = 0; for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;sum[i]); sum[i] += sum[i - 1]; &#125; for(int i = 1; i &lt;= n; i++) &#123; int j = upper_bound(sum + i, sum + n + 1, sum[i - 1] + s) - sum; if(sum[j - 1] - sum[i - 1] == s) &#123; nears = s; break; &#125; else if(j &lt;= n &amp;&amp; sum[j] - sum[i - 1] &lt; nears) &#123; nears = sum[j] - sum[i - 1]; &#125; &#125; for(int i = 1; i &lt;= n; i++) &#123; int j = upper_bound(sum + i, sum + n + 1, sum[i - 1] + nears) - sum; if(sum[j - 1] - sum[i - 1] == nears) &#123; printf("%d-%d\n", i, j - 1); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1010 Radix (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1010-Radix-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is “yes”, if 6 is a decimal number and 110 is a binary number. Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given. Input Specification: Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\ N1 N2 tag radix\ Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2. Output Specification: For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix. Sample Input 1:16 110 1 10 Sample Output 1:12 Sample Input 2:11 ab 1 2 Sample Output 2:1Impossible 题目大意：输入4个整数n1，n2，tag，radix，tag为1表示n1为radix进制数，tag为2表示n2为radix进制数。求n1和n2中未知进制的那个数是否存在，并满足某个进制时和另一个数在10进制下相等。若存在，输出满足条件的最小进制；否则，输出Impossible 分析1：将已确定进制的数放在n1，未确定进制的数放在n2 2：二分查找，二分n2的进制，将n2从该进制转化为10进制，令其与n1的10进制比较：如果大于n1的十进制，则往左子区间二分；如果小于n2的十进制，则往右子区间二分。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;typedef long long LL;LL inf = (1LL &lt;&lt; 63) - 1;LL m[256];void init() &#123; for(char c = '0'; c &lt;= '9'; c++) &#123; m[c] = c - '0'; &#125; for(char c = 'a'; c &lt;= 'z'; c++) &#123; m[c] = c - 'a' + 10; &#125;&#125;LL convertTo10(char a[], LL radix, LL t) &#123; LL ans = 0; int len = strlen(a); for(int i = 0; i &lt; len; i++) &#123; ans = ans * radix + m[a[i]]; if(ans &lt; 0 || ans &gt; t) &#123; return -1; &#125; &#125; return ans;&#125;int cmp(char n2[], LL radix, LL t) &#123; int len = strlen(n2); LL num = convertTo10(n2, radix, t); if(num &lt; 0) &#123; return 1; &#125; if(t &gt; num) &#123; return -1; &#125; else if(t == num) &#123; return 0; &#125; else &#123; return 1; &#125;&#125;LL binarySearch(char n2[], LL left, LL right, LL t) &#123; LL mid; while(left &lt;= right) &#123; mid = (left + right) / 2; int flag = cmp(n2, mid, t); if(flag == 0) &#123; return mid; &#125; else if(flag == -1) &#123; left = mid + 1; &#125; else &#123; right = mid - 1; &#125; &#125; return -1;&#125;int findLargest(char n2[]) &#123; int ans = -1; int len = strlen(n2); for(int i = 0; i &lt; len; i++) &#123; if(m[n2[i]] &gt; ans) &#123; ans = m[n2[i]]; &#125; &#125; return ans + 1;&#125;int main() &#123; char n1[20], n2[20], temp[20]; int tag, radix; init(); scanf("%s %s %d %d", n1, n2, &amp;tag, &amp;radix); if(tag == 2) &#123; swap(n1, n2); &#125; LL t = convertTo10(n1, radix, inf); LL low = findLargest(n2); LL high = max(low, t) + 1; LL ans = binarySearch(n2, low, high, t); if(ans == -1) &#123; printf("Impossible\n"); &#125; else &#123; printf("%lld\n", ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1038 Recover the Smallest Number (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1038-Recover-the-Smallest-Number-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given {32, 321, 3214, 0229, 87}, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87. Input Specification: Each input file contains one test case. Each case gives a positive integer N (&lt;=10000) followed by N number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space. Output Specification: For each test case, print the smallest number in one line. Do not output leading zeros. Sample Input:15 32 321 3214 0229 87 Sample Output:122932132143287 题目大意：给出若干数字串，将它们按某个顺序拼接后输出，要求生成的数最小。 贪心策略：对数字串s1和s2，如果s1+s2 &lt; s2+s1,那么把s1放在s2的前面，否则，把s2放在s1的前面。 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;string&gt;using namespace std;const int maxn = 10010;string str[maxn];bool cmp(string a, string b) &#123; return a + b &lt; b + a;&#125;int main() &#123; int n; cin&gt;&gt;n; for(int i = 0; i &lt; n; i++) &#123; cin&gt;&gt;str[i]; &#125; sort(str, str + n, cmp); string ans; for(int i = 0; i &lt; n; i++) &#123; ans += str[i]; &#125; while(ans.size() != 0 &amp;&amp; ans[0] == '0') &#123; ans.erase(ans.begin()); &#125; if(ans.size() == 0) &#123; cout&lt;&lt;0; &#125; else &#123; cout&lt;&lt;ans; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1067 Sort with Swap(0,*) (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1067-Sort-with-Swap-0-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Given any permutation of the numbers {0, 1, 2,…, N-1}, it is easy to sort them in increasing order. But what if Swap(0, * ) is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way: Swap(0, 1) =&gt; {4, 1, 2, 0, 3}\ Swap(0, 3) =&gt; {4, 1, 2, 3, 0}\ Swap(0, 4) =&gt; {0, 1, 2, 3, 4} Now you are asked to find the minimum number of swaps need to sort the given permutation of the first N nonnegative integers. Input Specification: Each input file contains one test case, which gives a positive N (&lt;=10^5^) followed by a permutation sequence of {0, 1, …, N-1}. All the numbers in a line are separated by a space. Output Specification: For each case, simply print in a line the minimum number of swaps need to sort the given permutation. Sample Input:110 3 5 7 2 6 4 9 0 8 1 Sample Output:19 题目大意：给出一个0~n-1的序列，要求通过两两交换的方式将其变为递增序列，且只能是0与其他数字交换，求最小交换次数 贪心策略：如果0在本位上就先寻找一个当前不在本位上的数字与0交换，只要0不在本位，就将0所在位置的数的当前位置和0的位置交换。 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100010;int pos[maxn];int main() &#123; int n, ans = 0; scanf("%d", &amp;n); int left = n - 1, num; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;num); pos[num] = i; if(num == i &amp;&amp; num != 0) &#123; left--; &#125; &#125; int k = 1; while(left &gt; 0) &#123; if(pos[0] == 0) &#123; while(k &lt; n) &#123; if(pos[k] != k) &#123; swap(pos[0], pos[k]); ans++; break; &#125; k++; &#125; &#125; while(pos[0] != 0) &#123; swap(pos[0], pos[pos[0]]); ans++; left--; &#125; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1033 To Fill or Not to Fill (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1033-To-Fill-or-Not-to-Fill-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go. Input Specification: Each input file contains one test case. For each case, the first line contains 4 positive numbers: C~max~ (&lt;= 100), the maximum capacity of the tank; D (&lt;=30000), the distance between Hangzhou and the destination city; D~avg~ (&lt;=20), the average distance per unit gas that the car can run; and N (&lt;= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: P~i~, the unit gas price, and D~i~ (&lt;=D), the distance between this station and Hangzhou, for i=1,…N. All the numbers in a line are separated by a space. Output Specification: For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print “The maximum travel distance = X” where X is the maximum possible distance the car can run, accurate up to 2 decimal places. Sample Input 1:12345678950 1300 12 86.00 12507.00 6007.00 1507.10 07.20 2007.50 4007.30 10006.85 300 Sample Output 1:1749.17 Sample Input 2:12350 1300 12 27.10 07.00 600 Sample Output 2:1The maximum travel distance = 1200.00 题目大意：给定n个加油站的单位油价和离起点的距离，汽车初始时刻处于起点位置，油箱为空，在不超过油箱容量的前提下可以在任意加油站购买任意量的汽油，求从起点到终点的最小花费。如果到不了终点，输出最终的行驶距离。 分析：1将终点视为单位油价为0，离起点距离为d的加油站，然后将所有加油站按离起点的距离从小到大排序。排序后，如果如果离起点最近的加油站距离不是0，则汽车无法出发，直接输出结果2如何选择下一个车站的策略： 优先前往更低油价的加油站 在没有更低油价的加油站时前往油价尽可能低的加油站 在没有加油站能够到达时结束 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 510;const int inf = 0x3f3f3f3f;struct station &#123; double price, dis;&#125;st[maxn];bool cmp(station a, station b) &#123; return a.dis &lt; b.dis;&#125;int main() &#123; int n; double maxc, d, davg; scanf("%lf%lf%lf%d", &amp;maxc, &amp;d, &amp;davg, &amp;n); for(int i = 0; i &lt; n; i++) &#123; scanf("%lf%lf", &amp;st[i].price, &amp;st[i].dis); &#125; st[n].price = 0; st[n].dis = d; sort(st, st + n, cmp); if(st[0].dis != 0) &#123; printf("The maximum travel distance = 0.00\n"); &#125; else &#123; int now = 0; double ans = 0, nowTank = 0, maxm = maxc * davg; while(now &lt; n) &#123; int k = -1; double minPrice = inf; for(int i = now + 1; i &lt;= n &amp;&amp; st[i].dis - st[now].dis &lt;= maxm; i++) &#123; if(st[i].price &lt; minPrice) &#123; minPrice = st[i].price; k = i; if(minPrice &lt; st[now].price) &#123; break; &#125; &#125; &#125; if(k == -1) &#123; break; &#125; double need = (st[k].dis - st[now].dis) / davg; if(minPrice &lt; st[now].price) &#123; if(nowTank &lt; need) &#123; ans += (need - nowTank) * st[now].price; nowTank = 0; &#125; else &#123; nowTank -= need; &#125; &#125; else &#123; ans += (maxc - nowTank) * st[now].price; nowTank = maxc - need; &#125; now = k; &#125; if(now == n) &#123; printf("%.2f\n", ans); &#125; else &#123; printf("The maximum travel distance = %.2f\n", st[now].dis + maxm); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[543. 二叉树的直径]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F543-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%2F</url>
    <content type="text"><![CDATA[给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。 示例 :给定二叉树123456 1 / \ 2 3 / \ 4 5 返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。 注意：两结点之间的路径长度是以它们之间边的数目表示。给定一个二叉树，求该二叉树中两点之间的最远距离，这个最远距离就是根结点的左右两个子树的的深度之和再加上1。1234567891011121314151617181920212223242526/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int diameterOfBinaryTree(TreeNode* root) &#123; int res = 0; maxDepth(root, res); return res; &#125; int maxDepth(TreeNode* node, int&amp; res) &#123; if(!node) &#123; return 0; &#125; int left = maxDepth(node-&gt;left, res); int right = maxDepth(node-&gt;right, res); res = max(res, left + right); return max(left, right) + 1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[641. Design Circular Deque]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F641-Design-Circular-Deque%2F</url>
    <content type="text"><![CDATA[Design your implementation of the circular double-ended queue (deque).Your implementation should support following operations:123456789101112131415161718192021MyCircularDeque(k): Constructor, set the size of the deque to be k.insertFront(): Adds an item at the front of Deque. Return true if the operation is successful.insertLast(): Adds an item at the rear of Deque. Return true if the operation is successful.deleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.deleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.getFront(): Gets the front item from the Deque. If the deque is empty, return -1.getRear(): Gets the last item from Deque. If the deque is empty, return -1.isEmpty(): Checks whether Deque is empty or not. isFull(): Checks whether Deque is full or not.Example:MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3circularDeque.insertLast(1); // return truecircularDeque.insertLast(2); // return truecircularDeque.insertFront(3); // return truecircularDeque.insertFront(4); // return false, the queue is fullcircularDeque.getRear(); // return 32circularDeque.isFull(); // return truecircularDeque.deleteLast(); // return truecircularDeque.insertFront(4); // return truecircularDeque.getFront(); // return 4 Note: All values will be in the range of [1, 1000].The number of operations will be in the range of [1, 1000].Please do not use the built-in Deque library. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485class MyCircularDeque &#123;private: vector&lt;int&gt; q; int size = 0;public: /** Initialize your data structure here. Set the size of the deque to be k. */ MyCircularDeque(int k) &#123; size = k; &#125; /** Adds an item at the front of Deque. Return true if the operation is successful. */ bool insertFront(int value) &#123; if(isFull()) &#123; return false; &#125; q.insert(q.begin(), value); return true; &#125; /** Adds an item at the rear of Deque. Return true if the operation is successful. */ bool insertLast(int value) &#123; if(isFull()) &#123; return false; &#125; q.push_back(value); return true; &#125; /** Deletes an item from the front of Deque. Return true if the operation is successful. */ bool deleteFront() &#123; if(isEmpty()) &#123; return false; &#125; q.erase(q.begin()); return true; &#125; /** Deletes an item from the rear of Deque. Return true if the operation is successful. */ bool deleteLast() &#123; if(isEmpty()) &#123; return false; &#125; q.pop_back(); return true; &#125; /** Get the front item from the deque. */ int getFront() &#123; if(isEmpty()) &#123; return -1; &#125; return q.front(); &#125; /** Get the last item from the deque. */ int getRear() &#123; if(isEmpty()) &#123; return -1; &#125; return q.back(); &#125; /** Checks whether the circular deque is empty or not. */ bool isEmpty() &#123; return q.size() == 0; &#125; /** Checks whether the circular deque is full or not. */ bool isFull() &#123; return q.size() == size; &#125;&#125;;/** * Your MyCircularDeque object will be instantiated and called as such: * MyCircularDeque obj = new MyCircularDeque(k); * bool param_1 = obj.insertFront(value); * bool param_2 = obj.insertLast(value); * bool param_3 = obj.deleteFront(); * bool param_4 = obj.deleteLast(); * int param_5 = obj.getFront(); * int param_6 = obj.getRear(); * bool param_7 = obj.isEmpty(); * bool param_8 = obj.isFull(); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[622. 设计循环队列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F622-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。你的实现应该支持如下操作： MyCircularQueue(k): 构造器，设置队列长度为 k 。Front: 从队首获取元素。如果队列为空，返回 -1 。Rear: 获取队尾元素。如果队列为空，返回 -1 。enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。isEmpty(): 检查循环队列是否为空。isFull(): 检查循环队列是否已满。示例：12345678910111213141516171819MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为3circularQueue.enQueue(1); // 返回truecircularQueue.enQueue(2); // 返回truecircularQueue.enQueue(3); // 返回truecircularQueue.enQueue(4); // 返回false,队列已满circularQueue.Rear(); // 返回3circularQueue.isFull(); // 返回truecircularQueue.deQueue(); // 返回truecircularQueue.enQueue(4); // 返回truecircularQueue.Rear(); // 返回4 提示： 所有的值都在 1 至 1000 的范围内；操作数将在 1 至 1000 的范围内；请不要使用内置的队列库。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667class MyCircularQueue &#123;private: int size; vector&lt;int&gt; q;public: /** Initialize your data structure here. Set the size of the queue to be k. */ MyCircularQueue(int k) &#123; size = k; &#125; /** Insert an element into the circular queue. Return true if the operation is successful. */ bool enQueue(int value) &#123; if(isFull()) &#123; return false; &#125; q.push_back(value); return true; &#125; /** Delete an element from the circular queue. Return true if the operation is successful. */ bool deQueue() &#123; if(isEmpty()) &#123; return false; &#125; q.erase(q.begin()); return true; &#125; /** Get the front item from the queue. */ int Front() &#123; if(isEmpty()) &#123; return -1; &#125; else &#123; return q.front(); &#125; &#125; /** Get the last item from the queue. */ int Rear() &#123; if(isEmpty()) &#123; return -1; &#125; else &#123; return q.back(); &#125; &#125; /** Checks whether the circular queue is empty or not. */ bool isEmpty() &#123; return q.size() == 0; &#125; /** Checks whether the circular queue is full or not. */ bool isFull() &#123; return q.size() == size; &#125;&#125;;/** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * bool param_1 = obj.enQueue(value); * bool param_2 = obj.deQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * bool param_5 = obj.isEmpty(); * bool param_6 = obj.isFull(); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[559. N叉树的最大深度]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F559-N%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[给定一个N叉树，找到其最大深度。 最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。 例如，给定一个 3叉树 : 我们应返回其最大深度，3。 说明: 树的深度不会超过 1000。树的节点总不会超过 5000。12345678910111213141516171819202122232425262728/*// Definition for a Node.class Node &#123;public: int val; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: int maxDepth(Node* root) &#123; if(root == NULL) &#123; return 0; &#125; int depth = 0; for(auto child : root-&gt;children) &#123; depth = max(depth, maxDepth(child)); &#125; return depth + 1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[590. N叉树的后序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F590-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个N叉树，返回其节点值的后序遍历。 例如，给定一个 3叉树 : 返回其后序遍历: [5,6,3,2,4,1]. 说明: 递归法很简单，你可以使用迭代法完成此题吗? 递归法：123456789101112131415161718192021222324252627282930/*// Definition for a Node.class Node &#123;public: int val; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: vector&lt;int&gt; postorder(Node* root) &#123; if(root == NULL) &#123; return res; &#125; else &#123; for(auto n : root-&gt;children) postorder(n); res.push_back(root-&gt;val); &#125; return res; &#125;private: vector&lt;int&gt; res;&#125;; 迭代法：123456789101112131415161718192021222324252627282930313233343536/*// Definition for a Node.class Node &#123;public: int val; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: vector&lt;int&gt; postorder(Node* root) &#123; vector&lt;int&gt; res; if(root == NULL) &#123; return res; &#125; stack&lt;Node*&gt; s; s.push(root); while(!s.empty()) &#123; Node* node = s.top(); s.pop(); res.push_back(node-&gt;val); for(auto n : node-&gt;children) &#123; s.push(n); &#125; &#125; reverse(res.begin(), res.end()); return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[589. N叉树的前序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F589-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个N叉树，返回其节点值的前序遍历。 例如，给定一个 3叉树 : 返回其前序遍历: [1,3,5,6,2,4]。 说明: 递归法很简单，你可以使用迭代法完成此题吗? 递归法：1234567891011121314151617181920212223242526272829303132/*// Definition for a Node.class Node &#123;public: int val; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: vector&lt;int&gt; preorder(Node* root) &#123; vector&lt;int&gt; res; preorder(root, res); return res; &#125;private: void preorder(Node* root, vector&lt;int&gt;&amp; res) &#123; if(root == NULL) &#123; return; &#125; res.push_back(root-&gt;val); for(const auto&amp; n : root-&gt;children) preorder(n, res); &#125;&#125;; 迭代法：1234567891011121314151617181920212223242526272829303132333435/*// Definition for a Node.class Node &#123;public: int val; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: vector&lt;int&gt; preorder(Node* root) &#123; vector&lt;int&gt; res; if(root == NULL) &#123; return res; &#125; stack&lt;Node*&gt; s; s.push(root); while(!s.empty()) &#123; Node* node = s.top(); s.pop(); res.push_back(node-&gt;val); for(auto it = node-&gt;children.rbegin(); it != node-&gt;children.rend(); it++) &#123; s.push(*it); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[429. N叉树的层序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F429-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个N叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。 例如，给定一个 3叉树 : 返回其层序遍历:12345[ [1], [3,2,4], [5,6]] 说明: 树的深度不会超过 1000。树的节点总数不会超过 5000。 12345678910111213141516171819202122232425262728293031323334353637383940/*// Definition for a Node.class Node &#123;public: int val = NULL; vector&lt;Node*&gt; children; Node() &#123;&#125; Node(int _val, vector&lt;Node*&gt; _children) &#123; val = _val; children = _children; &#125;&#125;;*/class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; levelOrder(Node* root) &#123; vector&lt;vector&lt;int&gt;&gt; res; if(root == NULL) &#123; return res; &#125; queue&lt;Node* &gt; q; q.push(root); while(!q.empty()) &#123; vector&lt;int&gt; temp; int len = q.size(); for(int i = 0; i &lt; len; i++) &#123; Node* t = q.front(); q.pop(); temp.push_back(t-&gt;val); for(int j = 0; j &lt; t-&gt;children.size(); j++) &#123; q.push(t-&gt;children[j]); &#125; &#125; res.push_back(temp); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1048 Find Coins (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1048-Find-Coins-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. Since she has as many as 10^5^ coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it. Input Specification: Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (&lt;=10^5^, the total number of coins) and M(&lt;=10^3^, the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers no more than 500. All the numbers in a line are separated by a space. Output Specification: For each test case, print in one line the two face values V~1~ and V~2~ (separated by a space) such that V~1~ + V~2~ = M and V~1~ &lt;= V~2~. If such a solution is not unique, output the one with the smallest V~1~. If there is no solution, output “No Solution” instead. Sample Input 1:128 151 2 8 7 2 4 11 15 Sample Output 1:14 11 Sample Input 2:127 141 8 7 2 4 11 15 Sample Output 2:1No Solution 题目大意：给出n个正整数和一个正整数m，问n个数字里面是否存在一堆数字a和b（a&lt;=b）,使得a+b = m。如果有多对，输出a最小的那一对。分析：两数之和的问题，考虑哈希思想，当然也可以用二分查找或two pointers做哈希解法：1 用int型的哈希数组存放每个数字出现的个数2 枚举1~m，如果i和m-i都在散列数组里面，并且i == m - i时数字i的个数大于等于2，那么就表示找到了符合的一对数字 1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;map&gt;#include&lt;algorithm&gt;using namespace std;int HashTable[1005];int main() &#123; int n, m, a; scanf("%d %d", &amp;n, &amp;m); for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;a); HashTable[a]++; &#125; for(int i = 1; i &lt; m; i++) &#123; if(HashTable[i] &amp;&amp; HashTable[m - i]) &#123; if(i == m - i &amp;&amp; HashTable[i] &lt;= 1) &#123; continue; &#125; printf("%d %d\n", i, m - i); return 0; &#125; &#125; printf("No Solution\n"); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1095 Cars on Campus (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1095-Cars-on-Campus-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Zhejiang University has 6 campuses and a lot of gates. From each gate we can collect the in/out times and the plate numbers of the cars crossing the gate. Now with all the information available, you are supposed to tell, at any specific time point, the number of cars parking on campus, and at the end of the day find the cars that have parked for the longest time period. Input Specification: Each input file contains one test case. Each case starts with two positive integers N (&lt;= 10000), the number of records, and K (&lt;= 80000) the number of queries. Then N lines follow, each gives a record in the format plate_number hh:mm:ss status where plate_number is a string of 7 English capital letters or 1-digit numbers; hh:mm:ss represents the time point in a day by hour:minute:second, with the earliest time being 00:00:00 and the latest 23:59:59; and status is either in or out. Note that all times will be within a single day. Each “in” record is paired with the chronologically next record for the same car provided it is an “out” record. Any “in” records that are not paired with an “out” record are ignored, as are “out” records not paired with an “in” record. It is guaranteed that at least one car is well paired in the input, and no car is both “in” and “out” at the same moment. Times are recorded using a 24-hour clock. Then K lines of queries follow, each gives a time point in the format hh:mm:ss. Note: the queries are given in ascending order of the times. Output Specification: For each query, output in a line the total number of cars parking on campus. The last line of output is supposed to give the plate number of the car that has parked for the longest time period, and the corresponding time length. If such a car is not unique, then output all of their plate numbers in a line in alphabetical order, separated by a space. Sample Input:12345678910111213141516171819202122232416 7JH007BD 18:00:01 inZD00001 11:30:08 outDB8888A 13:00:00 outZA3Q625 23:59:50 outZA133CH 10:23:00 inZD00001 04:09:59 inJH007BD 05:09:59 inZA3Q625 11:42:01 outJH007BD 05:10:33 inZA3Q625 06:30:50 inJH007BD 12:23:42 outZA3Q625 23:55:00 inJH007BD 12:24:23 outZA133CH 17:11:22 outJH007BD 18:07:01 outDB8888A 06:30:50 in05:10:0006:30:5011:00:0012:23:4214:00:0018:00:0023:59:00 Sample Output:123456781452101JH007BD ZD00001 07:20:09 题目大意：给出n条记录，每条记录给出一辆车的车牌号，当前时刻，出入校门情况。然后给出k个查询，每个查询给出一个时刻，输出在这个时刻校园内的车辆数。查询完毕后输出在学校里停留时间最长的车牌号，可以有多个。 思路： 定义车辆结构体，记录单条记录的信息。定义map&lt; string,int&gt; parkTime ,记录每辆车在校园内停留总时长 将所有记录存放到数组里，并先按车牌号从小到大排序，若车牌号相同，按时间值从小到大排序 遍历所有记录，查找有效值存入valid数组 将valid数组按时间从小到大排序，并进行查询 遍历parkTime，输出停留时间最长的车牌号 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;map&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 10010;struct Car &#123; char id[8]; int time; char status[4];&#125;all[maxn], valid[maxn];int num = 0;map&lt;string, int&gt; parkTime;int timeToint(int hh, int mm, int ss) &#123; return hh * 3600 + mm * 60 + ss;&#125;bool cmpByIdandTime(Car a, Car b) &#123; if(strcmp(a.id, b.id)) &#123; return strcmp(a.id, b.id) &lt; 0; &#125; else &#123; return a.time &lt; b.time; &#125;&#125;bool cmpByTime(Car a, Car b) &#123; return a.time &lt; b.time;&#125;int main() &#123; int n, k, hh, mm, ss; scanf("%d%d", &amp;n, &amp;k); for(int i = 0; i &lt; n; i++) &#123; scanf("%s %d:%d:%d %s", all[i].id, &amp;hh, &amp;mm, &amp;ss, all[i].status); all[i].time = timeToint(hh, mm, ss); &#125; sort(all, all + n, cmpByIdandTime); int maxTime = -1; for(int i = 0; i &lt; n - 1; i++) &#123; if(!strcmp(all[i].id, all[i+1].id) &amp;&amp; !strcmp(all[i].status, "in") &amp;&amp; !strcmp(all[i + 1].status, "out")) &#123; valid[num++] = all[i]; valid[num++] = all[i + 1]; int inTime = all[i + 1].time - all[i].time; if(parkTime.count(all[i].id) == 0) &#123; parkTime[all[i].id] = 0; &#125; parkTime[all[i].id] += inTime; maxTime = max(maxTime, parkTime[all[i].id]); &#125; &#125; sort(valid, valid + num, cmpByTime); int now = 0, numCar = 0; for(int i = 0; i &lt; k; i++) &#123; scanf("%d:%d:%d", &amp;hh, &amp;mm, &amp;ss); int time = timeToint(hh, mm, ss); while(now &lt; num &amp;&amp; valid[now].time &lt;= time) &#123; if(!strcmp(valid[now].status, "in")) &#123; numCar++; &#125; else &#123; numCar--; &#125; now++; &#125; printf("%d\n",numCar); &#125; map&lt;string, int&gt;::iterator it; for(it = parkTime.begin(); it != parkTime.end(); it++) &#123; if(it-&gt;second == maxTime) &#123; printf("%s ", it-&gt;first.c_str()); &#125; &#125; printf("%02d:%02d:%02d\n",maxTime / 3600, maxTime % 3600 / 60, maxTime % 60); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1080 Graduate Admission (30)（30 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1080-Graduate-Admission-30-%EF%BC%8830-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure. Each applicant will have to provide two grades: the national entrance exam grade G~E~, and the interview grade G~I~. The final grade of an applicant is (G~E~ + G~I~) / 2. The admission rules are: The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade G~E~. If still tied, their ranks must be the same.Each applicant may have K choices and the admission will be done according to his/her choices: if according to the rank list, it is one’s turn to be admitted; and if the quota of one’s most preferred shcool is not exceeded, then one will be admitted to this school, or one’s other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, even if its quota will be exceeded.Input Specification: Each input file contains one test case. Each case starts with a line containing three positive integers: N (&lt;=40,000), the total number of applicants; M (&lt;=100), the total number of graduate schools; and K (&lt;=5), the number of choices an applicant may have. In the next line, separated by a space, there are M positive integers. The i-th integer is the quota of the i-th graduate school respectively. Then N lines follow, each contains 2+K integers separated by a space. The first 2 integers are the applicant’s G~E~ and G~I~, respectively. The next K integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1. Output Specification: For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants’ numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly. Sample Input:1234567891011121311 6 32 1 2 2 2 3100 100 0 1 260 60 2 3 5100 90 0 3 490 100 1 2 090 90 5 1 380 90 1 0 280 80 0 1 280 80 0 1 280 70 1 3 270 80 1 2 3100 100 0 2 4 Sample Output:1234560 1035 6 72 81 4 题目大意：要求模拟学校录取招生的过程，按从小到大输出每个学校录取的考生编号 思路： 分别定义学生和学校结构体存放对应信息 对读入的所有考生进行排序，并按规则计算出各考生的排名 对每个考生的每个志愿学校，如果当前志愿学校的招生人数未达到该校招生人数总额度或该校上一个录取考生的排名与该考生排名相同，则照样可以被录取。 对每个学校将其按考生编号从小到大排序，并按顺序输出录取考生的编号。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 40010;struct Student&#123; int GE, GI, sum; int r, stuID; int cho[6];&#125;stu[maxn];struct School &#123; int quota; int stuNum; int id[maxn]; int lastAdmit;&#125;sch[111];bool cmpStu(Student a, Student b) &#123; if(a.sum != b.sum) &#123; return a.sum &gt; b.sum; &#125; else &#123; return a.GE &gt; b.GE; &#125;&#125;bool cmpId(int a, int b) &#123; return stu[a].stuID &lt; stu[b].stuID;&#125;int main() &#123; int n, m, k; scanf("%d %d %d", &amp;n, &amp;m, &amp;k); for(int i = 0; i &lt; m; i++) &#123; scanf("%d", &amp;sch[i].quota); sch[i].stuNum = 0; sch[i].lastAdmit = -1; &#125; for(int i = 0; i &lt; n; i++) &#123; stu[i].stuID = i; scanf("%d%d", &amp;stu[i].GE, &amp;stu[i].GI); stu[i].sum = stu[i].GE + stu[i].GI; for(int j = 0; j &lt; k; j++) &#123; scanf("%d", &amp;stu[i].cho[j]); &#125; &#125; sort(stu, stu + n, cmpStu); for(int i = 0; i &lt; n; i++) &#123; if(i &gt; 0 &amp;&amp; stu[i].sum == stu[i - 1].sum &amp;&amp; stu[i].GE == stu[i - 1].GE) &#123; stu[i].r = stu[i - 1].r; &#125; else &#123; stu[i].r = i; &#125; &#125; for(int i = 0; i &lt; n; i++) &#123; for(int j = 0; j &lt; k; j++) &#123; int choice = stu[i].cho[j]; int num = sch[choice].stuNum; int last = sch[choice].lastAdmit; if(num &lt; sch[choice].quota || (last != -1 &amp;&amp; stu[i].r == stu[last].r)) &#123; sch[choice].id[num] = i; sch[choice].lastAdmit = i; sch[choice].stuNum++; break; &#125; &#125; &#125; for(int i = 0; i &lt; m; i++) &#123; if(sch[i].stuNum &gt; 0) &#123; sort(sch[i].id, sch[i].id + sch[i].stuNum, cmpId); for(int j = 0; j &lt; sch[i].stuNum; j++) &#123; printf("%d", stu[sch[i].id[j]].stuID); if(j &lt; sch[i].stuNum - 1) &#123; printf(" "); &#125; &#125; &#125; printf("\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[872. 叶子相似的树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F872-%E5%8F%B6%E5%AD%90%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[考虑一个二叉树的所有叶子。这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。 举个例子，给定一个如上图所示的树，其叶值序列为 (6, 7, 4, 9, 8) 。 如果两个二叉树的叶值序列相同，我们就认为它们是 叶相似的。 如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，返回 true；否则返回 false 。 提示： 给定的两个树会有 1 到 100 个结点。 分析，直接递归遍历，将两颗二叉树的叶结点序列分别存放在两个数组，然后比较两个数组是否相等即可123456789101112131415161718192021222324252627282930313233343536373839/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; getChildTree(vector&lt;int&gt;&amp; v, TreeNode* root) &#123; if(root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) &#123; v.push_back(root-&gt;val); &#125; if(root-&gt;left != NULL) &#123; getChildTree(v, root-&gt;left); &#125; if(root-&gt;right != NULL) &#123; getChildTree(v, root-&gt;right); &#125; return v; &#125; bool leafSimilar(TreeNode* root1, TreeNode* root2) &#123; vector&lt;int&gt; a,b; a = getChildTree(a, root1); b = getChildTree(b, root2); if(a.size() != b.size()) &#123; return false; &#125; else &#123; for(int i = 0; i &lt; a.size(); i++) &#123; if(a[i] != b[i]) &#123; return false; &#125; &#125; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[541. 反转字符串 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-II%2F</url>
    <content type="text"><![CDATA[给定一个字符串和一个整数 k，你需要对从字符串开头算起的每个 2k 个字符的前k个字符进行反转。如果剩余少于 k 个字符，则将剩余的所有全部反转。如果有小于 2k 但大于或等于 k 个字符，则反转前 k 个字符，并将剩余的字符保持原样。 示例:12输入: s = &quot;abcdefg&quot;, k = 2输出: &quot;bacdfeg&quot; 要求: 该字符串只包含小写的英文字母。给定字符串的长度和 k 在[1, 10000]范围内。1234567891011121314151617class Solution &#123;public: string reverseStr(string s, int k) &#123; int n = s.size(); int cnt = n / k; for(int i = 0; i &lt;= cnt; i++)&#123; if(i % 2 == 0) &#123; if(i * k + k &lt; n) &#123; reverse(s.begin() + i * k, s.begin() + i * k + k); &#125; else &#123; reverse(s.begin() + i * k, s.end()); &#125; &#125; &#125; return s; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[538. 把二叉搜索树转换为累加树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F538-%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。 例如：123456789输入: 二叉搜索树: 5 / \ 2 13输出: 转换为累加树: 18 / \ 20 13 分析：利用二叉搜索树的性质直接进行后序遍历累加123456789101112131415161718192021222324252627/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int sum = 0; TreeNode* convertBST(TreeNode* root) &#123; convert(root); return root; &#125;private: void convert(TreeNode* cur) &#123; if(cur == NULL) &#123; return; &#125; convert(cur-&gt;right); cur-&gt;val += sum; sum = cur-&gt;val; convert(cur-&gt;left); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[530. 二叉搜索树的最小绝对差]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE%2F</url>
    <content type="text"><![CDATA[给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。 示例 :12345678910输入: 1 \ 3 / 2输出:1 解释:最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。注意: 树中至少有2个节点。 分析：二叉搜索树的中序遍历为升序序列，因此问题就转化为这个生序序列相邻两个值的差的最小值。1234567891011121314151617181920212223242526272829/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int getMinimumDifference(TreeNode* root) &#123; int res = INT_MAX, pre = -1; inorder(root, res, pre); return res; &#125;private: void inorder(TreeNode* root, int&amp; res, int&amp; pre) &#123; if(!root) &#123; return; &#125; inorder(root-&gt;left, res, pre); if(pre != -1) &#123; res = min(res, root-&gt;val - pre); &#125; pre = root-&gt;val; inorder(root-&gt;right, res, pre);&#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[521. 最长特殊序列 Ⅰ]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F521-%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%BA%8F%E5%88%97-%E2%85%A0%2F</url>
    <content type="text"><![CDATA[给定两个字符串，你需要从这两个字符串中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。 子序列可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。 输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。 示例 :123输入: &quot;aba&quot;, &quot;cdc&quot;输出: 3解析: 最长特殊序列可为 &quot;aba&quot; (或 &quot;cdc&quot;) 说明: 两个字符串长度均小于100。字符串中的字符仅含有 ‘a’~’z’。 这道题不能想的太复杂，只需要按3种情况讨论下就行。 两个字符串相等，显然不存在，返回-1 两个字符串长度相同但不相等，直接返回其长度就行 两个字符串长度不相等，那么返回更长的那个。123456789101112131415161718192021class Solution &#123;public: int findLUSlength(string a, string b) &#123; int lena = a.size(); int lenb = b.size(); if(lena == lenb) &#123; int i = 0, j = 0; while(i &lt; lena &amp;&amp; j &lt; lenb &amp;&amp; a[i] == b[j])&#123; i++; j++; &#125; if(i &lt; lena || j &lt; lenb) &#123; return lena; &#125; else &#123; return -1; &#125; &#125; else &#123; return max(lena, lenb); &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[506. 相对名次]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F506-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1%2F</url>
    <content type="text"><![CDATA[给出 N 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（”Gold Medal”, “Silver Medal”, “Bronze Medal”）。 (注：分数越高的选手，排名越靠前。) 示例 1:12输入: [5, 4, 3, 2, 1]输出: [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;] 解释: 前三名运动员的成绩为前三高的，因此将会分别被授予 “金牌”，“银牌”和“铜牌” (“Gold Medal”, “Silver Medal” and “Bronze Medal”).余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。提示: N 是一个正整数并且不会超过 10000。所有运动员的成绩都不相同。 可以利用map数据结构来存放名次和成绩，并利用其自动排序的特性。由于成绩高的名词在前面，而map默认升序，所以需要倒着往前遍历，因此定义迭代器的时候为1map&lt;int, int&gt;::reverse_iterator it; 并且map迭代器用it-&gt;first来访问键，it-&gt;second来访问值。12345678910111213141516171819202122232425class Solution &#123;public: vector&lt;string&gt; findRelativeRanks(vector&lt;int&gt;&amp; nums) &#123; vector&lt;string&gt; res(nums.size(), ""); int cnt = 1; map&lt;int, int&gt; m; for(int i = 0; i &lt; nums.size(); i++) &#123; m[nums[i]] = i; &#125; map&lt;int, int&gt;::reverse_iterator it; for(it = m.rbegin(); it != m.rend(); it++) &#123; if(cnt == 1) &#123; res[it-&gt;second] = "Gold Medal"; &#125; else if(cnt == 2) &#123; res[it-&gt;second] = "Silver Medal"; &#125; else if(cnt == 3) &#123; res[it-&gt;second] = "Bronze Medal"; &#125; else &#123; res[it-&gt;second] = to_string(cnt); &#125; cnt++; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[463. 岛屿的周长]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F463-%E5%B2%9B%E5%B1%BF%E7%9A%84%E5%91%A8%E9%95%BF%2F</url>
    <content type="text"><![CDATA[给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。 示例 :1234567[[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]]答案: 16解释: 它的周长是下面图片中的 16 个黄色的边： 分析，计算方格为1的周长，可以先将为1的方格都加上4，然后检查左边和上方是否为1，为1的话就减去2。 123456789101112131415161718192021222324252627class Solution &#123;public: int islandPerimeter(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123; if(grid.empty()) &#123; return 0; &#125; if(grid[0].empty()) &#123; return 0; &#125; int res = 0; for(int i = 0; i &lt; grid.size(); i++) &#123; for(int j = 0; j &lt; grid[0].size(); j++) &#123; if(grid[i][j] == 0) &#123; continue; &#125; res += 4; if(i &gt; 0 &amp;&amp; grid[i - 1][j] == 1) &#123; res -= 2; &#125; if(j &gt; 0 &amp;&amp; grid[i][j - 1] == 1) &#123; res -= 2; &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1016 Phone Bills (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1016-Phone-Bills-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1016 Phone Bills (25)（25 分）A long-distance telephone company charges its customers by the following rules: Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records. Input Specification: Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records. The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 02:00, and so on for each hour in the day.The next line contains a positive number N (&lt;= 1000), followed by N lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (mm:dd:hh:mm), and the word “on-line” or “off-line”. For each test case, all dates will be within a single month. Each “on-line” record is paired with the chronologically next record for the same customer provided it is an “off-line” record. Any “on-line” records that are not paired with an “off-line” record are ignored, as are “off-line” records not paired with an “on-line” record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock. Output Specification: For each test case, you must print a phone bill for each customer. Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (dd:hh:mm), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample. Sample Input:12345678910111210 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 1010CYLL 01:01:06:01 on-lineCYLL 01:28:16:05 off-lineCYJJ 01:01:07:00 off-lineCYLL 01:01:08:03 off-lineCYJJ 01:01:05:59 on-lineaaa 01:01:01:03 on-lineaaa 01:02:00:01 on-lineCYLL 01:28:15:41 on-lineaaa 01:05:02:24 on-lineaaa 01:04:23:59 off-line Sample Output:12345678910CYJJ 0101:05:59 01:07:00 61 $12.10Total amount: $12.10CYLL 0101:06:01 01:08:03 122 $24.4028:15:41 28:16:05 24 $3.85Total amount: $28.25aaa 0102:00:01 04:23:59 4318 $638.80Total amount: $638.80 题目大意:给出24h中每个小时内的资费，并给出n个通话记录点。要求对每个人的有效通话记录进行资费计算。 第一步：对所有记录进行排序第二步：对每个用户判断其是否存在有效通话记录第三步：如果存在有效通话记录，则输出有效通话记录并计费。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;const int maxn = 1010;int toll[25];struct Record &#123; char name[25]; int month, dd, hh, mm; bool statu;&#125; rec[maxn], temp;bool cmp(Record a, Record b) &#123; int s = strcmp(a.name, b.name); if(s != 0) &#123; return s &lt; 0; &#125; else if(a.month != b.month) &#123; return a.month &lt; b.month; &#125; else if(a.dd != b.dd) &#123; return a.dd &lt; b.dd; &#125; else if(a.hh != b.hh) &#123; return a.hh &lt; b.hh; &#125; else &#123; return a.mm &lt; b.mm; &#125;&#125;void getAns(int on, int off, int&amp; time, int&amp; money) &#123; temp = rec[on]; while(temp.dd &lt; rec[off].dd || temp.hh &lt; rec[off].hh || temp.mm &lt; rec[off].mm) &#123; time++; money += toll[temp.hh]; temp.mm++; if(temp.mm &gt;= 60) &#123; temp.mm = 0; temp.hh++; &#125; if(temp.hh &gt;= 24) &#123; temp.hh = 0; temp.dd++; &#125; &#125;&#125;int main() &#123; for(int i = 0; i &lt; 24; i++) &#123; scanf("%d", &amp;toll[i]); &#125; int n; scanf("%d", &amp;n); char line[10]; for(int i = 0; i &lt; n; i++) &#123; scanf("%s", rec[i].name); scanf("%d:%d:%d:%d", &amp;rec[i].month, &amp;rec[i].dd, &amp;rec[i].hh, &amp;rec[i].mm); scanf("%s", line); if(strcmp(line, "on-line") == 0) &#123; rec[i].statu = true; &#125; else &#123; rec[i].statu = false; &#125; &#125; sort(rec, rec + n, cmp); int on = 0, off, next; while(on &lt; n) &#123; int needPrint = 0; next = on; while(next &lt; n &amp;&amp; strcmp(rec[next].name, rec[on].name) == 0) &#123; if(needPrint == 0 &amp;&amp; rec[next].statu) &#123; needPrint = 1; &#125; else if(needPrint == 1 &amp;&amp; rec[next].statu == false) &#123; needPrint = 2; &#125; next++; &#125; if(needPrint &lt; 2) &#123; on = next; continue; &#125; int allMoney = 0; printf("%s %02d\n", rec[on].name, rec[on].month); while(on &lt; next) &#123; while(on &lt; next - 1 &amp;&amp; !(rec[on].statu &amp;&amp; rec[on + 1].statu == false)) &#123; on++; &#125; off = on + 1; if(off == next) &#123; on = next; break; &#125; printf("%02d:%02d:%02d ", rec[on].dd, rec[on].hh, rec[on].mm); printf("%02d:%02d:%02d ", rec[off].dd, rec[off].hh, rec[off].mm); int time = 0, money = 0; getAns(on, off, time, money); allMoney += money; printf("%d $%.2f\n", time, money / 100.0); on = off + 1; &#125; printf("Total amount: $%.2f\n", allMoney / 100.0); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1012 The Best Rank (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1012-The-Best-Rank-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1012 The Best Rank (25)（25 分）To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algebra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student. For example, The grades of C, M, E and A - Average of 4 students are given as the following:12345StudentID C M E A310101 98 85 88 90310102 70 95 88 84310103 82 87 94 88310104 91 91 91 91 Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average. Input Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (&lt;=2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID. Output For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space. The priorities of the ranking methods are ordered as A &gt; C &gt; M &gt; E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority. If a student is not on the grading list, simply output “N/A”. Sample Input1234567891011125 6310101 98 85 88310102 70 95 88310103 82 87 94310104 91 91 91310105 85 90 90310101310102310103310104310105999999 Sample Output1234561 C1 M1 E1 A3 AN/A 题目大意：已知n个学生的3门课分数C、M、E，以及这三门课的平均分A。现在分别按这四个分数对n个考生从高到低排序，这样每个考生就有4个排名且每个分数都有一个排名。接下来有m个查询，输出该考生4个排名中最高的那个排名及对应的分数是哪个。如果不同课程有相同排名，则按优先级A&gt;C&gt;M&gt;E输出，如果查询的考生id不存在，输出N/A 排名时注意相同的分数排名相同的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;struct Student &#123; int id; int grade[4];&#125;stu[2001];char course[4] = &#123;'A', 'C', 'M', 'E'&#125;;int Rank[1000000][4] = &#123;0&#125;;int now;bool cmp(Student a, Student b) &#123; return a.grade[now] &gt; b.grade[now];&#125;int main() &#123; int n, m; scanf("%d %d", &amp;n, &amp;m); for(int i = 0; i &lt; n; i++) &#123; scanf("%d %d %d %d", &amp;stu[i].id, &amp;stu[i].grade[1], &amp;stu[i].grade[2], &amp;stu[i].grade[3]); stu[i].grade[0] = round((stu[i].grade[1] + stu[i].grade[2] + stu[i].grade[3]) / 3.0) + 0.5; &#125; for(now = 0; now &lt; 4; now++) &#123; sort(stu, stu + n, cmp); Rank[stu[0].id][now] = 1; for(int i = 1; i &lt; n; i++) &#123; if(stu[i].grade[now] == stu[i - 1].grade[now]) &#123; Rank[stu[i].id][now] = Rank[stu[i - 1].id][now]; &#125; else &#123; Rank[stu[i].id][now] = i + 1; &#125; &#125; &#125; int query; for(int i = 0; i &lt; m; i++) &#123; scanf("%d", &amp;query); if(Rank[query][0] == 0) &#123; printf("N/A\n"); &#125; else &#123; int k = 0; for(int j = 0; j &lt; 4; j++) &#123; if(Rank[query][j] &lt; Rank[query][k]) &#123; k = j; &#125; &#125; printf("%d %c\n", Rank[query][k], course[k]); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[458. 可怜的小猪]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F458-%E5%8F%AF%E6%80%9C%E7%9A%84%E5%B0%8F%E7%8C%AA%2F</url>
    <content type="text"><![CDATA[有1000只水桶，其中有且只有一桶装的含有毒药，其余装的都是水。它们从外观看起来都一样。如果小猪喝了毒药，它会在15分钟内死去。 问题来了，如果需要你在一小时内，弄清楚哪只水桶含有毒药，你最少需要多少只猪？ 回答这个问题，并为下列的进阶问题编写一个通用算法。 进阶: 假设有 n 只水桶，猪饮水中毒后会在 m 分钟内死亡，你需要多少猪（x）就能在 p 分钟内找出“有毒”水桶？n只水桶里有且仅有一只有毒的桶。参考：http://www.voidcn.com/article/p-vrqdyaov-bpd.html分析：拿到题目乍一看 ~~不知所云，我擦，不是easy类的题吗，怀疑了一波自己的智商然后去Google了。一头猪有五个状态，15min,30,45,60,die or alive.一头猪不光是死活两种状态，而是具有五种状态，所以应该采用五进制进行编码；用这种编码方式去唯一对应一个水桶，当五个回合结束之后通过两头猪在五个状态的状态判断哪一个桶水有毒。所以n个猪能确定的编码数量是5的n次方123456class Solution &#123;public: int poorPigs(int buckets, int minutesToDie, int minutesToTest) &#123; return ceil(log(buckets) / log(minutesToTest / minutesToDie + 1)); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[438. 找到字符串中所有字母异位词]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F438-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。 字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。 说明： 字母异位词指字母相同，但排列不同的字符串。不考虑答案输出的顺序。示例 1:12345输入:s: &quot;cbaebabacd&quot; p: &quot;abc&quot;输出:[0, 6] 解释:起始索引等于 0 的子串是 “cba”, 它是 “abc” 的字母异位词。起始索引等于 6 的子串是 “bac”, 它是 “abc” 的字母异位词。 示例 2:12345输入:s: &quot;abab&quot; p: &quot;ab&quot;输出:[0, 1, 2] 解释:起始索引等于 0 的子串是 “ab”, 它是 “ab” 的字母异位词。起始索引等于 1 的子串是 “ba”, 它是 “ab” 的字母异位词。起始索引等于 2 的子串是 “ab”, 它是 “ab” 的字母异位词。 分析：给一个非空字符串p，找到字符串s中所有p的重组字符串的起始下标。 定义a[26]数组存放字母出现的次数。为了节省时间，每一次循环时，加入新的字符，减去原先的第一个字符。1234567891011121314151617181920212223242526272829303132333435class Solution &#123;public: vector&lt;int&gt; findAnagrams(string s, string p) &#123; vector&lt;int&gt; res; int lens = s.size(); int lenp = p.size(); if(lens == 0 || lenp == 0 || lens &lt; lenp) &#123; return res; &#125; int a[26] = &#123;0&#125;; for(int i = 0; i &lt; lenp; i++) &#123; a[p[i] - 'a']++; &#125; for(int i = 0; i &lt; lenp - 1; i++) &#123; a[s[i] - 'a']--; &#125; for(int i = 0; i &lt; lens - lenp + 1; i++) &#123; a[s[i + lenp - 1] - 'a']--; if(isZero(a)) &#123; res.push_back(i); &#125; a[s[i] - 'a']++; &#125; return res; &#125;private: bool isZero(int a[]) &#123; for(int i = 0; i &lt; 26; i++) &#123; if(a[i] != 0) &#123; return false; &#125; &#125; return true;&#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[447. 回旋镖的数量]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F447-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F%2F</url>
    <content type="text"><![CDATA[给定平面上 n 对不同的点，“回旋镖” 是由点表示的元组 (i, j, k) ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。 找到所有回旋镖的数量。你可以假设 n 最大为 500，所有点的坐标在闭区间 [-10000, 10000] 中。 示例:12输入:[[0,0],[1,0],[2,0]] 输出:12342解释:两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]] 分析：因为要考虑元组间的顺序关系，所以如果有n个点与点a距离相等，那么排列方式一共有n(n-1)种，利用哈希表来记录与某个点相同距离的个数。12345678910111213141516171819202122class Solution &#123;public: int numberOfBoomerangs(vector&lt;pair&lt;int, int&gt;&gt;&amp; points) &#123; int len = points.size(); int res = 0; unordered_map&lt;int, int&gt; m; for(int i = 0; i &lt; len; i++) &#123; for(int j = 0; j &lt; len; j++) &#123; int x = points[i].first - points[j].first; int y = points[i].second - points[j].second; m[x * x + y * y]++; &#125; unordered_map&lt;int, int&gt; :: iterator it; for(it = m.begin(); it != m.end(); it++) &#123; int temp = it-&gt;second; res += temp * (temp - 1); &#125; m.clear(); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[437. 路径总和 III]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F437-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-III%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，它的每个结点都存放着一个整数值。 找出路径和等于给定数值的路径总数。 路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。 二叉树不超过1000个节点，且节点数值范围是 [-1000000,1000000] 的整数。 示例：123456789101112131415root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8 10 / \ 5 -3 / \ \ 3 2 11 / \ \3 -2 1返回 3。和等于 8 的路径有:1. 5 -&gt; 32. 5 -&gt; 2 -&gt; 13. -3 -&gt; 11 分析：题目要求在以root为根结点的二叉树中，寻找和为sum的路径，返回这样的路径个数。我们可以分两种情况进行递归遍历， 第一种sum包含当前结点，在他的左右子树里面寻找和为sum的路径数量。递归调用dfs 第二种，当前结点不包含在sum里面，直接调用pathSum递归 1234567891011121314151617181920212223242526272829303132333435/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int pathSum(TreeNode* root, int sum) &#123; if(root == NULL) &#123; return 0; &#125; int res = 0; res += dfs(root, sum); res += pathSum(root-&gt;left, sum); res += pathSum(root-&gt;right, sum); return res; &#125;private: int dfs(TreeNode* root, int num) &#123; if(root == NULL) &#123; return 0; &#125; int res = 0; if(root-&gt;val == num) &#123; res += 1; &#125; res += dfs(root-&gt;left, num - root-&gt;val); res += dfs(root-&gt;right, num - root-&gt;val); return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[74. 搜索二维矩阵]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性： 每行中的整数从左到右按升序排列。每行的第一个整数大于前一行的最后一个整数。示例 1:12345678输入:matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]target = 3输出: true 示例 2:12345678输入:matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50]]target = 13输出: false 分析：二维矩阵中的查找，采用嵌套循环是可以做出判断的，但这样算法不够高效，也没有利用到题中给出的矩阵特征，我们可以固定右上角的元素，根据每行每列递增的规律优化写法，这题剑指offer里面也有说明1234567891011121314151617181920212223class Solution &#123;public: bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123; if(matrix.size() == 0) &#123; return false; &#125; if(matrix[0].size() == 0) &#123; return false; &#125; int rowNum = 0; int colNum = matrix[0].size() - 1; while(rowNum &lt; matrix.size() &amp;&amp; colNum &gt;= 0) &#123; if(target &lt; matrix[rowNum][colNum]) &#123; --colNum; &#125; else if (target &gt; matrix[rowNum][colNum]) &#123; ++rowNum; &#125; else &#123; return true; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[832. 翻转图像]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F832-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F%2F</url>
    <content type="text"><![CDATA[给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。 示例 1:1234输入: [[1,1,0],[1,0,1],[0,0,0]]输出: [[1,0,0],[0,1,0],[1,1,1]]解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]； 然后反转图片: [[1,0,0],[0,1,0],[1,1,1]] 示例 2:1234输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]； 然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] 说明: 1 &lt;= A.length = A[0].length &lt;= 200 &lt;= A[i][j] &lt;= 1123456789101112class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; flipAndInvertImage(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123; for(int i = 0; i &lt; A.size(); i++) &#123; reverse(A[i].begin(), A[i].end()); for(int j = 0; j &lt; A[i].size(); j++) &#123; A[i][j] ^= 1; &#125; &#125; return A; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[696. 计数二进制子串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。 重复出现的子串要计算它们出现的次数。 示例 1 :12345输入: &quot;00110011&quot;输出: 6解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。请注意，一些重复出现的子串要计算它们出现的次数。 另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。示例 2 :1234输入: &quot;10101&quot;输出: 4解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。注意： s.length 在1到50,000之间。s 只包含“0”或“1”字符。1234567891011121314151617181920class Solution &#123;public: int countBinarySubstrings(string s) &#123; int preLen = 0; int curLen = 1; int res = 0; for(int i = 1; i &lt; s.size(); i++) &#123; if(s[i] == s[i-1]) &#123; curLen++; &#125; else &#123; preLen = curLen; curLen = 1; &#125; if(preLen &gt;= curLen) &#123; res++; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[704. Binary Search]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F704-Binary-Search%2F</url>
    <content type="text"><![CDATA[Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1. Example 1:123Input: nums = [-1,0,3,5,9,12], target = 9Output: 4Explanation: 9 exists in nums and its index is 4 Example 2:123Input: nums = [-1,0,3,5,9,12], target = 2Output: -1Explanation: 2 does not exist in nums so return -1 Note: You may assume that all elements in nums are unique.n will be in the range [1, 10000].The value of each element in nums will be in the range [-9999, 9999]. 12345678910111213141516171819class Solution &#123;public: int search(vector&lt;int&gt;&amp; nums, int target) &#123; int left = 0, right = nums.size() - 1; while(left &lt;= right) &#123; int mid = left + (right - left) / 2; if(nums[mid] == target) &#123; return mid; &#125; if(nums[mid] &lt; target) &#123; left += 1; &#125; if(nums[mid] &gt; target) &#123; right -= 1; &#125; &#125; return -1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[868. 二进制间距]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F868-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%97%B4%E8%B7%9D%2F</url>
    <content type="text"><![CDATA[给定一个正整数 N，找到并返回 N 的二进制表示中两个连续的 1 之间的最长距离。 如果没有两个连续的 1，返回 0 。 示例 1：12345678输入：22输出：2解释：22 的二进制是 0b10110 。在 22 的二进制表示中，有三个 1，组成两对连续的 1 。第一对连续的 1 中，两个 1 之间的距离为 2 。第二对连续的 1 中，两个 1 之间的距离为 1 。答案取两个距离之中最大的，也就是 2 。 示例 2：1234输入：5输出：2解释：5 的二进制是 0b101 。 示例 3：1234输入：6输出：1解释：6 的二进制是 0b110 。 示例 4：12345输入：8输出：0解释：8 的二进制是 0b1000 。在 8 的二进制表示中没有连续的 1，所以返回 0 。 提示： 1 &lt;= N &lt;= 10^9方法一：记录索引，对给定的二进制数的每一位进行与运算，将为1的那一位的索引记录的a数组中，然后计算a数组相邻元素最大的差值。1234567891011121314151617class Solution &#123;public: int binaryGap(int N) &#123; int a[32] = &#123;0&#125;; int t = 0; for(int i = 0; i &lt; 32; i++) &#123; if(((N&gt;&gt;i) &amp; 1) != 0) &#123; a[t++] = i; &#125; &#125; int ans = 0; for(int i = 0; i &lt; t-1; i++) &#123; ans = max(ans, a[i+1] - a[i]); &#125; return ans; &#125;&#125;; 方法二：一次遍历 123456789101112131415class Solution &#123;public: int binaryGap(int N) &#123; int last = -1, ans = 0; for(int i = 0; i &lt; 32; i++) &#123; if(((N&gt;&gt;i) &amp; 1) != 0) &#123; if(last &gt;= 0) &#123; ans = max(ans, i - last); &#125; last = i; &#125; &#125; return ans; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1046 Shortest Distance (20)（20 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1046-Shortest-Distance-20-%EF%BC%8820-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1046 Shortest Distance (20)（20 分）The task is really simple: given N exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits. Input Specification: Each input file contains one test case. For each case, the first line contains an integer N (in [3, 10^5^]), followed by N integer distances D~1~ D~2~ … D~N~, where D~i~ is the distance between the i-th and the (i+1)-st exits, and D~N~ is between the N-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer M (&lt;=10^4^), with M lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to N. It is guaranteed that the total round trip distance is no more than 10^7^. Output Specification: For each test case, print your results in M lines, each contains the shortest distance between the corresponding given pair of exits. Sample Input:123455 1 2 4 14 931 32 54 1 Sample Output:1233107 题目大意：有n个结点围成一个圈，相邻两个结点之间的距离已知，且每次只能移动到相邻点。给出m次询问，每次给出两个编号a，b，问从a到b的最短距离是多少。 分析：用dis[i]表示1号结点按顺时针方向到达i号节点顺时针方向下一个节点的距离，sum表示一圈的总距离，a[i]表示i号与i+1号顶点的距离。对于每次询问，结果其实就是dis(left,right)和sum-dis(left,right)中的较小值。dis数组和sum在读入数据时就可进行预处理来得到，以此来降低时间复杂度，对于每次询问dis(left,right) = dis[right-1] - dis[left-1].123456789101112131415161718192021222324#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100005;int dis[maxn], a[maxn];int main() &#123; int sum = 0, query, n, left, right; scanf("%d", &amp;n); for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;a[i]); sum += a[i]; dis[i] = sum; &#125; scanf("%d", &amp;query); for(int i = 0; i &lt; query; i++) &#123; scanf("%d %d", &amp;left, &amp;right); if(left &gt; right) &#123; swap(left, right); &#125; int temp = dis[right - 1] - dis[left - 1]; printf("%d\n", min(temp, sum - temp)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[572. 另一个树的子树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F572-%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。 示例 1:给定的树 s:1234567891011 3 / \ 4 5 / \ 1 2给定的树 t： 4 / \ 1 2返回 true，因为 t 与 s 的一个子树拥有相同的结构和节点值。 示例 2:123456789101112131415给定的树 s： 3 / \ 4 5 / \ 1 2 / 0给定的树 t： 4 / \ 1 2返回 false。 分析：题目指出s的一个子树包括s的一个节点和该结点的所有子孙，因此子树是在叶结点往上某个与t相同的树，因此可以将问题转化为两棵树是否相同。 123456789101112131415161718192021222324252627282930313233/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool isSubtree(TreeNode* s, TreeNode* t) &#123; if(!s) &#123; return false; &#125; if(isSame(s, t)) &#123; return true; &#125; return isSubtree(s-&gt;left, t)||isSubtree(s-&gt;right, t); &#125; bool isSame(TreeNode* s, TreeNode* t) &#123; if(!s &amp;&amp; !t) &#123; return true; &#125; if(!s || !t) &#123; return false; &#125; if(s-&gt;val != t-&gt;val) &#123; return false; &#125; return isSame(s-&gt;left, t-&gt;left)&amp;&amp;isSame(s-&gt;right, t-&gt;right); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[709. 转换成小写字母]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F709-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%2F</url>
    <content type="text"><![CDATA[实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。 示例 1：12输入: &quot;Hello&quot;输出: &quot;hello&quot; 示例 2：12输入: &quot;here&quot;输出: &quot;here&quot; 示例 3：12输入: &quot;LOVELY&quot;输出: &quot;lovely&quot; 1234567891011class Solution &#123;public: string toLowerCase(string str) &#123; for(int i = 0; i &lt; str.size(); i++) &#123; if(str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z') &#123; str[i] = str[i] + 32; &#125; &#125; return str; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[653. 两数之和 IV - 输入 BST]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F653-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-IV-%E8%BE%93%E5%85%A5-BST%2F</url>
    <content type="text"><![CDATA[给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。 案例 1:12345678910111213输入: 5 / \ 3 6 / \ \2 4 7Target = 9输出: True``` 案例 2: 输入: 5 / \ 3 6 / \ \2 4 7 Target = 28 输出: False12345678910111213141516171819202122232425262728分析：又是两数之和的问题，可以借助set进行判断，还是哈希思想，遍历整个树，查找是否有符合条件的值。递归写法：递归写法要主要set的定义不能在函数内部进行。```cpp/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: unordered_set&lt;int&gt; s; bool findTarget(TreeNode* root, int k) &#123; if(root == NULL) &#123; return false; &#125; if(s.count(k - root-&gt;val) != 0) &#123; return true; &#125; s.insert(root-&gt;val); return findTarget(root-&gt;left, k) || findTarget(root-&gt;right, k); &#125;&#125;; 迭代写法：迭代写法怎么写其实就看你准备怎么遍历二叉树了。 1234567891011121314151617181920212223242526272829303132333435/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool findTarget(TreeNode* root, int k) &#123; if(root == NULL) &#123; return false; &#125; unordered_set&lt;int&gt; s; queue&lt;TreeNode* &gt; q; q.push(root); while(!q.empty()) &#123; TreeNode* t = q.front(); q.pop(); if(s.count(k - t-&gt;val)) &#123; return true; &#125; s.insert(t-&gt;val); if(t-&gt;left) &#123; q.push(t-&gt;left); &#125; if(t-&gt;right) &#123; q.push(t-&gt;right); &#125; &#125; return false; &#125;&#125;; 1234567891011121314151617181920212223242526272829303132333435/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool findTarget(TreeNode* root, int k) &#123; if(root == NULL) &#123; return false; &#125; unordered_set&lt;int&gt; s; stack&lt;TreeNode* &gt; st; while(!st.empty() || root != NULL) &#123; if(root != NULL) &#123; if(s.count(root-&gt;val)) &#123; return true; &#125; else &#123; s.insert(k - root-&gt;val); &#125; st.push(root); root = root-&gt;left; &#125; else &#123; TreeNode *node = st.top(); st.pop(); root = node-&gt;right; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[804. 唯一摩尔斯密码词]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F804-%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: “a” 对应 “.-“, “b” 对应 “-…”, “c” 对应 “-.-.”, 等等。 为了方便，所有26个英文字母对应摩尔斯密码表如下：1[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;] 给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，”cab” 可以写成 “-.-.-….-“，(即 “-.-.” + “-…” + “.-“字符串的结合)。我们将这样一个连接过程称作单词翻译。 返回我们可以获得所有词不同单词翻译的数量。 例如:12345678输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]输出: 2解释:各单词翻译如下:&quot;gin&quot; -&gt; &quot;--...-.&quot;&quot;zen&quot; -&gt; &quot;--...-.&quot;&quot;gig&quot; -&gt; &quot;--...--.&quot;&quot;msg&quot; -&gt; &quot;--...--.&quot; 共有 2 种不同翻译, “–…-.” 和 “–…–.”. 注意: 单词列表words 的长度不会超过 100。每个单词 words[i]的长度范围为 [1, 12]。每个单词 words[i]只包含小写字母。 分析：这道题还是比较好想的，用字符串数组建立一个字母与摩尔斯密码的映射，遍历给定字符串数组，将每个单词的对应密码存入set字符串集合，输出集合大小即可。123456789101112131415class Solution &#123;public: int uniqueMorseRepresentations(vector&lt;string&gt;&amp; words) &#123; string a[26] = &#123;&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;&#125;; set&lt;string&gt; res; for(int i = 0; i &lt; words.size(); i++) &#123; string s = &quot;&quot;; for(int j = 0; j &lt; words[i].size(); j++) &#123; s += a[words[i][j]-&apos;a&apos;]; &#125; res.insert(s); &#125; return res.size(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-023 图着色问题（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-023-%E5%9B%BE%E7%9D%80%E8%89%B2%E9%97%AE%E9%A2%98%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-023 图着色问题（25 分）图着色问题是一个著名的NP完全问题。给定无向图 G = (V, E)，问可否用K种颜色为V中的每一个顶点分配一种颜色，使得不会有两个相邻顶点具有同一种颜色？ 但本题并不是要你解决这个着色问题，而是对给定的一种颜色分配，请你判断这是否是图着色问题的一个解。 输入格式： 输入在第一行给出3个整数V（0 &lt; V &lt;= 500）、E（&gt;= 0）和K（0 &lt; K &lt;= V），分别是无向图的顶点数、边数、以及颜色数。顶点和颜色都从1到V编号。随后E行，每行给出一条边的两个端点的编号。在图的信息给出之后，给出了一个正整数N（&lt;= 20），是待检查的颜色分配方案的个数。随后N行，每行顺次给出V个顶点的颜色（第i个数字表示第i个顶点的颜色），数字间以空格分隔。题目保证给定的无向图是合法的（即不存在自回路和重边）。 输出格式： 对每种颜色分配方案，如果是图着色问题的一个解则输出“Yes”，否则输出“No”，每句占一行。 输入样例：12345678910111213146 8 32 11 34 62 52 45 45 63 641 2 3 3 1 24 5 6 6 4 51 2 3 4 5 62 3 4 2 3 4 输出样例：1234YesYesNoNo 分析：这题主要考察对图的遍历，题目要求你判断給定的颜色分配是不是图着色问题的一个解，而图着色问题的要求是用k种颜色为图G中的每个顶点分配一种颜色，并且不会有相邻两个顶点具有同一种颜色。可以枚举所有相连的点，看颜色是否相同。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;map&gt;using namespace std;const int N = 1e5+11;const int M = 1e6+11;vector&lt;int&gt; vet[N];int n;int color[N];int flag;void solve()&#123; for(int i = 1; i &lt;= n; i++) &#123; for(int j = 0; j &lt; vet[i].size(); j++)&#123; int v = vet[i][j]; if(color[i] == color[v]) &#123; flag = 0; &#125; &#125; &#125;&#125;int main()&#123; int m,k; scanf("%d %d %d",&amp;n,&amp;m,&amp;k); while(m--) &#123; int a,b; scanf("%d %d",&amp;a,&amp;b); vet[a].push_back(b); vet[b].push_back(a); &#125; int t; scanf("%d",&amp;t); while(t--) &#123; map&lt;int,int&gt; mp; int f = 1; for(int i = 1; i &lt;= n; i++) &#123; scanf("%d", &amp;color[i]); mp[color[i]] = 1; &#125; if(mp.size() != k)&#123; printf("No\n"); &#125; else &#123; flag = 1; solve(); if(flag) &#123; printf("Yes\n"); &#125; else &#123; printf("No\n"); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-024 部落（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-024-%E9%83%A8%E8%90%BD%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-024 部落（25 分）在一个社区里，每个人都有自己的小圈子，还可能同时属于很多不同的朋友圈。我们认为朋友的朋友都算在一个部落里，于是要请你统计一下，在一个给定社区中，到底有多少个互不相交的部落？并且检查任意两个人是否属于同一个部落。 输入格式： 输入在第一行给出一个正整数N（&lt;= 10^4^），是已知小圈子的个数。随后N行，每行按下列格式给出一个小圈子里的人： K P[1] P[2] … P[K] 其中K是小圈子里的人数，P[i]（i=1, .., K）是小圈子里每个人的编号。这里所有人的编号从1开始连续编号，最大编号不会超过10^4^。 之后一行给出一个非负整数Q（&lt;= 10^4^），是查询次数。随后Q行，每行给出一对被查询的人的编号。 输出格式： 首先在一行中输出这个社区的总人数、以及互不相交的部落的个数。随后对每一次查询，如果他们属于同一个部落，则在一行中输出“Y”，否则输出“N”。 输入样例：1234567843 10 1 22 3 44 1 5 7 83 9 6 4210 53 7 输出样例：12310 2YN 分析：并查集问题。根据set大小来输出社区总人数，遍历集合，根据F[i]是否等于i来计算互不相交的部落个数。判断两人是否属于同一部落用并查集里的find函数即可1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;set&gt;using namespace std;int F[10000];int Find(int x)&#123; int r = x; while(r != F[r]) &#123; r = F[r]; &#125; int i = x, j; while(i != r) &#123; j = F[i]; F[i] = r; i = j; &#125; return r;&#125;void Union(int x, int y)&#123; int fa = Find(x); int fb = Find(y); if(fa != fb) &#123; F[fa] = fb; &#125;&#125;int main()&#123; set&lt;int&gt; s; for(int i = 1; i &lt;= 10000; i++) &#123; F[i] = i; &#125; int n; scanf("%d", &amp;n); int m,k; for(int i = 0; i &lt; n; i++) &#123; scanf("%d", &amp;m); int pre; for(int j = 0; j &lt; m; j++)&#123; scanf("%d", &amp;k); if(j == 0) &#123; pre = k; &#125; else &#123; Union(pre,k); pre = k; &#125; s.insert(k); &#125; &#125; int sum = 0; for(int i = 1; i &lt;= s.size(); i++)&#123; if(F[i] == i) &#123; sum++; &#125; &#125; printf("%d %d\n",s.size(),sum); int t; scanf("%d",&amp;t); int x, y; for(int i = 0; i &lt; t; i++) &#123; scanf("%d %d", &amp;x, &amp;y); if(Find(x) == Find(y)) &#123; printf("Y\n"); &#125; else &#123; printf("N\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[682. 棒球比赛]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F682-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[你现在是棒球比赛记录员。给定一个字符串列表，每个字符串可以是以下四种类型之一：1.整数（一轮的得分）：直接表示您在本轮中获得的积分数。 “+”（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。 “D”（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。 “C”（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。 每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。你需要返回你在所有回合中得分的总和。 示例 1:12345678输入: [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]输出: 30解释: 第1轮：你可以得到5分。总和是：5。第2轮：你可以得到2分。总和是：7。操作1：第2轮的数据无效。总和是：5。第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。第4轮：你可以得到5 + 10 = 15分。总数是：30。 示例 2:1234567891011输入: [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]输出: 27解释: 第1轮：你可以得到5分。总和是：5。第2轮：你可以得到-2分。总数是：3。第3轮：你可以得到4分。总和是：7。操作1：第3轮的数据无效。总数是：3。第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。第5轮：你可以得到9分。总数是：8。第6轮：你可以得到-4 + 9 = 5分。总数是13。第7轮：你可以得到9 + 5 = 14分。总数是27。 注意： 输入列表的大小将介于1和1000之间。列表中的每个整数都将介于-30000和30000之间。 1234567891011121314151617181920212223class Solution &#123;public: int calPoints(vector&lt;string&gt;&amp; ops) &#123; int sum = 0; vector&lt;int&gt; res; int len = res.size(); for(int i=0;i&lt;ops.size();i++)&#123; if(ops[i].compare("+")==0)&#123; res.push_back(res[res.size()-1]+res[res.size()-2]); &#125;else if(ops[i].compare("D")==0)&#123; res.push_back(res[res.size()-1]*2); &#125;else if(ops[i].compare("C")==0)&#123; res.pop_back(); &#125;else&#123; res.push_back(stoi(ops[i])); &#125; &#125; for(int i=0;i&lt;res.size();i++)&#123; sum += res[i]; &#125; return sum; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[605. 种花问题]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F605-%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。 给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。 示例 1:12输入: flowerbed = [1,0,0,0,1], n = 1输出: True 示例 2:12输入: flowerbed = [1,0,0,0,1], n = 2输出: False 注意: 数组内已种好的花不会违反种植规则。输入的数组长度范围为 [1, 20000]。n 是非负整数，且不会超过输入数组的大小。 要想根据连续0的个数来计算能种多少花，需要考虑边界的问题，为了解决边界问题，可以采取补0的方法，如果第一个元素为0，就在最前面再补一个0，如果最后一个元素为0，就在最后面再补一个012345678910111213141516171819202122232425class Solution &#123;public: bool canPlaceFlowers(vector&lt;int&gt;&amp; flowerbed, int n) &#123; if(flowerbed.empty())&#123; return false; &#125; if(flowerbed[0]==0)&#123; flowerbed.insert(flowerbed.begin(),0); &#125; if(flowerbed.back()==0)&#123; flowerbed.push_back(0); &#125; int sum = 0,cnt = 0; for(int i=0;i&lt;=flowerbed.size();i++)&#123; if(i&lt;flowerbed.size()&amp;&amp;flowerbed[i]==0)&#123; cnt++; &#125;else&#123; sum += (cnt-1)/2; cnt = 0; &#125; &#125; return sum &gt;= n; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[844. 比较含退格的字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。 示例 1：123输入：S = &quot;ab#c&quot;, T = &quot;ad#c&quot;输出：true解释：S 和 T 都会变成 “ac”。 示例 2：123输入：S = &quot;ab##&quot;, T = &quot;c#d#&quot;输出：true解释：S 和 T 都会变成 “”。 示例 3：123输入：S = &quot;a##c&quot;, T = &quot;#a#c&quot;输出：true解释：S 和 T 都会变成 “c”。 示例 4：12345678910111213141516171819202122232425262728293031输入：S = &quot;a#c&quot;, T = &quot;b&quot;输出：false解释：S 会变成 “c”，但 T 仍然是 “b”。``` 提示：1 &lt;= S.length &lt;= 2001 &lt;= T.length &lt;= 200S 和 T 只含有小写字母以及字符 &apos;#&apos;。```cppclass Solution &#123;public: bool backspaceCompare(string S, string T) &#123; return deal(S)==deal(T); &#125; string deal(string x)&#123; string res; for(int i=0;i&lt;x.size();i++)&#123; if(x[i]==&apos;#&apos;)&#123; if(!res.empty())&#123; res.pop_back(); &#125; &#125;else&#123; res.push_back(x[i]); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[401. 二进制手表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F401-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%89%8B%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[二进制手表顶部有 4 个 LED 代表小时（0-11），底部的 6 个 LED 代表分钟（0-59）。 每个 LED 代表一个 0 或 1，最低位在右侧。 例如，上面的二进制手表读取 “3:25”。 给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。 案例:12输入: n = 1返回: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;] 注意事项: 输出的顺序没有要求。小时不会以零开头，比如 “01:00” 是不允许的，应为 “1:00”。分钟必须由两位数组成，可能会以零开头，比如 “10:2” 是无效的，应为 “10:02”。 根据二进制中1的个数来计算12345678910class Solution &#123; public List&lt;String&gt; readBinaryWatch(int num) &#123; List&lt;String&gt; times = new ArrayList&lt;&gt;(); for (int h = 0; h &lt; 12; h++) for (int m = 0; m &lt; 60; m++) if (Integer.bitCount(h) + Integer.bitCount(m) == num) times.add(String.format("%d:%02d", h, m)); return times; &#125;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[717. 1比特与2比特字符]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F717-1%E6%AF%94%E7%89%B9%E4%B8%8E2%E6%AF%94%E7%89%B9%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或 11)来表示。 现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。 示例 1:12345输入: bits = [1, 0, 0]输出: True解释: 唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。 示例 2:12345输入: bits = [1, 1, 1, 0]输出: False解释: 唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。 注意: 1 &lt;= len(bits) &lt;= 1000.bits[i] 总是0 或 1. 利用i作为增量指针，碰到0，增1，碰到1，增2，最后判断i的大小与bits剩余长度是否相等。12345678910111213class Solution &#123;public: bool isOneBitCharacter(vector&lt;int&gt;&amp; bits) &#123; int len = bits.size(); int i; for( i=0;i&lt;len-1;i++)&#123; if(bits[i]==1)&#123; i += 1; &#125; &#125; return i==len-1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[566. 重塑矩阵]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。 给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。 重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。 如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。 示例 1:123456789输入: nums = [[1,2], [3,4]]r = 1, c = 4输出: [[1,2,3,4]]解释:行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。 示例 2:12345678910输入: nums = [[1,2], [3,4]]r = 2, c = 4输出: [[1,2], [3,4]]解释:没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。 注意： 给定矩阵的宽和高范围在 [1, 100]。给定的 r 和 c 都是正数。常规思路，首先根据两个矩阵的长乘宽是否相等来判断能否转化，如果能够转化，那么再用一个双重循环，将原矩阵的值按照一行行赋给结果矩阵1234567891011121314151617181920212223class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; matrixReshape(vector&lt;vector&lt;int&gt;&gt;&amp; nums, int r, int c) &#123; vector&lt;vector&lt;int&gt;&gt; res(r,vector&lt;int&gt;(c)); int row = nums.size(); int col = nums[0].size(); int indx1 = 0,indx2 = 0; if( row*col!=r*c )&#123; return nums; &#125;else&#123; for(int i=0;i&lt;row;i++)&#123; for(int j=0;j&lt;col;j++)&#123; res[indx1][indx2++] = nums[i][j]; if( indx2==c)&#123; indx2 = 0; indx1++; &#125; &#125; &#125; &#125; return res; &#125;&#125;; 精简写法，用一个循环搞定123456789101112131415161718class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; matrixReshape(vector&lt;vector&lt;int&gt;&gt; &amp;nums, int r, int c) &#123; if (nums.empty()) &#123; return nums; &#125; int m = nums.size(); int n = nums[0].size(); if (m * n &lt; r * c) &#123; return nums; &#125; vector&lt;vector&lt;int&gt;&gt; newNums(r, vector&lt;int&gt;(c)); for (int i = 0; i &lt; r * c; i++) &#123; newNums[i / c][i % c] = nums[i / n][i % n]; &#125; return newNums; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[637. 二叉树的层平均值]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F637-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC%2F</url>
    <content type="text"><![CDATA[给定一个非空二叉树, 返回一个由每层节点平均值组成的数组. 示例 1:123456789输入: 3 / \ 9 20 / \ 15 7输出: [3, 14.5, 11]解释:第0层的平均值是 3, 第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11]. 注意： 节点值的范围在32位有符号整数范围内。分析：题目给定一棵二叉树，要求求出该二叉树每层节点值的平均值。 1，先将根结点push进一个队列 ，然后去掉该队列最前面的结点 2，将每个从队列去掉的结点，将他们所有的孩子结点push进一个临时队列 3，继续从这个队列pop结点和add这个结点的孩子结点到临时队列直到队列为空 4，每次队列为空就表示这一层的所有结点都已被访问 5，当push结点到临时队列的时候，保持求和sum，并且求出每层的平均值123456789101112131415161718192021222324252627282930313233343536/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;double&gt; averageOfLevels(TreeNode* root) &#123; vector&lt;double&gt; res; queue&lt;TreeNode*&gt; q; q.push(root); while(!q.empty())&#123; double sum = 0, count = 0; queue&lt;TreeNode*&gt; temp; while(!q.empty())&#123; TreeNode* n = q.front(); q.pop(); sum += n-&gt;val; count++; if(n-&gt;left!=NULL)&#123; temp.push(n-&gt;left); &#125; if(n-&gt;right!=NULL)&#123; temp.push(n-&gt;right); &#125; &#125; q = temp; res.push_back((sum*1.0/count)); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[812. 最大三角形面积]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F812-%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF%2F</url>
    <content type="text"><![CDATA[给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。 示例:1234输入: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]输出: 2解释: 这五个点如下图所示。组成的橙色三角形是最大的，面积为2。 注意: 3 &lt;= points.length &lt;= 50.不存在重复的点。 -50 &lt;= points[i][j] &lt;= 50.结果误差值在 10^-6 以内都认为是正确答案。 三角形面积公式：A= 1/2 * [ x1(y2-y3) + x2(y3-y1) + x3(y1-y2) ]123456789101112131415class Solution &#123;public: double largestTriangleArea(vector&lt;vector&lt;int&gt;&gt;&amp; points) &#123; double res = 0; int len = points.size(); for(int i=0;i&lt;len;i++)&#123; for(int j=i+1;j&lt;len;j++)&#123; for(int k=j+1;k&lt;len;k++)&#123; res = max(res,0.5*abs(points[i][0]*(points[j][1]-points[k][1])+points[j][0]*(points[k][1]-points[i][1])+points[k][0]*(points[i][1]-points[j][1]))); &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[693. 交替位二进制数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F693-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个正整数，检查他是否为交替位二进制数：换句话说，就是他的二进制数相邻的两个位数永不相等。 示例 1:1234输入: 5输出: True解释:5的二进制数是: 101 示例 2:1234输入: 7输出: False解释:7的二进制数是: 111 示例 3:1234输入: 11输出: False解释:11的二进制数是: 1011 示例 4:1234输入: 10输出: True解释:10的二进制数是: 1010 方法一：将给定数值的二进制数转化为对应的字符串，只要该字符串不存在两个相邻的字符相等，那么就满足条件。1234567891011121314151617class Solution &#123;public: bool hasAlternatingBits(int n) &#123; string s = ""; while( n )&#123; string a = to_string(n%2); s = a + s; n /= 2; &#125; for(int i=0; i&lt;s.size();i++)&#123; if( s[i] == s[i+1] )&#123; return false; &#125; &#125; return true; &#125;&#125;; 方法二：除以二， 123456789101112131415class Solution &#123;public: bool hasAlternatingBits(int n) &#123; int cur = n%2; n = n/2; while(n)&#123; if( cur == n%2 )&#123; return false; &#125; cur = n%2; n = n/2; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[338. Bit位计数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F338-Bit%E4%BD%8D%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个非负整数 num。 对于范围 0 ≤ i ≤ num 中的每个数字 i ，计算其二进制数中的1的数目并将它们作为数组返回。 示例：1比如给定 num = 5 ，应该返回 [0,1,1,2,1,2]. 进阶： 给出时间复杂度为O(n * sizeof(integer)) 的解答非常容易。 但是你可以在线性时间O(n)内用一次遍历做到吗？ 要求算法的空间复杂度为O(n)。 你能进一步完善解法吗？ 在c ++或任何其他语言中不使用任何内置函数（如c++里的 __builtin_popcount）来执行此操作。 方法一：一位一位计算，但是这是完全不符合题目要求的，题目中希望你给出更优化的算法 123456789101112131415161718192021class Solution &#123;public: vector&lt;int&gt; countBits(int num) &#123; vector&lt;int&gt; res; for(int i=0;i&lt;=num;i++)&#123; int x = count(i); res.push_back(x); &#125; return res; &#125; int count(int n)&#123; int cnt = 0; while( n )&#123; if( n%2 == 1 )&#123; cnt++; &#125; n /= 2; &#125; return cnt; &#125;&#125;; 法二：找规律，规律是，从1开始，遇到偶数时，其1的个数和该偶数除以2得到的数字的1的个数相同，遇到奇数时，其1的个数等于该奇数除以2得到的数字的1的个数再加1 1234567891011121314class Solution &#123;public: vector&lt;int&gt; countBits(int num) &#123; vector&lt;int&gt; res&#123;0&#125;; for(int i=1; i &lt;= num; i++)&#123; if( i%2 == 0 )&#123; res.push_back(res[i/2]); &#125;else&#123; res.push_back( res[i/2] + 1 ); &#125; &#125; return res; &#125;&#125;; 方法三：利用i&amp;(i-1),i&amp;(i-1)一方面可以用来判断一个数是否为2的指数，放在这里的规律是，针对结果数组，每个下标i = i&amp;(i-1)+1. 12345678910class Solution &#123;public: vector&lt;int&gt; countBits(int num) &#123; vector&lt;int&gt; res(num+1,0); for(int i=1; i &lt;= num; i++)&#123; res[i] = res[i&amp;(i-1)]+1; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[617. 合并二叉树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。 你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。 示例 1:123456789101112131415输入: Tree 1 Tree 2 1 2 / \ / \ 3 2 1 3 / \ \ 5 4 7 输出: 合并后的树: 3 / \ 4 5 / \ \ 5 4 7注意: 合并必须从两个树的根节点开始。 首先判断t1和t2是否为空，如果t1为空，那么返回t2，如果t2为空，那么返回t1 新建一个结点t，参数为两个结点值的和，然后分别调用merge函数向左向右递归。 123456789101112131415161718192021222324/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) &#123; if(!t1)&#123; return t2; &#125; if(!t2)&#123; return t1; &#125; TreeNode* t = new TreeNode(t1-&gt;val+t2-&gt;val); t-&gt;left = mergeTrees(t1-&gt;left,t2-&gt;left); t-&gt;right = mergeTrees(t1-&gt;right,t2-&gt;right); return t; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[46. 全排列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F46-%E5%85%A8%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[给定一个没有重复数字的序列，返回其所有可能的全排列。 示例:12345678910输入: [1,2,3]输出:[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] 法一：偷懒的写法，直接调用求下一个排列的库函数1234567891011class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) &#123; vector&lt;vector&lt;int&gt;&gt; res; sort(nums.begin(),nums.end()); do&#123; res.push_back(nums); &#125;while(next_permutation(nums.begin(),nums.end())); return res; &#125;&#125;; 法二：递归枚举 12345678910111213141516171819class Solution &#123;public: void dfs(int cur,vector&lt;int&gt;&amp; nums,vector&lt;vector&lt;int&gt;&gt;&amp; ans)&#123; if( cur == nums.size() - 1 )&#123; ans.push_back(nums); return ; &#125; for(int i = cur; i &lt; nums.size(); i++)&#123; swap( nums[cur], nums[i] ); dfs( cur + 1,nums, ans ); swap( nums[cur], nums[i] ); &#125; &#125; vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) &#123; vector&lt;vector&lt;int&gt;&gt; res; dfs( 0, nums, res ); return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[31. 下一个排列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。 必须原地修改，只允许使用额外常数空间。1234以下是一些例子，输入位于左侧列，其相应输出位于右侧列。1,2,3 → 1,3,23,2,1 → 1,2,31,1,5 → 1,5,1 法一：C++有直接求下一个排列的库函数，但这题用库函数就没意义了123456class Solution &#123;public: void nextPermutation(vector&lt;int&gt;&amp; nums) &#123; next_permutation(nums.begin(),nums.end()); &#125;&#125;; 法二：算法过程如图 图片来源：http://fisherlei.blogspot.com/2012/12/leetcode-next-permutation.html12345678910111213141516171819202122232425262728293031class Solution &#123;public: void swapWith(int num,vector&lt;int&gt;&amp; nums,int i)&#123; int min = nums[i]; int j = i,index = i; for(j = i;j&lt;nums.size();j++)&#123; if( min &gt; nums[j] &amp;&amp; nums[j] &gt; nums[num] )&#123; index = j; min = nums[j]; &#125; &#125; swap(nums[index],nums[num]); &#125; void nextPermutation(vector&lt;int&gt;&amp; nums) &#123; if(nums.size()&lt;=1)&#123; return ; &#125; int flag = 0; for(int i = nums.size()-1;i &gt; 0;i--)&#123; if(nums[i] &gt; nums[i-1])&#123; swapWith(i-1, nums, i); sort(nums.begin()+i,nums.end()); flag = 1; break; &#125; &#125; if( flag == 0 )&#123; sort(nums.begin(),nums.end()); &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[868. 转置矩阵]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F868-%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[给定一个矩阵 A， 返回 A 的转置矩阵。 矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。 示例 1：12输入：[[1,2,3],[4,5,6],[7,8,9]]输出：[[1,4,7],[2,5,8],[3,6,9]] 示例 2：12输入：[[1,2,3],[4,5,6]]输出：[[1,4],[2,5],[3,6]] 提示： 1 &lt;= A.length &lt;= 10001 &lt;= A[0].length &lt;= 1000 123456789101112131415class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; transpose(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123; int row = A.size(); int col = A[0].size(); vector&lt;int&gt; B(row,0); vector&lt;vector&lt;int&gt;&gt; res(col,B); for(int i=0;i&lt;row;i++)&#123; for(int j=0;j&lt;col;j++)&#123; res[j][i] = A[i][j]; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[504. 七进制数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F504-%E4%B8%83%E8%BF%9B%E5%88%B6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个整数，将其转化为7进制，并以字符串形式输出。 示例 1:12输入: 100输出: &quot;202&quot; 示例 2:12输入: -7输出: &quot;-10&quot; 注意: 输入范围是 [-1e7, 1e7] 。123456789101112131415161718192021class Solution &#123;public: string convertToBase7(int num) &#123; if( num == 0 )&#123; return "0"; &#125; string res = ""; bool flag = false; if(num&lt;0)&#123; flag = true; &#125; while(num!=0)&#123; res = to_string(abs(num%7)) + res; num /= 7; &#125; if(flag)&#123; res = "-" + res; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[500. 键盘行]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F500-%E9%94%AE%E7%9B%98%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所 示例1:12输入: [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]输出: [&quot;Alaska&quot;, &quot;Dad&quot;] 注意: 你可以重复使用键盘上同一字符。你可以假设输入的字符串将只包含字母。1234567891011121314151617181920212223class Solution &#123;public: vector&lt;string&gt; findWords(vector&lt;string&gt;&amp; words) &#123; vector&lt;string&gt; res; unordered_set&lt;char&gt; row1 &#123;'q','w','e','r','t','y','u','i','o','p','Q','W','E','R','T','Y','U','I','O','P'&#125;; unordered_set&lt;char&gt; row2&#123;'a','s','d','f','g','h','j','k','l','A','S','D','F','G','H','J','K','L'&#125;; unordered_set&lt;char&gt; row3&#123;'z','x','c','v','b','n','m','Z','X','C','V','B','N','M'&#125;; for(string word : words) &#123; int a = 0; int b = 0; int c = 0; for(char ch : word) &#123; if(row1.count(ch)) a = 1; else if(row2.count(ch)) b = 1; else if(row3.count(ch)) c = 1; if(a + b + c &gt; 1) break; &#125; if(a + b + c == 1) res.push_back(word); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[496. 下一个更大元素 I]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0-I%2F</url>
    <content type="text"><![CDATA[给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。 示例 1:123456输入: nums1 = [4,1,2], nums2 = [1,3,4,2].输出: [-1,3,-1]解释: 对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。 对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。 对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。 示例 2:123456输入: nums1 = [2,4], nums2 = [1,2,3,4].输出: [3,-1]解释: 对于num1中的数字2，第二个数组中的下一个较大数字是3。 对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。注意: nums1和nums2中所有元素是唯一的。nums1和nums2 的数组大小都不超过1000。 暴力解法：12345678910111213141516171819202122232425class Solution &#123;public: vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123; vector&lt;int&gt; res; for(int i=0;i&lt;findNums.size();i++)&#123; for(int j=0;j&lt;nums.size();j++)&#123; if(findNums[i]==nums[j])&#123; bool flag = true; for(int k=j;k&lt;nums.size();k++)&#123; if(nums[k]&gt;findNums[i])&#123; res.push_back(nums[k]); flag =false; break; &#125; &#125; if(flag)&#123; res.push_back(-1); &#125; &#125; &#125; &#125; return res; &#125;&#125;; 用栈做： 12345678910111213141516171819class Solution &#123;public: vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123; stack&lt;int&gt; s; unordered_map&lt;int,int&gt; m; for(int i=0;i&lt;nums.size();i++)&#123; while(s.size()&amp;&amp;s.top()&lt;nums[i])&#123; m[s.top()] = nums[i]; s.pop(); &#125; s.push(nums[i]); &#125; vector&lt;int&gt; res; for(int i=0;i&lt;findNums.size();i++)&#123; res.push_back(m.count(findNums[i])?m[findNums[i]]:-1); &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[492. 构造矩形]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F492-%E6%9E%84%E9%80%A0%E7%9F%A9%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求： 你设计的矩形页面必须等于给定的目标面积。 宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。 长度 L 和宽度 W 之间的差距应当尽可能小。你需要按顺序输出你设计的页面的长度 L 和宽度 W。 示例：1234输入: 4输出: [2, 2]解释: 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。 说明: 给定的面积不大于 10,000,000 且为正整数。你设计的页面的长度和宽度必须都是正整数。分析：题目要求还是很明确的，求出一组满足要求的长和宽，要求L&gt;=W,所以对area开根号，并且从中间开始遍历，只要满足L&gt;=W，就可以加入结果数组并输出、 123456789101112131415class Solution &#123;public: vector&lt;int&gt; constructRectangle(int area) &#123; vector&lt;int&gt; res; int x = sqrt(area); for(int i=x;i&lt;=area;i++)&#123; if(area%i==0&amp;&amp;i&gt;=area/i)&#123; res.push_back(i); res.push_back(area/i); break; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[476. 数字的补数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F476-%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。 注意: 给定的整数保证在32位带符号整数的范围内。你可以假定二进制数不包含前导零位。示例 1:123输入: 5输出: 2解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。 示例 2:123输入: 1输出: 0解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。 这题其实已经将问题简化了，由于限定给出的为正整数，那么也就不需要考虑负数的情况了。123456789101112class Solution &#123;public: int findComplement(int num) &#123; int sum = 0; int i = 0; while(sum&lt;num)&#123; sum += pow(2,i); i++; &#125; return sum-num; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[645. 错误的集合]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F645-%E9%94%99%E8%AF%AF%E7%9A%84%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。 给定一个数组 nums 代表了集合 S 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。 示例 1:123输入: nums = [1,2,2,4]输出: [2,3]注意: 给定数组的长度范围是 [2, 10000]。给定的数组是无序的。 1234567891011121314151617181920212223class Solution &#123;public: vector&lt;int&gt; findErrorNums(vector&lt;int&gt;&amp; nums) &#123; vector&lt;int&gt; res; int a[10001] = &#123;0&#125;; for(int i=0;i&lt;nums.size();i++)&#123; a[nums[i]]++; &#125; sort(nums.begin(),nums.end()); int n = nums.size(); for(int i=1;i&lt;=n;i++)&#123; if(a[i]==2)&#123; res.push_back(i); &#125; &#125; for(int i=1;i&lt;=n;i++)&#123; if(a[i]==0)&#123; res.push_back(i); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[643. 子数组最大平均数 I]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F643-%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E6%95%B0-I%2F</url>
    <content type="text"><![CDATA[给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。 示例 1:123输入: [1,12,-5,-6,50,3], k = 4输出: 12.75解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75 注意: 1 &lt;= k &lt;= n &lt;= 30,000。所给数据范围 [-10,000，10,000]。1234567891011121314151617181920212223class Solution &#123;public: double findMaxAverage(vector&lt;int&gt;&amp; nums, int k) &#123; double avg = 0; double max = -10001,sum = 0; int j = 0; if(nums.size()==1)&#123; return double(nums[0]); &#125; while(k+j&lt;=nums.size())&#123; sum = 0; for(int i=j;i&lt;k+j;i++)&#123; sum += nums[i]; &#125; avg = sum/k; if(avg&gt;max)&#123; max = avg; &#125; j++; &#125; return max; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[507. 完美数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F507-%E5%AE%8C%E7%BE%8E%E6%95%B0%2F</url>
    <content type="text"><![CDATA[对于一个 正整数，如果它和除了它自身以外的所有正因子之和相等，我们称它为“完美数”。 给定一个 正整数 n， 如果他是完美数，返回 True，否则返回 False 示例：123输入: 28输出: True解释: 28 = 1 + 2 + 4 + 7 + 14 注意: 输入的数字 n 不会超过 100,000,000. (1e8) 1234567891011121314151617181920class Solution &#123;public: bool checkPerfectNumber(int num) &#123; if(num==1)&#123; return false; &#125; int sum = 1; for(int i=2;i&lt;sqrt(num);i++)&#123; if(num%i==0)&#123; sum += i; sum += num/i; &#125; &#125; if(sum==num)&#123; return true; &#125;else&#123; return false; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[409. 最长回文串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F409-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。 在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。 注意:假设字符串的长度不会超过 1010。 示例 1:12345678输入:&quot;abccccdd&quot;输出:7解释:我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7。 分析：这题其实比求最长回文子串要简单，我的思路就是对給定字符串的每个字符进行哈希映射来计数，然后分情况讨论求和，首先偶数个的字符肯定能组成回文串，奇数个的字符如果大于2，则求和时要减去1，但最后总的要加1或者有某个字符个数为1，最后总的也是要加11234567891011121314151617181920212223242526272829class Solution &#123;public: int longestPalindrome(string s) &#123; int a[256] = &#123;0&#125;; for(int i=0;i&lt;s.size();i++)&#123; a[s[i]]++; &#125; int sum = 0; bool flag = false; for(int i=0;i&lt;256;i++)&#123; if(a[i]==s.size())&#123; return a[i]; &#125; if(a[i]&gt;=2&amp;&amp;a[i]%2==0)&#123; sum+=a[i]; &#125;else if(a[i]&gt;2&amp;&amp;a[i]%2!=0)&#123; sum+=(a[i]-1); flag = true; &#125;else if(a[i]==1)&#123; flag = true; &#125; &#125; if(flag)&#123; return sum+1; &#125;else&#123; return sum; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[459. 重复的子字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F459-%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。 示例 1:123输入: &quot;abab&quot;输出: True 解释: 可由子字符串 “ab” 重复两次构成。示例 2:123输入: &quot;aba&quot;输出: False 示例 3:123输入: &quot;abcabcabcabc&quot;输出: True 解释: 可由子字符串 “abc” 重复四次构成。 (或者子字符串 “abcabc” 重复两次构成。) 分析：判断一个字符串是否可以有多个子字符串构成，则该子字符串的长度不能大于该字符串长度的一半，所以可以从0到n/2进行遍历，如果i能被n整除，则进行验证。12345678910111213141516171819class Solution &#123;public: bool repeatedSubstringPattern(string s) &#123; int n = s.size(); for(int i=n/2;i&gt;0;i--)&#123; string s2 = ""; if(n%i==0)&#123; int c = n/i; for(int j=0;j&lt;c;j++)&#123; s2 += s.substr(0,i); &#125; &#125; if(s==s2)&#123; return true; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[443. 压缩字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一组字符，使用原地算法将其压缩。 压缩后的长度必须始终小于或等于原数组长度。 数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。 在完成原地修改输入数组后，返回数组的新长度。 进阶：你能否仅使用O(1) 空间解决问题？ 示例 1：12345输入：[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]输出：返回6，输入数组的前6个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;] 说明：“aa”被”a2”替代。”bb”被”b2”替代。”ccc”被”c3”替代。示例 2：12345输入：[&quot;a&quot;]输出：返回1，输入数组的前1个字符应该是：[&quot;a&quot;] 说明：没有任何字符串被替代。示例 3：12345输入：[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]输出：返回4，输入数组的前4个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。 说明：由于字符”a”不重复，所以不会被压缩。”bbbbbbbbbbbb”被“b12”替代。注意每个数字在数组中都有它自己的位置。注意： 所有字符都有一个ASCII值在[35, 126]区间内。1 &lt;= len(chars) &lt;= 1000。 分析，压缩字符串，我的代码跑是能跑通过了，但是写法不咋好看，不符合简介美观要求了。思路就不提了，基本就是按题目意思直接模拟，新开了个数组存放结果字符集，然后将其赋给chars数组12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Solution &#123;public: int compress(vector&lt;char&gt;&amp; chars) &#123; vector&lt;char&gt; res; vector&lt;char&gt; cur; int temp = 1; for(int i=0;i&lt;chars.size();i++)&#123; if((chars[i]==chars[i+1])&amp;&amp;((i+1)&lt;chars.size()))&#123; temp++; &#125;else if((chars[i]!=chars[i+1])||((i+1)==chars.size()))&#123; if(temp==1)&#123; res.push_back(chars[i]); &#125;else&#123; res.push_back(chars[i]); while(temp!=0)&#123; int x = temp%10; char y = x+'0'; temp /= 10; cur.push_back(y); &#125; reverse(cur.begin(),cur.end()); for(int j=0;j&lt;cur.size();j++)&#123; res.push_back(cur[j]); &#125; cur.clear(); &#125; temp = 1; &#125;&#125; int len = chars.size(); if(len&lt;res.size())&#123; for(int i=0;i&lt;len;i++)&#123; chars[i] = res[i]; &#125; for(int j=len;j&lt;res.size();j++)&#123; chars.push_back(res[j]); &#125; &#125;else if(len==res.size())&#123; for(int i=0;i&lt;res.size();i++)&#123; chars[i] = res[i]; &#125; &#125;else&#123; for(int i=0;i&lt;res.size();i++)&#123; chars[i] = res[i]; &#125; int t =len-res.size(); while(t--)&#123; chars.pop_back(); &#125; &#125; return chars.size(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[319. 灯泡开关]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F319-%E7%81%AF%E6%B3%A1%E5%BC%80%E5%85%B3%2F</url>
    <content type="text"><![CDATA[初始时有 n 个灯泡关闭。 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。 示例:1234567输入: 3输出: 1 解释: 初始时, 灯泡状态 [关闭, 关闭, 关闭].第一轮后, 灯泡状态 [开启, 开启, 开启].第二轮后, 灯泡状态 [开启, 关闭, 开启].第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 你应该返回 1，因为只有一个灯泡还亮着。一般都是想着直接暴力模拟，不明白为什么开个平方就行了 123456class Solution &#123;public: int bulbSwitch(int n) &#123; return (int)sqrt(n); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[129. 求根到叶子节点数字之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F129-%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。 例如，从根到叶子节点路径 1-&gt;2-&gt;3 代表数字 123。 计算从根到叶子节点生成的所有数字之和。 说明: 叶子节点是指没有子节点的节点。 示例 1:123456789输入: [1,2,3] 1 / \ 2 3输出: 25解释:从根到叶子节点路径 1-&gt;2 代表数字 12.从根到叶子节点路径 1-&gt;3 代表数字 13.因此，数字总和 = 12 + 13 = 25. 示例 2:123456789101112输入: [4,9,0,5,1] 4 / \ 9 0 / \5 1输出: 1026解释:从根到叶子节点路径 4-&gt;9-&gt;5 代表数字 495.从根到叶子节点路径 4-&gt;9-&gt;1 代表数字 491.从根到叶子节点路径 4-&gt;0 代表数字 40.因此，数字总和 = 495 + 491 + 40 = 1026. 12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int sumNumbers(TreeNode* root) &#123; return dfs(root,0); &#125; private: int dfs(TreeNode *root,int sum)&#123; if(root==NULL)&#123; return 0; &#125; if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)&#123; return sum*10+root-&gt;val; &#125; return dfs(root-&gt;left,sum*10+root-&gt;val)+dfs(root-&gt;right,sum*10+root-&gt;val); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[113. 路径总和 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F113-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C-II%2F</url>
    <content type="text"><![CDATA[给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。 说明: 叶子节点是指没有子节点的节点。 示例: 123456789101112131415给定如下二叉树，以及目标和 sum = 22， 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1返回:[ [5,4,11,2], [5,8,4,5]] 题目要求很清楚了，要求路径之和与给定值相等的所有路径，分别往左子树，右子树递归遍历所有路径，每次递归就减去相应的节点值，到了叶子结点如果剩余值与叶子结点值相等，则该条路径符合要求，记录下该条路径，不符合的中间结果就pop掉123456789101112131415161718192021222324252627282930313233/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int sum) &#123; vector&lt;vector&lt;int&gt;&gt; res; vector&lt;int&gt; cur; pathSum(root,sum,cur,res); return res; &#125; private: void pathSum(TreeNode *root,int gap,vector&lt;int&gt; &amp;cur,vector&lt;vector&lt;int&gt;&gt; &amp;res)&#123; if(root==NULL)&#123; return; &#125; cur.push_back(root-&gt;val); if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)&#123; if(gap==root-&gt;val)&#123; res.push_back(cur); &#125; &#125; pathSum(root-&gt;left,gap-root-&gt;val,cur,res); pathSum(root-&gt;right,gap-root-&gt;val,cur,res); cur.pop_back(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[102. 二叉树的层次遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。 例如:1234567891011121314给定二叉树: [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7返回其层次遍历结果：[ [3], [9,20], [15,7]] 层序遍历指按层次的顺序从根结点向下逐层进行遍历，且对同一层的节点为从左到右遍历。基本思路：从根结点开始广度优先搜索 将根结点root加入队列 取出队首结点，访问它 如果该结点有左孩子，将左孩子入队。 如果该结点有右孩子，将右孩子入队 返回第二步，直到队列为空 1234567891011121314151617181920212223242526272829303132333435363738/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123; queue&lt;TreeNode*&gt; q; vector&lt;vector&lt;int&gt;&gt; res; q.push(root); if(root==NULL)&#123; return res; &#125; while(!q.empty())&#123; queue&lt;TreeNode*&gt; qt; vector&lt;int&gt; v; while(!q.empty())&#123; TreeNode* now = q.front(); q.pop(); v.push_back(now-&gt;val); if(now-&gt;left!=NULL)&#123; qt.push(now-&gt;left); &#125; if(now-&gt;right!=NULL)&#123; qt.push(now-&gt;right); &#125; &#125; res.push_back(v); q = qt; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[145. 二叉树的后序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，返回它的 后序 遍历。 示例:12345678输入: [1,null,2,3] 1 \ 2 / 3 输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？先遍历左子树，再遍历右子树，最后输出根结点递归法：12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; postorder(res,root); return res; &#125; void postorder(vector&lt;int&gt; &amp;res,TreeNode* root)&#123; if(root==NULL)&#123; return; &#125; postorder(res,root-&gt;left); postorder(res,root-&gt;right); res.push_back(root-&gt;val); &#125;&#125;; 迭代法：12345678910111213141516171819202122232425262728293031323334/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; stack&lt;TreeNode *&gt; s; s.push(root); if(root==NULL)&#123; return res; &#125; while(!s.empty())&#123; TreeNode *temp = s.top(); if(temp-&gt;left)&#123; s.push(temp-&gt;left); temp-&gt;left = NULL; &#125;else if(temp-&gt;right)&#123; s.push(temp-&gt;right); temp-&gt;right = NULL; &#125;else&#123; res.push_back(temp-&gt;val); s.pop(); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[144. 二叉树的前序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，返回它的 前序 遍历。 示例:12345678输入: [1,null,2,3] 1 \ 2 / 3 输出: [1,2,3] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 递归法：12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; preorder(res,root); return res; &#125; void preorder(vector&lt;int&gt; &amp;res,TreeNode* root)&#123; if(root==NULL)&#123; return ; &#125; res.push_back(root-&gt;val); preorder(res,root-&gt;left); preorder(res,root-&gt;right); &#125;&#125;; 迭代法：1234567891011121314151617181920212223242526272829303132/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; stack&lt;TreeNode *&gt; s; if(root!=NULL)&#123; s.push(root); &#125; while(!s.empty())&#123; TreeNode *p = s.top(); s.pop(); res.push_back(p-&gt;val); if(p-&gt;right!=NULL)&#123; s.push(p-&gt;right); &#125; if(p-&gt;left!=NULL)&#123; s.push(p-&gt;left); &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[94. 二叉树的中序遍历]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，返回它的中序 遍历。 示例:12345678输入: [1,null,2,3] 1 \ 2 / 3输出: [1,3,2] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 遍历顺序：左子树-&gt;根结点-&gt;右子树 递归法：123456789101112131415161718192021222324/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; inorder(res,root); return res; &#125; void inorder(vector&lt;int&gt; &amp;res,TreeNode* root)&#123; if(root)&#123; inorder(res,root-&gt;left); res.push_back(root-&gt;val); inorder(res,root-&gt;right); &#125; &#125;&#125;; 迭代法：用栈来模拟中序遍历123456789101112131415161718192021222324252627282930/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; stack&lt;TreeNode*&gt; s; TreeNode* p = root; while(!s.empty()||p!=NULL)&#123;//当栈s为空或p指针不空进行迭代 if(p!=NULL)&#123;//当p不空，将其压入栈，并且指针指向左孩子 s.push(p); p = p-&gt;left; &#125;else&#123;//p为空指针，将栈顶元素赋给p，并弹出栈顶元素，将p push进结果数组，然后p指针指向右孩子 p = s.top(); s.pop(); res.push_back(p-&gt;val); p = p-&gt;right; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[766. 托普利茨矩阵]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F766-%E6%89%98%E6%99%AE%E5%88%A9%E8%8C%A8%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[如果一个矩阵的每一方向由左上到右下的对角线上具有相同元素，那么这个矩阵是托普利茨矩阵。 给定一个 M x N 的矩阵，当且仅当它是托普利茨矩阵时返回 True。 示例 1:1234567891011输入: matrix = [ [1,2,3,4], [5,1,2,3], [9,5,1,2]]输出: True解释:在上述矩阵中, 其对角线为:&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;。各条对角线上的所有元素均相同, 因此答案是True。 示例 2:12345678输入:matrix = [ [1,2], [2,2]]输出: False解释: 对角线&quot;[1, 2]&quot;上的元素不同。 说明: matrix 是一个包含整数的二维数组。matrix 的行数和列数均在 [1, 20]范围内。matrix[i][j] 包含的整数在 [0, 99]范围内。进阶: 如果矩阵存储在磁盘上，并且磁盘内存是有限的，因此一次最多只能将一行矩阵加载到内存中，该怎么办？如果矩阵太大以至于只能一次将部分行加载到内存中，该怎么办？ 123456789class Solution &#123;public: bool isToeplitzMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123; for (int i = 1; i &lt; matrix.size(); ++i) for (int j = 1; j &lt; matrix[0].size(); ++j) if (matrix[i][j] != matrix[i - 1][j - 1]) return false; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[746. 使用最小花费爬楼梯]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F746-%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF%2F</url>
    <content type="text"><![CDATA[数组的每个索引做为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 costi。 每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。 您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。 示例 1:123输入: cost = [10, 15, 20]输出: 15解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。 示例 2:123输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]输出: 6解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。 注意： cost 的长度将会在 [2, 1000]。每一个 cost[i] 将会是一个Integer类型，范围为 [0, 999]。 求爬楼梯的最小花费，考虑动态规划解法，因为每爬上一个楼梯后你可以选择爬一级或两级楼梯，因此每次都是从前面一级或者是前面两级的位置过来的，因此得出dp转移方程，用dp[i]表示爬到第i层的最小花费dp[i] = min(dp[i-2]+cost[i-2],dp[i-1]+cost[i-1])但是下面的代码测试时显示超时的1234567891011class Solution &#123;public: int minCostClimbingStairs(vector&lt;int&gt;&amp; cost) &#123; int n = cost.size(); vector&lt;int&gt; dp(n+1,0); for(int i=2;i&lt;n+1;i++)&#123; dp[i] = min(dp[i-2]+cost[i-2],dp[i-1]+cost[i-1]); &#125; return dp[n]; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-020 功夫传人（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-020-%E5%8A%9F%E5%A4%AB%E4%BC%A0%E4%BA%BA%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-020 功夫传人（25 分）一门武功能否传承久远并被发扬光大，是要看缘分的。一般来说，师傅传授给徒弟的武功总要打个折扣，于是越往后传，弟子们的功夫就越弱…… 直到某一支的某一代突然出现一个天分特别高的弟子（或者是吃到了灵丹、挖到了特别的秘笈），会将功夫的威力一下子放大N倍 —— 我们称这种弟子为“得道者”。 这里我们来考察某一位祖师爷门下的徒子徒孙家谱：假设家谱中的每个人只有1位师傅（除了祖师爷没有师傅）；每位师傅可以带很多徒弟；并且假设辈分严格有序，即祖师爷这门武功的每个第i代传人只能在第i-1代传人中拜1个师傅。我们假设已知祖师爷的功力值为Z，每向下传承一代，就会减弱r%，除非某一代弟子得道。现给出师门谱系关系，要求你算出所有得道者的功力总值。 输入格式： 输入在第一行给出3个正整数，分别是：N（&lt;=10^5^）——整个师门的总人数（于是每个人从0到N-1编号，祖师爷的编号为0）；Z——祖师爷的功力值（不一定是整数，但起码是正数）；r ——每传一代功夫所打的折扣百分比值（不超过100的正数）。接下来有N行，第i行（i=0, …, N-1）描述编号为i的人所传的徒弟，格式为： K~i~ ID[1] ID[2] … ID[K~i~] 其中K~i~是徒弟的个数，后面跟的是各位徒弟的编号，数字间以空格间隔。K~i~为零表示这是一位得道者，这时后面跟的一个数字表示其武功被放大的倍数。 输出格式： 在一行中输出所有得道者的功力总值，只保留其整数部分。题目保证输入和正确的输出都不超过10^10^。 输入样例：123456789101110 18.0 1.003 2 3 51 91 41 70 72 6 11 80 90 40 3 输出样例：1404 题目要求计算所有得道者功力总和，祖师爷功力为z，每下降一代传授的功力要减r%，根据一代代递归得出每代徒弟的功力，如果是得道者，就将相应功力加起来。 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;vector&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;const int maxm = 100005;vector&lt;int&gt; child[maxm];double val[maxm],z,r,sum;void dfs(int id,double w)&#123; if(val[id])&#123; sum = sum+w*val[id]; &#125;else&#123; for(int i=0;i&lt;child[id].size();i++)&#123; dfs(child[id][i],w*r); &#125; &#125;&#125;int main()&#123; int n,m,k; memset(val,0,sizeof(val)); sum = 0; scanf("%d %lf %lf",&amp;n,&amp;z,&amp;r); r = (100-r)/100; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;m); if(!m)&#123; scanf("%lf",&amp;val[i]); &#125;else&#123; for(int j=0;j&lt;m;j++)&#123; scanf("%d",&amp;k); child[i].push_back(k); &#125; &#125; &#125; dfs(0,z); printf("%d\n",(int)sum); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-012 关于堆的判断（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-012-%E5%85%B3%E4%BA%8E%E5%A0%86%E7%9A%84%E5%88%A4%E6%96%AD%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-012 关于堆的判断（25 分）将一系列给定数字顺序插入一个初始为空的小顶堆H[]。随后判断一系列相关命题是否为真。命题分下列几种： “x is the root”：x是根结点； “x and y are siblings”：x和y是兄弟结点； “x is the parent of y”：x是y的父结点； “x is a child of y”：x是y的一个子结点。输入格式： 每组测试第1行包含2个正整数N（&lt;= 1000）和M（&lt;= 20），分别是插入元素的个数、以及需要判断的命题数。下一行给出区间[-10000, 10000]内的N个要被插入一个初始为空的小顶堆的整数。之后M行，每行给出一个命题。题目保证命题中的结点键值都是存在的。 输出格式： 对输入的每个命题，如果其为真，则在一行中输出“T”，否则输出“F”。 输入样例：1234565 446 23 26 24 1024 is the root26 and 23 are siblings46 is the parent of 2323 is a child of 10 输出样例：1234FTFT 首先提一下概念：堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子结点的值。小顶堆是指每个父亲结点的值小于等于孩子结点的值，每个结点的值都是以它为根结点的子树的最小值。 题目要求根据给出的数值建立小顶堆，然后根据建立的小顶堆判断相应结点关系是否正确 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;map&gt;using namespace std;const int maxm = 10010;const int inf = 99999999;int a[maxm],cnt;void creat(int x)&#123; a[++cnt] = x; int t = cnt; while(t&gt;1&amp;&amp;(a[t/2]&gt;a[t]))&#123; a[t] = a[t/2]; a[t/2] = x; t /= 2; &#125; a[t] = x;&#125;int main()&#123; int n,m,x,y; string s; map&lt;int,int&gt; p; scanf("%d%d",&amp;n,&amp;m); cnt = 0; for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;x); creat(x); &#125; for(int i=1;i&lt;=n;i++)&#123; p[a[i]] = i; &#125; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;x); cin&gt;&gt;s; if(s[0]=='a')&#123; scanf("%d",&amp;y); getline(cin,s); if(p[x]/2==p[y]/2)&#123; printf("T\n"); &#125;else&#123; printf("F\n"); &#125; &#125;else&#123; cin&gt;&gt;s; cin&gt;&gt;s; if(s[0]=='r')&#123; if(p[x]==1)&#123; printf("T\n"); &#125;else&#123; printf("F\n"); &#125; &#125;else if(s[0]=='p')&#123; cin&gt;&gt;s; cin&gt;&gt;y; if(p[x]==p[y]/2)&#123; printf("T\n"); &#125;else&#123; printf("F\n"); &#125; &#125;else&#123; cin&gt;&gt;s; cin&gt;&gt;y; if(p[x]/2==p[y])&#123; printf("T\n"); &#125;else&#123; printf("F\n"); &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[153. 寻找旋转排序数组中的最小值]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%2F</url>
    <content type="text"><![CDATA[假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 请找出其中最小的元素。 你可以假设数组中不存在重复元素。 示例 1:12输入: [3,4,5,1,2]输出: 1 示例 2:12输入: [4,5,6,7,0,1,2]输出: 0 这道题乍一看很纳闷，求最小元素不是一个sort就能搞定的吗？ 1234567class Solution &#123;public: int findMin(vector&lt;int&gt;&amp; nums) &#123; sort(nums.begin(),nums.end()); return nums[0]; &#125;&#125;; 后来看下标签，考点是二分查找我们需要知道，对于一个区间A，如果A[start] &lt; A[stop]，那么该区间一定是有 序的了。另外，由于不含重复元素，需要分两种情况。对于一个轮转了的排序了的数组，如果nums[mid]&gt;nums[left]，最小值一定在右半区间如果nums[mid]&lt;nums[left]，最小值一定在左半区间 12345678910111213141516171819202122232425262728class Solution &#123;public: int findMin(vector&lt;int&gt;&amp; nums) &#123; int size = nums.size(); if(size==0)&#123; return 0; &#125;else if(size==1)&#123; return nums[0]; &#125;else if(size==2)&#123; return min(nums[0],nums[1]); &#125; int left = 0,right = size-1; while(left&lt;right-1)&#123; if(nums[left]&lt;nums[right])&#123; return nums[left]; &#125; int mid = left+(right-left)/2; if(nums[mid]&lt;nums[left])&#123; right = mid; &#125; if(nums[mid]&gt;nums[left])&#123; left = mid; &#125; &#125; return min(nums[left],nums[right]); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红顶商人胡雪岩]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E7%BA%A2%E9%A1%B6%E5%95%86%E4%BA%BA%E8%83%A1%E9%9B%AA%E5%B2%A9%2F</url>
    <content type="text"><![CDATA[期末考试最后一考完，吃完午饭，我便急匆匆出了校门，来到学校边上的新生公交站，冒着烈日等公交，当时太阳倒不算狠毒，但着实闷热得很。上午考的概率论很不理想，一道分值最高的计算题明明是送分题却让我看走眼，死心眼的以为老师出错题了，我已经不止一次考完交了卷才发觉自己犯了傻，但事后纠结自知已无用，也就将其抛之脑后罢了。额头上汗一滴滴的往下流，但也只能忍一忍了，因为早就计划好去一个地方参观参观－－胡雪岩故居。 以前一直没有意识到胡雪岩故居就在河坊街边上，因此即使路过怕是也没怎么在意，但这次想到要专门去访一访也并不是没有缘由的。我大学过的平平淡淡，唯一做的一件事就是养成了读书的习惯，纸质书也好，ｋｉｎｄｌｅ也好，一天不去读个及章节反倒不舒服了。最近一直在读的就是高阳写的《胡雪岩全传》，但有一点我也清楚，这毕竟只是小说，不可能与历史完全相合，因为关于胡雪岩的很多事迹其实本也就无法考证了，因此我也就只谈谈小说里的胡雪岩好了。说起来，读这种小说会让我有一种亲切感，一方面根据真人真事改编，另一方面，故事背景就发生在杭州，浙江一带，作为一个杭州人，哪怕读到一些地名倒也不会陌生。从书中的描述上来看，我对胡雪岩的佩服还是多过反感的，他身上有很多我所极欠缺的品质，总之作为一个商人，他几乎具备了商人所需的大部分优秀品质，被世人尊为商圣也不是毫无来由的。智商极高，于是不慌不乱，脑袋转动极快，一有了思路便快准狠的下手，不光快，而且严峻形势下还能考虑到方方面面，极为严谨不苟。 另一方面，牛逼的就是他的为人处世实在是老到精炼，无论官场，商场，帮派各种地方都混得开，交际甚广。朋友不光多，而且重情重义，绝不都是一帮狗肉朋友！他对自己到算是有很清楚的认识，对做官没兴趣，知道自己生来就是做生意的，不做生意皮就痒痒。关于他做人打交道的漂亮之处，我就举一个例子好了。那是在红顶商人那部里面张太太说的一件事，这位张太太也就是那位钱庄的伙计张胖子的夫人，张胖子后来由于自己的雇主翻脸不认人，到上海开了家杂货店，与红红火火的胡雪岩比起来了算是落魄了，但胡雪岩还是想拉他一把，与他合伙开钱庄，这时张太太透露了多年前的一件事，那时胡雪岩被赶出钱庄，正是穷困潦倒之际，有一天竟跑来找张太太借钱，一问不为别的，还是为了朋友，当时胡雪岩一位朋友重病，急需买药治疗，穷的叮当响的胡雪岩依旧想办法为其筹钱，当时拿了自己的一枚戒指作抵押问张太太借了5两银子，说道“这枚戒指市面上也就值1两，但是我母亲留给我的，所以也看的比较贵重”，后来钱当然退了，但胡雪岩并没有把戒指收回去，因为“今日的5两与当时的5两怎可同日而语”。一件小事，或者一次小小的谈话，可以看出他做人的漂亮之处，因此交际圈拉得开也不是完全没道理的。 当然，他的有些做法在很多人眼中倒并不算光彩，但他经商的能力确实是黑不掉的。从一个一穷二白的小伙计，到王有龄的知遇之恩，30年间平步青云，扶摇直上，甚至到了富可敌国，但悲剧性的一幕确实无法善终，最后一切在眨眼间竟就烟雾般消散，自己一生的经营毁于一旦，几日后抑郁而终，实在凄凉。这道又让我想起来了红楼梦里的贾府，繁华到幻灭，也就是一瞬间的事，简直让人分不清真假。他在元宝街的旧居总体还算方正，在我看来是挺大的了，正门进去假山林立，内湖内桥搭配得当，溶洞内也可方便出入，有许多珍贵的植物，谷物，包括厨房的摆设，都一点点映射出当日清末大户人家的生活景象，几圈逛下来累了，边找了个阴凉处木凳下坐了坐，闲暇之余顺便又看了一章节的小说，总体还算惬意。这里插一句，读书的时候出去逛逛真的不错，至少带着学生证门票可以半价。出了旧居，我便不行来到了另一处与胡雪岩有关的地方，想必你也已经猜到了，胡庆余堂，“大善人胡雪岩”开药店的初心就是想在后世留个好名，这点想必他倒可以知足了，当年威风江浙的胡道台，给人留下的胡庆余堂着实是一笔珍贵的财富。胡庆余堂至今在杭州还有多家门店，每天来看病的人络绎不绝，今天还碰巧有位带着几个老外在胡庆余堂博物馆做介绍的。百年过去，关于这位胡老爷的故事也都成了历史，就让我对这位杭州的实干家表示一份敬意吧，至少一生短暂，他没有稀里糊涂的就浪费过去了。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[80. 删除排序数组中的重复项 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F80-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9-II%2F</url>
    <content type="text"><![CDATA[给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1:12345给定 nums = [1,1,1,2,2,3],函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。你不需要考虑数组中超出新长度后面的元素。 示例 2:123456给定 nums = [0,0,1,1,1,1,2,3,3],函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。你不需要考虑数组中超出新长度后面的元素。说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) { print(nums[i]);} 分析：要求删除一个排序数组中的中的重复项，每个元素要求最多出现两次。首先，数组为空的时候特殊判断一下。然后用一个num计数标记，如果相邻两个数相等并且num小于2的时候直接后移，如果相邻两个数不相等，则后移完成后将num置为0。 12345678910111213141516171819202122class Solution &#123;public: int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123; if(nums.size()==0)&#123; return 0; &#125; int num = 0; int j = 0; for(int i=1;i&lt;nums.size();i++)&#123; if(nums[j]==nums[i])&#123; num++; if(num&lt;2)&#123; nums[++j] = nums[i]; &#125; &#125;else&#123; nums[++j] = nums[i]; num = 0; &#125; &#125; return j+1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[860. 柠檬水找零]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F860-%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6%2F</url>
    <content type="text"><![CDATA[在柠檬水摊上，每一杯柠檬水的售价为 5 美元。 顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。 注意，一开始你手头没有任何零钱。 如果你能给每位顾客正确找零，返回 true ，否则返回 false 。 示例 1：12输入：[5,5,5,10,20]输出：true 解释：前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。由于所有客户都得到了正确的找零，所以我们输出 true。示例 2： 输入：[5,5,10]输出：true示例 3： 输入：[10,10]输出：false示例 4： 输入：[5,5,10,10,20]输出：false解释：前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。由于不是每位顾客都得到了正确的找零，所以答案是 false。 提示： 0 &lt;= bills.length &lt;= 10000bills[i] 不是 5 就是 10 或是 20 1234567891011121314151617181920212223242526272829class Solution &#123;public: bool lemonadeChange(vector&lt;int&gt;&amp; bills) &#123; int cnt1 = 0,cnt2 = 0; for(int i=0;i&lt;bills.size();i++)&#123; if(bills[i]==5)&#123; cnt1++; &#125; if(bills[i]==10)&#123; cnt2++; cnt1--; &#125; if(bills[i]==20)&#123; cnt1--; if(cnt2==0)&#123; cnt1 -=2; &#125;else&#123; cnt2--; &#125; &#125; if(cnt1&lt;0||cnt2&lt;0)&#123; return false; &#125; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[441. 排列硬币]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F441-%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81%2F</url>
    <content type="text"><![CDATA[你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。 给定一个数字 n，找出可形成完整阶梯行的总行数。 n 是一个非负整数，并且在32位有符号整型的范围内。 示例 1:123456n = 5硬币可排列成以下几行:¤¤ ¤¤ ¤ 因为第三行不完整，所以返回2.示例 2:1234567n = 8硬币可排列成以下几行:¤¤ ¤¤ ¤ ¤¤ ¤ 因为第四行不完整，所以返回3. 12345678910111213141516171819class Solution &#123;public: int arrangeCoins(int n) &#123; if(n&lt;1)&#123; return n; &#125; int left = 0,right =n; while(left&lt;=right)&#123; long long mid = left+(right-left)/2; long sum = mid*(mid+1)/2; if(sum&gt;n)&#123; right = mid-1; &#125;else&#123; left = mid+1; &#125; &#125; return left-1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[744. 寻找比目标字母大的最小字母]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D%2F</url>
    <content type="text"><![CDATA[给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。 数组里字母的顺序是循环的。举个例子，如果目标字母target = ‘z’ 并且有序数组为 letters = [‘a’, ‘b’]，则答案返回 ‘a’。 示例:1234567891011121314151617181920212223242526272829输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;a&quot;输出: &quot;c&quot;输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;c&quot;输出: &quot;f&quot;输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;d&quot;输出: &quot;f&quot;输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;g&quot;输出: &quot;j&quot;输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;j&quot;输出: &quot;c&quot;输入:letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]target = &quot;k&quot;输出: &quot;c&quot; 注: letters长度范围在[2, 10000]区间内。letters 仅由小写字母组成，最少包含两个不同的字母。目标字母target 是一个小写字母。 123456789101112class Solution &#123;public: char nextGreatestLetter(vector&lt;char&gt;&amp; letters, char target) &#123; if(letters.empty()) return NULL; for(int i = 0; i &lt; letters.size(); i++) &#123; if(letters[i] &gt; target) return letters[i]; &#125; return letters[0]; &#125;&#125;; 这题其实是考察二分查找 12345678910111213141516class Solution &#123;public: char nextGreatestLetter(vector&lt;char&gt;&amp; letters, char target) &#123; int n = letters.size(); int left = 0,right = n; while(left&lt;right)&#123; int mid = left+(right-left)/2; if(letters[mid]&gt;target)&#123; right = mid; &#125;else&#123; left = mid+1; &#125; &#125; return letters[left%n]; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[747. 至少是其他数字两倍的最大数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F747-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%2F</url>
    <content type="text"><![CDATA[在一个给定的数组nums中，总是存在一个最大元素 。 查找数组中的最大元素是否至少是数组中每个其他数字的两倍。 如果是，则返回最大元素的索引，否则返回-1。 示例 1:1234输入: nums = [3, 6, 1, 0]输出: 1解释: 6是最大的整数, 对于数组中的其他整数,6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1. 示例 2:123输入: nums = [1, 2, 3, 4]输出: -1解释: 4没有超过3的两倍大, 所以我们返回 -1. 提示: nums 的长度范围在[1, 50].每个 nums[i] 的整数范围在 [0, 99]. 1234567891011121314151617class Solution &#123;public: int dominantIndex(vector&lt;int&gt;&amp; nums) &#123; int maxm =0,x = nums.size(); unordered_map&lt;int,int&gt; m; for(int i=0;i&lt;nums.size();i++)&#123; m[nums[i]] = i; &#125; sort(nums.begin(),nums.end()); maxm = nums[x-1]; if(maxm&gt;=nums[x-2]*2)&#123; return m[maxm]; &#125;else&#123; return -1; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[561. 数组拆分 I]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86-I%2F</url>
    <content type="text"><![CDATA[给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。 示例 1:1234输入: [1,4,3,2]输出: 4解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4). 提示: n 是正整数,范围在 [1, 10000].数组中的元素范围在 [-10000, 10000]. 1234567891011121314class Solution &#123;public: int arrayPairSum(vector&lt;int&gt;&amp; nums) &#123; int res =0; if(nums.size()==0)&#123; return 0; &#125; sort(nums.begin(),nums.end()); for(int i=0;i&lt;nums.size();i+=2)&#123; res += nums[i]; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[532. 数组中的K-diff数对]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F532-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84K-diff%E6%95%B0%E5%AF%B9%2F</url>
    <content type="text"><![CDATA[给定一个整数数组和一个整数 k, 你需要在数组里找到不同的 k-diff 数对。这里将 k-diff 数对定义为一个整数对 (i, j), 其中 i 和 j 都是数组中的数字，且两数之差的绝对值是 k. 示例 1:123输入: [3, 1, 4, 1, 5], k = 2输出: 2解释: 数组中有两个 2-diff 数对, (1, 3) 和 (3, 5)。 尽管数组中有两个1，但我们只应返回不同的数对的数量。示例 2:123输入:[1, 2, 3, 4, 5], k = 1输出: 4解释: 数组中有四个 1-diff 数对, (1, 2), (2, 3), (3, 4) 和 (4, 5)。 示例 3:123输入: [1, 3, 1, 5, 4], k = 0输出: 1解释: 数组中只有一个 0-diff 数对，(1, 1)。 注意: 数对 (i, j) 和数对 (j, i) 被算作同一数对。数组的长度不超过10,000。所有输入的整数的范围在 [-1e7, 1e7]。分析，题目要求差为k的数对有多少对，这里当k为0时，数组里某个数出现大于2都算做1个数对，当k大于0，也需要去重，所以我用了两个容器，map用来映射计数，set用来结果去重。123456789101112131415161718192021222324252627282930class Solution &#123;public: int findPairs(vector&lt;int&gt;&amp; nums, int k) &#123; if(nums.size()==0||k&lt;0)&#123; return 0; &#125; map&lt;int,int&gt; m ; set&lt;int&gt; s; int count = 0; for(int i=0;i&lt;nums.size();i++)&#123; m[nums[i]]++; &#125; for(int i=0;i&lt;nums.size();i++)&#123; if(k==0)&#123; &#123; if(m[nums[i]]&gt;=2)&#123; s.insert(nums[i]); &#125; count = s.size(); &#125; &#125;else&#123; if(m[nums[i]+k]&gt;0)&#123; s.insert(nums[i]); &#125; count = s.size(); &#125; &#125; return count; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[455. 分发饼干]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F455-%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2%2F</url>
    <content type="text"><![CDATA[假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。 注意： 你可以假设胃口值为正。一个小朋友最多只能拥有一块饼干。 示例 1:12345678输入: [1,2,3], [1,1]输出: 1解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。 示例 2:12345678输入: [1,2], [1,2,3]输出: 2解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2. 分析：给定一个关于饼干的数组和一个关于胃口的数组，要求尽可能满足多的孩子，那么需要先对连个数组进行排序，尽可能让小饼干满足小胃口的，而不是那一块大饼干满足小胃口的，以此进行遍历计数 123456789101112131415161718class Solution &#123;public: int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123; int res = 0,index = 0; sort(g.begin(),g.end()); sort(s.begin(),s.end()); for(int i=0;i&lt;s.size();i++)&#123; if(s[i]&gt;=g[index])&#123; res++; index++; if(index&gt;=g.size())&#123; break; &#125; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[453. 最小移动次数使数组元素相等]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F453-%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89%2F</url>
    <content type="text"><![CDATA[给定一个长度为 n 的非空整数数组，找到让数组所有元素相等的最小移动次数。每次移动可以使 n - 1 个元素增加 1。 示例:12345678910输入:[1,2,3]输出:3解释:只需要3次移动（注意每次移动会增加两个元素的值）：[1,2,3] =&gt; [2,3,3] =&gt; [3,4,3] =&gt; [4,4,4] 分析：逆向思考，每次移动让剩余的n-1个数加1，相当于每次移动让选定的那个数减1，所以最少移动次数其实就是所有元素减去最小元素的和 12345678910111213class Solution &#123;public: int minMoves(vector&lt;int&gt;&amp; nums) &#123; int min = INT_MAX,sum = 0,res = 0; for(int i=0;i&lt;nums.size();i++)&#123; sum += nums[i]; if(nums[i]&lt;min)&#123; min = nums[i]; &#125; &#125; return sum-min*nums.size(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-013 红色警报（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-013-%E7%BA%A2%E8%89%B2%E8%AD%A6%E6%8A%A5%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-013 红色警报（25 分）战争中保持各个城市间的连通性非常重要。本题要求你编写一个报警程序，当失去一个城市导致国家被分裂为多个无法连通的区域时，就发出红色警报。注意：若该国本来就不完全连通，是分裂的k个区域，而失去一个城市并不改变其他城市之间的连通性，则不要发出警报。 输入格式： 输入在第一行给出两个整数N（0 &lt; N &lt;=500）和M（&lt;=5000），分别为城市个数（于是默认城市从0到N-1编号）和连接两城市的通路条数。随后M行，每行给出一条通路所连接的两个城市的编号，其间以1个空格分隔。在城市信息之后给出被攻占的信息，即一个正整数K和随后的K个被攻占的城市的编号。 注意：输入保证给出的被攻占的城市编号都是合法的且无重复，但并不保证给出的通路没有重复。 输出格式： 对每个被攻占的城市，如果它会改变整个国家的连通性，则输出“Red Alert: City k is lost!”，其中k是该城市的编号；否则只输出“City k is lost.”即可。如果该国失去了最后一个城市，则增加一行输出“Game Over.”。 输入样例：12345675 40 11 33 00 451 2 0 4 3 输出样例：123456City 1 is lost.City 2 is lost.Red Alert: City 0 is lost!City 4 is lost.City 3 is lost.Game Over. 方法一：用dfs判断是否连通并且计算连通数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;const int maxm = 550;int edge[maxm][maxm];int visit[maxm],n;void dfs(int x)&#123; visit[x] = 1; for(int i=0;i&lt;n;i++)&#123; if(!visit[i]&amp;&amp;edge[x][i])&#123; dfs(i); &#125; &#125;&#125;int Calcnt()&#123; int cnt = 0; for(int i=0;i&lt;n;i++)&#123; if(!visit[i])&#123; dfs(i); cnt++; &#125; &#125; return cnt;&#125;int main()&#123; int m; scanf("%d%d",&amp;n,&amp;m); memset(edge,0,sizeof(edge)); memset(visit,0,sizeof(visit)); for(int i=0;i&lt;m;i++)&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); edge[a][b] = 1; edge[b][a] = 1; &#125; int cntt = Calcnt(); int k,city; scanf("%d",&amp;k); for(int i=0;i&lt;k;i++)&#123; scanf("%d",&amp;city); for(int j=0;j&lt;n;j++)&#123; if(edge[city][j])&#123; edge[city][j] = 0; edge[j][city] = 0; &#125; &#125; memset(visit,0,sizeof(visit)); int temp = Calcnt(); if(temp&gt;cntt+1)&#123; printf("Red Alert: City %d is lost!\n",city); &#125;else&#123; printf("City %d is lost.\n",city); &#125; cntt = temp; &#125; if(k==n)&#123; printf("Game Over.\n"); &#125; return 0;&#125; 方法二：并查集 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;cmath&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;const int maxm = 550;int n,m;struct node&#123; int u,v;&#125;edge[5005];int visit[maxm],fa[maxm];int Find(int x)&#123; if(x==fa[x])&#123; return fa[x]; &#125;else&#123; return Find(fa[x]); &#125;&#125;void Union(int x,int y)&#123; int xc = Find(x); int yc = Find(y); if(xc!=yc)&#123; fa[xc] = yc; &#125;&#125;int main()&#123; int k,u,v; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;n;i++)&#123; fa[i] = i; &#125; for(int i=0;i&lt;m;i++)&#123; scanf("%d%d",&amp;u,&amp;v); edge[i].u = u; edge[i].v = v; Union(u,v); &#125; int num1 = 0,num2; for(int i=0;i&lt;n;i++)&#123; if(fa[i]==i)&#123; num1++; &#125; &#125; memset(visit,0,sizeof(visit)); scanf("%d",&amp;k); for(int j=0;j&lt;k;j++)&#123; num2 = 0; for(int i=0;i&lt;n;i++)&#123; fa[i] = i; &#125; int city; scanf("%d",&amp;city); visit[city] = 1; for(int i=0;i&lt;m;i++)&#123; if(visit[edge[i].u]==1||visit[edge[i].v]==1)&#123; continue; &#125;else&#123; Union(edge[i].u,edge[i].v); &#125; &#125; for(int i=0;i&lt;n;i++)&#123; if(fa[i]==i)&#123; num2++; &#125; &#125; if(num1==num2||num1+1==num2)&#123; printf("City %d is lost.\n",city); &#125;else&#123; printf("Red Alert: City %d is lost!\n",city); &#125; num1 = num2; &#125; num1 = 0; for(int i=0;i&lt;n;i++)&#123; if(visit[i]==1)&#123; num1++; &#125; &#125; if(num1==n)&#123; printf("Game Over.\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-014 列车调度（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-014-%E5%88%97%E8%BD%A6%E8%B0%83%E5%BA%A6%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-014 列车调度（25 分）火车站的列车调度铁轨的结构如下图所示。 \ Figure 两端分别是一条入口（Entrance）轨道和一条出口（Exit）轨道，它们之间有N条平行的轨道。每趟列车从入口可以选择任意一条轨道进入，最后从出口离开。在图中有9趟列车，在入口处按照{8，4，2，5，3，9，1，6，7}的顺序排队等待进入。如果要求它们必须按序号递减的顺序从出口离开，则至少需要多少条平行铁轨用于调度？ 输入格式： 输入第一行给出一个整数N (2 &lt;= N &lt;= 10^5^)，下一行给出从1到N的整数序号的一个重排列。数字间以空格分隔。 输出格式： 在一行中输出可以将输入的列车按序号递减的顺序调离所需要的最少的铁轨条数。 输入样例：1298 4 2 5 3 9 1 6 7 输出样例：14 分析：求最少下降子序列数，即求最长上升子序列长度关于 Dilworth定理：Dilworth定理根据序列划分的最小数量的链描述了任何有限偏序集的宽度。定理内容：反链是一种偏序集，其任意两个元素不可比；而链则是一种任意两个元素可比的偏序集。Dilworth定理说明，存在一个反链A与一个将序列划分为链族P的划分，使得划分中链的数量等于集合A的基数。当存在这种情况时，对任何至多能包含来自P中每一个成员一个元素的反链，A一定是此序列中的最大反链。同样地，对于任何最少包含A中的每一个元素的一个链的划分，P也一定是序列可以划分出的最小链族。偏序集的宽度被定义为A与P的共同大小。另一种Dilworth定理的等价表述是：在有穷偏序集中，任何反链最大元素数目等于任何将集合到链的划分中链的最小数目。一个关于无限偏序集的理论指出，在此种情况下，一个偏序集具有有限的宽度w，当且仅当它可以划分为最少w条链。123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;set&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; set&lt;int&gt; s; int n,d; scanf("%d",&amp;n); while(n--)&#123; scanf("%d",&amp;d); if(s.empty())&#123; s.insert(d); &#125;else&#123; set&lt;int&gt;::iterator it; it = s.lower_bound(d); if(it==s.end())&#123; s.insert(d); &#125;else&#123; s.erase(it); s.insert(d); &#125; &#125; &#125; printf("%d",s.size()); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[771. 宝石与石头]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。 J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。 示例 1:12输入: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;输出: 3 示例 2:12输入: J = &quot;z&quot;, S = &quot;ZZ&quot;输出: 0 注意: S 和 J 最多含有50个字母。 J 中的字符不重复。 12345678910111213141516class Solution &#123;public: int numJewelsInStones(string J, string S) &#123; int hash[256] = &#123;0&#125;; int count = 0; for(int i=0;i&lt;J.size();i++)&#123; hash[J[i]] = 1; &#125; for(int j = 0;j&lt;S.size();j++)&#123; if(hash[S[j]])&#123; count++; &#125; &#125; return count; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[728. 自除数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F728-%E8%87%AA%E9%99%A4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[自除数 是指可以被它包含的每一位数除尽的数。 例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。 还有，自除数不允许包含 0 。 给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。 示例 1：123输入：上边界left = 1, 下边界right = 22输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] 注意： 每个输入参数的边界满足 1 &lt;= left &lt;= right &lt;= 10000。 题目要求求出某个区间内的自除数，直接遍历整个区间就可以，并根据定义写一个判断是否为自除数的函数。123456789101112131415161718192021class Solution &#123;public: vector&lt;int&gt; selfDividingNumbers(int left, int right) &#123; vector&lt;int&gt; res; for(int n = left;n &lt;= right;n++)&#123; if(selfDividing(n))&#123; res.push_back(n); &#125; &#125; return res; &#125; public: bool selfDividing(int n)&#123; string s = to_string(n); for(int i=0;i&lt;s.size();i++)&#123; if(s[i]=='0'||(n%(s[i]-'0')&gt;0))&#123; return false; &#125; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[852. 山脉数组的峰顶索引]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F852-%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[我们把符合下列属性的数组 A 称作山脉： A.length &gt;= 3存在 0 &lt; i &lt; A.length - 1 使得A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]给定一个确定为山脉的数组，返回任何满足 A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1] 的 i 的值。 示例 1：12输入：[0,1,0]输出：1 示例 2：12输入：[0,2,1,0]输出：1 提示： 3 &lt;= A.length &lt;= 100000 &lt;= A[i] &lt;= 10^6A 是如上定义的山脉 1234567891011121314class Solution &#123;public: int peakIndexInMountainArray(vector&lt;int&gt;&amp; A) &#123; int temp = 0; for(int i = 0;i&lt;A.size();i++)&#123; if(A[i]&gt;A[i+1])&#123; temp = i; break; &#125; &#125; return temp; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-021 点赞狂魔（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-021-%E7%82%B9%E8%B5%9E%E7%8B%82%E9%AD%94%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-021 点赞狂魔（25 分）微博上有个“点赞”功能，你可以为你喜欢的博文点个赞表示支持。每篇博文都有一些刻画其特性的标签，而你点赞的博文的类型，也间接刻画了你的特性。然而有这么一种人，他们会通过给自己看到的一切内容点赞来狂刷存在感，这种人就被称为“点赞狂魔”。他们点赞的标签非常分散，无法体现出明显的特性。本题就要求你写个程序，通过统计每个人点赞的不同标签的数量，找出前3名点赞狂魔。 输入格式： 输入在第一行给出一个正整数N（&lt;=100），是待统计的用户数。随后N行，每行列出一位用户的点赞标签。格式为“Name K F~1~ … F~K~”，其中 Name 是不超过8个英文小写字母的非空用户名，1&lt;=K&lt;=1000，F~i~（i=1, …, K）是特性标签的编号，我们将所有特性标签从1到10^7^编号。数字间以空格分隔。 输出格式： 统计每个人点赞的不同标签的数量，找出数量最大的前3名，在一行中顺序输出他们的用户名,其间以1个空格分隔,且行末不得有多余空格。如果有并列，则输出标签出现次数平均值最小的那个，题目保证这样的用户没有并列。若不足3人，则用“-”补齐缺失，例如“mike jenny -”就表示只有2人。 输入样例：1234565bob 11 101 102 103 104 105 106 107 108 108 107 107peter 8 1 2 3 4 3 2 5 1chris 12 1 2 3 4 5 6 7 8 9 1 2 3john 10 8 7 6 5 4 3 2 1 7 5jack 9 6 7 8 9 10 11 12 13 14 输出样例： jack chris john分析：创建一个关于点赞人的结构体，然后对其根据不同标签数和出现次数平均值最小进行排序，不同标签数可以用set计算，出现次数平均最小即每次k最小。排序后根据是否满足3人分类输出。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;set&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;using namespace std;struct people&#123; char name[11]; int cnt,num;&#125;a[1111];bool cmp(people a,people b)&#123; if(a.cnt!=b.cnt)&#123; return a.cnt&gt;b.cnt; &#125; return a.num&lt;b.num;&#125;int main()&#123; int k,n,x; scanf("%d",&amp;n); set&lt;int&gt; s; for(int i=0;i&lt;n;i++)&#123; scanf("%s",a[i].name); scanf("%d",&amp;k); s.clear(); for(int j=0;j&lt;k;j++)&#123; scanf("%d",&amp;x); s.insert(x); &#125; a[i].cnt = s.size(); a[i].num = k; &#125; sort(a,a+n,cmp); bool flag = false; for(int i=0;i&lt;min(n,3);i++)&#123; if(flag)&#123; printf(" "); &#125; flag = true; printf("%s",a[i].name); &#125; for(int i=n;i&lt;3;i++)&#123; if(flag)&#123; printf(" "); &#125; printf("-"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[657. 判断路线成圈]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F657-%E5%88%A4%E6%96%AD%E8%B7%AF%E7%BA%BF%E6%88%90%E5%9C%88%2F</url>
    <content type="text"><![CDATA[初始位置 (0, 0) 处有一个机器人。给出它的一系列动作，判断这个机器人的移动路线是否形成一个圆圈，换言之就是判断它是否会移回到原来的位置。 移动顺序由一个字符串表示。每一个动作都是由一个字符来表示的。机器人有效的动作有 R（右），L（左），U（上）和 D（下）。输出应为 true 或 false，表示机器人移动路线是否成圈。 示例 1:12输入: &quot;UD&quot;输出: true 示例 2:12输入: &quot;LL&quot;输出: false 分析：要求能回到原位置，那么左右 和上下所移动的步数必须对应相等。12345678910111213141516171819202122class Solution &#123;public: bool judgeCircle(string moves) &#123; int L=0,R=0,U=0,D=0; for(int i=0;i&lt;moves.size();i++)&#123; if(moves[i]=='L')&#123; L++; &#125;else if(moves[i]=='R')&#123; R++; &#125;else if(moves[i]=='U')&#123; U++; &#125;else if(moves[i]=='D')&#123; D++; &#125; &#125; if(L==R&amp;&amp;U==D)&#123; return true; &#125;else&#123; return false; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[633. 平方数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F633-%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a2 + b2 = c。 示例1:123输入: 5输出: True解释: 1 * 1 + 2 * 2 = 5 示例2:12输入: 3输出: False 123456789101112class Solution &#123;public: bool judgeSquareSum(int c) &#123; for(long i=0;i*i&lt;=c;i++)&#123; double x = sqrt(c-i*i); if(x==int(x))&#123; return true; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[628. 三个数的最大乘积]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F628-%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF%2F</url>
    <content type="text"><![CDATA[给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。 示例 1:12输入: [1,2,3]输出: 6 示例 2:12输入: [1,2,3,4]输出: 24 注意: 给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。 分析：主要就是考虑负数的情况，第一种：给定的数全是负数，第二种：负数和正数都有第三种：全是正数首先对数组排序，答案不外乎是后三个数相乘或者前两个数乘以最后一个数，两种1234567891011121314class Solution &#123;public: int maximumProduct(vector&lt;int&gt;&amp; nums) &#123; sort(nums.begin(),nums.end()); int n = nums.size(); int a = nums[n-1]*nums[n-2]*nums[n-3]; int b = nums[0]*nums[1]*nums[n-1]; if(a&gt;b||nums[n-1]&lt;0)&#123; return a; &#125;else&#123; return b; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[575. 分糖果]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F575-%E5%88%86%E7%B3%96%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。 示例 1:12输入: candies = [1,1,2,2,3,3]输出: 3 解析: 一共有三种种类的糖果，每一种都有两个。 最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。示例 2 :12输入: candies = [1,1,2,3]输出: 2 解析: 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。注意: 数组的长度为[2, 10,000]，并且确定为偶数。数组中数字的大小在范围[-100,000, 100,000]内。 分析：题目给定偶数n个种类不确定的糖果，要求平均分给弟弟和妹妹，并且妹妹分得的糖果种类要求尽可能多。首先因为给定的是偶数个，所以两人分得的糖果数必然相等，都为n/2,我们只需考虑原先糖果总的种类数，显然如果总的种类大于等于n/2,那么妹妹最大种类便是n/2，否则妹妹的最大种类数就是原先糖果的最大种类总数。而获取原先糖果的最大种类，利用set的去重就行了。 12345678910111213141516class Solution &#123;public: int distributeCandies(vector&lt;int&gt;&amp; candies) &#123; set&lt;int&gt; sum; int n = candies.size(); for(int i=0;i&lt;n;i++)&#123; sum.insert(candies[i]); &#125; int m = sum.size(); if(m&gt;=n/2)&#123; return n/2; &#125;else&#123; return m; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《追随》]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E3%80%8A%E8%BF%BD%E9%9A%8F%E3%80%8B%2F</url>
    <content type="text"><![CDATA[我之前一直没有写影评的习惯，看完电影，好就是好，烂就是烂，或喜、或悲、或震撼、或沉思，总之看完也就过去了，也不敢妄加品论，以免误导他人。但最近慢慢开始养成了写观后感的习惯，针对自己喜欢的，格调比较高的，或多或少结合自己的理解想写点感受。包括阅读也是，读书笔记是我向来忽略的一点，但这其实相当重要，倘若你想加深理解的话。 我平时看电影，很少会关注导演的信息，但这次确实不得不提一下这部《追随》的导演－－克里斯托弗·诺兰。网上一搜，才发现他的电影我都已经看过不下１０部，其中有很多都是被我奉为经典的作品。 《追随》1996年，诺兰拍了首部故事片《跟踪》。电影描述了一位作家逐渐成为一个跟踪癖的故事。电影完全不按事件发生顺序呈现，观众不得不随主角一起拼接情节碎片以了解当时究竟发生了什么。 《记忆碎片》2000年电影《记忆碎片》票房仍属上乘，并被称为邪典之作，获金球奖和奥斯卡奖的最佳编剧奖提名。 《蝙蝠侠》三部曲 《致命魔术》 2006年10月20日发行的《致命魔术》改编自克里斯托弗·普雷斯特（Christopher Priest）的同名小说，是关于19世纪两个互为对手的魔术师的故事。 《盗梦空间》一部科幻悬疑片，片中梦中梦的剧情着实很吸引人。 《星际穿越》 2014年的《星际穿越》讲述一队探险者根据当代重力及天体权威物理学家基普·索恩的理论，突破科学极限、穿越“虫洞”来寻找适合人类生存的星球的冒险故事。 《敦刻尔克》故事改编自著名的二战军事事件“敦克尔克大撤退”。二战初期，40万的英法盟军被敌军围困于敦刻尔克的海滩之上，面对敌军步步逼近的绝境，他们不得不为自己的命运背水一战，才有可能活着回家。 以上列举了几部我看过的诺兰的作品，基本符合时间线，看过的人想必也就可以想象诺兰一步步的封神之路是怎么走过来的。 《追随》是诺兰的导演处女作。由诺兰自编自导，杰里米·西奥伯德、亚历克斯·霍、露西·拉塞尔等人主演的惊悚片。 剧情梗概－－女主角是一个黑帮老大的情妇 。此黑帮老大某天在情妇家中杀掉了一个人，情妇家中的地毯上留下了血迹，情妇把地毯藏了起来，并且以此勒索黑帮老大。这是整个事情的起因。老大无法忍受情妇的勒索，派出假名叫柯布的杀手去解决这个麻烦，并且要求了杀人手法和地点（用锤子，在情妇家）。 “在很长时间里，我都是一个人生活。这种生活变得越来越孤单，并且乏味。一整天无事可做，就那么呆着。从那时起，我开始尾随别人”，影片以此开头，引入了男主，一个无业游民，一个幻想成为作家的作家，一个孤独的男人。诺兰着眼于剧情的连环与绕圈，他希望给观众一种走入迷宫的感觉，他曾说：“我决定以这种方式来组织我的故事，将重点放在观众对每一个新的场景不可能有完全的理解上，就像它是第一次被人们看到一样。”要做到这一点，影片的布局就不能简单处理，不能让观众在几分钟内看破剧情，然后感叹一波无趣。 说实话，我有点难以理解比尔的做法，或许是因为我没亲眼见过生活中真正由于这种原因尾随他人的人吧。孤独人我见过不少，迷茫的人，事业不顺的人身边一抓一大把，但是像比尔这样的，据他自己说尾随他人是为了寻找发现写作的素材，多么冠冕堂皇的一个理由，事实真的如此吗，对于他的追随动机也是我很好奇的一点。试想一下，一个极端孤独的年轻人，一个缺乏社交的可怜虫，心理扭曲而萌生了尾随陌生人的想法，甚至为自己的尾随做出了规范，要求随机性等等，这里其实涉及到了人性的方面，心理学的方面，我相信他和有些孤独的人不同，他是否是自己内心主动排斥社交？还是真正的社交无能？同时他又有着极强的好奇心，好奇他人的生活。他的行为毫无以为已然涉及到了犯罪，尽管他并无恶意，并无功利之心。 在剧情方面，电影围绕骗中骗，连环展开。之前提到了比尔，一个心理怪异的尾随狂，原本一切都没什么异常，他继续他的尾随就行了，但有一天，他对柯布发生了兴趣，也就是从那一刻起他已然落入陷阱，柯布是一位反侦察高手，一番观察与交谈，便已将比尔当做自己的棋子，为自己的任务开路。两人仿佛志同道合，开始一同作案，一起入室行窃，目的却不是钱，而是“人”，同时柯布开始传授比尔作案技巧，让比尔一步步模仿自己，然后成为自己的替罪羊。行窃过程中柯布有些偷窃心得倒是挺有意思的。第一个，盒子，他发现很多屋主都会有一个小盒子，里面不会放什么值钱的物品，但往往都是些私人物品，但却能折射出关于主人的真实世界。盒子一般是个鞋盒，放着自己私密的小东西。偷盗的哲学在于，丢了东西，才意识到拥有过。还有一个，当比尔被值钱行窃过的主人对视时，慌张不已的样子，柯布却来了句“虽然你行的是鸡鸣狗盗之事，但也不用摆出一副鸡鸣狗盗之相”．．． 慢慢慢慢，比尔在柯布的诱导下开始接触了金发女郎，当然也对她的房间行窃过。金发女郎是一位黑道大佬的情人，但比尔却一步步爱上了他，因为爱上，导致最后完全深陷泥潭而无法逃脱。他不知道，金发女郎和柯布其实暗中早已认识，沟通，此二人希望设局，找一位替罪羊，为自己脱罪，而这只可怜的替罪羊自然就是比尔，没有比他更好的选择了。而金发女郎自以为自己也是设局者，却不知其实自己也是一只可怜的羔羊。也是从一开始，金发女郎便已经是柯布的目标了，只是未能察觉。诺兰就是围绕这样一个剧情展开环式叙述，加深悬疑层次，用故事吸引了一大波影迷。只是这样的一个连环计在我看来似乎还是牵强了点，在逻辑上的严密感不是足够的强大，我只能默认是剧情需要了。当然了，对内容与真实的要求我想应该也不是诺兰最看重的，诺兰介绍自己时也曾提到“我不仅是一名导演，更是一个拥有奇想的人”。想来也是，如若没有一个奇思妙想，脑洞打开的头脑，怎么能编出令人赞叹不已的一部部神作。]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[557. 反转字符串中的单词 III]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D-III%2F</url>
    <content type="text"><![CDATA[给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。 示例 1:123输入: &quot;Let&apos;s take LeetCode contest&quot;输出: &quot;s&apos;teL ekat edoCteeL tsetnoc&quot;注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。 1234567891011121314class Solution &#123;public: string reverseWords(string s) &#123; vector&lt;string&gt; res; int index = 0; for (int i = 0; i &lt;= s.length(); ++i) &#123; if (i == s.length() || s[i] == ' ') &#123; reverse(s.begin() + index, s.begin() + i); index = i + 1; &#125; &#125; return s; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[551. 学生出勤纪录 I]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F551-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E7%BA%AA%E5%BD%95-I%2F</url>
    <content type="text"><![CDATA[给定一个字符串来代表一个学生的出勤纪录，这个纪录仅包含以下三个字符： ‘A’ : Absent，缺勤‘L’ : Late，迟到‘P’ : Present，到场如果一个学生的出勤纪录中不超过一个’A’(缺勤)并且不超过两个连续的’L’(迟到),那么这个学生会被奖赏。 你需要根据这个学生的出勤纪录判断他是否会被奖赏。 示例 1:12输入: &quot;PPALLP&quot;输出: True 示例 2:12输入: &quot;PPALLL&quot;输出: False 12345678910111213141516171819class Solution &#123;public: bool checkRecord(string s) &#123; int num1 = 0,num2 = 0; for(int i=0;i&lt;s.size();i++)&#123; if(s[i]=='A')&#123; num1++; &#125; if(s[i]=='L'&amp;&amp;s[i+1]=='L'&amp;&amp;s[i+2]=='L')&#123; num2++; &#125; &#125; if(num1&lt;=1&amp;&amp;num2==0)&#123; return true; &#125;else&#123; return false; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[485. 最大连续1的个数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个二进制数组， 计算其中最大连续1的个数。 示例 1:123输入: [1,1,0,1,1,1]输出: 3解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3. 注意： 输入的数组只包含 0 和1。输入数组的长度是正整数，且不超过 10,000。 12345678910111213141516171819class Solution &#123;public: int findMaxConsecutiveOnes(vector&lt;int&gt;&amp; nums) &#123; int maxm = 0,cnt = 0; for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]==1)&#123; cnt++; &#125;else&#123; if(cnt&gt;maxm)&#123; maxm = cnt; &#125; cnt = 0; &#125; &#125; maxm = max(maxm,cnt); return maxm; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[448. 找到所有数组中消失的数字]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F448-%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[给定一个范围在 1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。 找到所有在 [1, n] 范围之间没有出现在数组中的数字。 您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。 示例:12345输入:[4,3,2,7,8,2,3,1]输出:[5,6] 我的思路：利用set的唯一性和自动排序，将原数组中的元素插入set，然后从1到n进行遍历，找到不存在的数字123456789101112131415161718192021222324class Solution &#123;public: vector&lt;int&gt; findDisappearedNumbers(vector&lt;int&gt;&amp; nums) &#123; vector&lt;int&gt; res; set&lt;int&gt; nums2; for(int i=0;i&lt;nums.size();i++)&#123; nums2.insert(nums[i]); &#125; set&lt;int&gt;::iterator it=nums2.begin(); for(int i=1;i&lt;=nums.size();i++)&#123; if(i!=*it)&#123; res.push_back(i); continue; &#125; if(it==nums2.end())&#123; break; &#125; it++; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[434. 字符串中的单词数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F434-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。 请注意，你可以假定字符串里不包括任何不可打印的字符。 示例:12输入: &quot;Hello, my name is John&quot;输出: 5 1234567891011121314class Solution &#123;public: int countSegments(string s) &#123; int res = 0, n = s.size(); for(int i=0;i&lt;n;i++)&#123; if(s[i]==' ')&#123; continue; &#125; res++; while(i&lt;n&amp;&amp;s[i]!=' ')&#123;i++;&#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[415. 字符串相加]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。 注意： num1 和num2 的长度都小于 5100.num1 和num2 都只包含数字 0-9.num1 和num2 都不包含任何前导零。你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。 字符串相加，类似二进制链表的相加，一位一位计算，然后逐为求和求进位，根据进位判断是否需要补高位、12345678910111213141516171819202122232425262728class Solution &#123;public: string addStrings(string num1, string num2) &#123; string res = ""; int m = num1.size(),n = num2.size(),i=m-1,j = n-1,carry=0; while(i&gt;=0||j&gt;=0)&#123; int a , b; if(i&gt;=0)&#123; a = num1[i--]-'0'; &#125;else&#123; a = 0; &#125; if(j&gt;=0)&#123; b = num2[j--]-'0'; &#125;else&#123; b = 0; &#125; int sum = a+b+carry; res.insert(res.begin(),sum%10+'0'); carry = sum/10; &#125; if(carry)&#123; return "1"+res; &#125;else&#123; return res; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[400. 第N个数字]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F400-%E7%AC%ACN%E4%B8%AA%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[在无限的整数序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, …中找到第 n 个数字。 注意:n 是正数且在32为整形范围内 ( n &lt; 231)。 示例 1:12345输入:3输出:3 示例 2:12345输入:11输出:0 说明:第11个数字在序列 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, … 里是0，它是10的一部分。 将整数序列划分为下列区间：1234567891 1-92 10-993 100-9994 1000-99995 10000-999996 100000-9999997 1000000-99999998 10000000-999999999 100000000-99999999 1234567891011121314151617class Solution &#123;public: int findNthDigit(int n) &#123; int len = 1, base = 1; while(n&gt;9L*base*len)&#123; n -= 9*base*len; len++; base *= 10; &#125; int curNum = (n-1)/len + base, digit = 0; for(int i=(n-1)%len;i&lt;len;++i)&#123; digit = curNum%10; curNum /= 10; &#125; return digit; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[405. 数字转换为十六进制数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F405-%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。 注意: 十六进制中所有字母(a-f)都必须是小写。十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符’0’来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。给定的数确保在32位有符号整数范围内。不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。示例 1：12345输入:26输出:&quot;1a&quot; 示例 2：12345输入:-1输出:&quot;ffffffff&quot; 要将一个十进制数转换为十六进制数，不管其是正数还是负数，都只需要将其二进制表示每四位分成一个单元，将其取出后计算这四位二进制数代表的十进制数，与0~f之间的数字做一个映射即可。要把每四位取出也很简单，与0xf进行AND运算即可。在C++中，左移是逻辑移位，也就是说在数字后面补0，右移运算符是算术移位，也就是在左侧补符号位(正数补0，负数补112345678910111213141516class Solution &#123;public: string toHex(int num) &#123; string res; int low=0,high=0; if(num==0)&#123; return "0"; &#125; char map[16]=&#123;'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'&#125;; while(num&amp;&amp;res.size()&lt;8)&#123; res=map[(num&amp;0xf)]+res; num=num&gt;&gt;4; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[404. 左叶子之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F404-%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[计算给定二叉树的所有左叶子之和。 示例：12345 3 / \9 20 / \ 15 7 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24 递归写法：12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int sumOfLeftLeaves(TreeNode* root) &#123; int sum = 0; if(root==NULL)&#123; return 0; &#125; if(root-&gt;left!=NULL&amp;&amp;root-&gt;left-&gt;left==NULL&amp;&amp;root-&gt;left-&gt;right==NULL)&#123; sum += root-&gt;left-&gt;val; &#125;else&#123; sum += sumOfLeftLeaves(root-&gt;left); &#125; sum += sumOfLeftLeaves(root-&gt;right); return sum; &#125;&#125;; 迭代写法：12345678910111213141516171819202122232425262728293031323334353637/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int sumOfLeftLeaves(TreeNode* root) &#123; int sum = 0; if(root==NULL)&#123; return 0; &#125; queue&lt;TreeNode*&gt; q; q.push(root); while(!q.empty())&#123; TreeNode* temp = q.front(); q.pop(); if(temp==NULL)&#123; break; &#125; if(temp-&gt;left)&#123; q.push(temp-&gt;left); if(temp-&gt;left-&gt;left==NULL&amp;&amp;temp-&gt;left-&gt;right==NULL)&#123; sum += temp-&gt;left-&gt;val; &#125; &#125; if(temp-&gt;right)&#123; q.push(temp-&gt;right); &#125; &#125; return sum; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[387. 字符串中的第一个唯一字符]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 案例:12345s = &quot;leetcode&quot;返回 0.s = &quot;loveleetcode&quot;,返回 2. 注意事项：您可以假定该字符串只包含小写字母。 123456789101112131415class Solution &#123;public: int firstUniqChar(string s) &#123; int a[300]=&#123;0&#125;; for(int i=0;i&lt;s.length();i++)&#123; a[s[i]]++; &#125; for(int i=0;i&lt;s.length();i++)&#123; if(a[s[i]]==1)&#123; return i; &#125; &#125; return -1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[303. 区域和检索 - 数组不可变]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F303-%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E6%95%B0%E7%BB%84%E4%B8%8D%E5%8F%AF%E5%8F%98%2F</url>
    <content type="text"><![CDATA[给定一个整数数组 nums，求出数组从索引 i 到 j (i ≤ j) 范围内元素的总和，包含 i, j 两点。 示例：12345给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()sumRange(0, 2) -&gt; 1sumRange(2, 5) -&gt; -1sumRange(0, 5) -&gt; -3 说明: 你可以假设数组不可变。会多次调用 sumRange 方法。 新建一个dp数组，用来保存相应前个数的和 123456789101112131415161718192021class NumArray &#123;public: NumArray(vector&lt;int&gt; nums) &#123; dp.resize(nums.size()+1,0); for(int i=1;i&lt;=nums.size();++i)&#123; dp[i] = dp[i-1]+nums[i-1]; &#125; &#125; int sumRange(int i, int j) &#123; return dp[j+1]-dp[i]; &#125; private: vector&lt;int&gt; dp;&#125;;/** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(i,j); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[290. 单词模式]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F290-%E5%8D%95%E8%AF%8D%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[给定一种 pattern(模式) 和一个字符串 str ，判断 str 是否遵循相同的模式。 这里的遵循指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应模式。 示例1:12输入: pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot;输出: true 示例 2:12输入:pattern = &quot;abba&quot;, str = &quot;dog cat cat fish&quot;输出: false 示例 3:12输入: pattern = &quot;aaaa&quot;, str = &quot;dog cat cat dog&quot;输出: false 示例 4:12输入: pattern = &quot;abba&quot;, str = &quot;dog dog dog dog&quot;输出: false 说明:你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。12345678910111213141516171819class Solution &#123;public: bool wordPattern(string pattern, string str) &#123; unordered_map&lt;char,int&gt; m1; unordered_map&lt;string,int&gt; m2; istringstream in(str); int i = 0; for(string word;in&gt;&gt;word;++i)&#123; if(m1.find(pattern[i])!=m1.end()||m2.find(word)!=m2.end())&#123; if(m1[pattern[i]]!=m2[word])&#123; return false; &#125; &#125;else&#123; m1[pattern[i]] = m2[word] = i+1; &#125; &#125; return i==pattern.size(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[278. 第一个错误的版本]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。 你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。 示例:12345给定 n = 5，并且 version = 4 是第一个错误的版本。调用 isBadVersion(3) -&gt; false调用 isBadVersion(5) -&gt; true调用 isBadVersion(4) -&gt; true 所以，4 是第一个错误的版本。 1234567891011121314151617181920212223// Forward declaration of isBadVersion API.bool isBadVersion(int version);class Solution &#123;public: int firstBadVersion(int n) &#123; if(n==1)&#123; return 1; &#125; int high = n; int low = 1; while(low&lt;high)&#123; int mid = low+(high-low)/2; int temp = isBadVersion(mid); if(temp)&#123; high = mid; &#125;else&#123; low = mid+1; &#125; &#125; return low; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《无题》北岛]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E3%80%8A%E6%97%A0%E9%A2%98%E3%80%8B%E5%8C%97%E5%B2%9B%2F</url>
    <content type="text"><![CDATA[对于世界 我永远是个陌生人 我不懂它的言语 他不懂我的沉默 我们交换的 只是一点轻蔑 如同相逢在镜子里 对于自己 我永远是个陌生人 我畏惧黑暗 却用身体挡住了 那唯一的灯 我的影子是我的情人 心是仇敌 北岛的诗集里面，这首是我蛮喜欢的一首。 我爱诗愛词，爱李白的浪漫豪放，爱杜甫的忧国忧民，我爱古典诗，我也爱现代诗。 我遗憾，我遗憾自己的无才无能，遗憾自己不能像诗人般脱口成诗，吟唱古今。 “对于世界，我永远是个陌生人”，难道不是吗，地球没了我照样转，世界没了我，并不会就此停滞。我只是个路人，和所有人一样，来这世上走一遭，来看看这世界，尽管世界不会记得我来过。 “我们交换的，只是一点轻蔑，如同相逢在镜子里”我无法容忍这狭隘、势利的世界，世界眼中又何曾有过我，互相的轻蔑吧。 “我畏惧黑暗，却用身体挡住了，那唯一的灯”我的矛盾，我的孤独，哎，我不愿与这世界妥协，不愿与自己妥协，让我独自挣扎吧，让我独自探索吧。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[414. 第三大的数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F414-%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。 示例 1:123输入: [3, 2, 1]输出: 1 解释: 第三大的数是 1.示例 2:123输入: [1, 2]输出: 2 解释: 第三大的数不存在, 所以返回最大的数 2 .示例 3:123输入: [2, 2, 3, 1]输出: 1 解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。存在两个值为2的数，它们都排第二。 返回第三大且又是唯一出现的数，这里涉及到了排序和去重，所以想到用set来做，因为set是自动去重并升序的容器，但有一点，访问set集合里的元素只能通过迭代器的形式进行访问，而不能通过下标。123456789101112131415161718class Solution &#123;public: int thirdMax(vector&lt;int&gt;&amp; nums) &#123; set&lt;int&gt; res; for(int i=0;i&lt;nums.size();i++)&#123; res.insert(nums[i]); int len = res.size(); if(len&gt;3)&#123; res.erase(res.begin()); &#125; &#125; if(res.size()==3)&#123; return *res.begin(); &#125;else&#123; return *res.rbegin(); &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[389. 找不同]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F389-%E6%89%BE%E4%B8%8D%E5%90%8C%2F</url>
    <content type="text"><![CDATA[给定两个字符串 s 和 t，它们只包含小写字母。 字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。 请找出在 t 中被添加的字母。 示例:123456输入：s = &quot;abcd&quot;t = &quot;abcde&quot;输出：e 解释：‘e’ 是那个被添加的字母。 分析：可以求出两个字符串的ASCII总和的差值，而这个差值就对应着被添加的字母的ASCII数值。 1234567891011121314class Solution &#123;public: char findTheDifference(string s, string t) &#123; int sum1 = 0,sum2 = 0,dif = 0; for(int i=0;i&lt;s.size();i++)&#123; sum1 += s[i]; &#125; for(int i=0;i&lt;t.size();i++)&#123; sum2 += t[i]; &#125; dif = sum2-sum1; return (char)dif; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[374. 猜数字大小]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F374-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[我们正在玩一个猜数字游戏。 游戏规则如下：我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。每次你猜错了，我会告诉你这个数字是大了还是小了。你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1，1 或 0）： -1 : 我的数字比较小 1 : 我的数字比较大 0 : 恭喜！你猜对了！示例: n = 10, 我选择 6. 返回 6. 1234567891011121314151617181920212223242526// Forward declaration of guess API.// @param num, your guess// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0int guess(int num);class Solution &#123;public: int guessNumber(int n) &#123; int t = guess(n); if(t==0)&#123; return n; &#125; int left = 1,right = n; while(left&lt;right)&#123; int mid = left + (right-left)/2; int x = guess(mid); if(x==1)&#123; left = mid; &#125;else if(x==-1)&#123; right = mid; &#125;else if(x==0)&#123; return mid; &#125; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[371. 两整数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F371-%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[不使用运算符 + 和-，计算两整数a 、b之和。 示例：若 a = 1 ，b = 2，返回 3。123456789101112131415161718192021222324252627282930class Solution &#123;public: int getSum(int a, int b) &#123; int sum = 0 ; int carry = 0; for(int i = 0;i&lt; 32 ;i++)&#123; int a1 = a &amp; 1; int b1 = b &amp; 1; int val = 0 ; if(a1 == 0 &amp;&amp; b1 == 0 &amp;&amp; carry == 0)&#123; val = 0; carry = 0; &#125;else if(a1 == 1 &amp;&amp; b1 == 1 &amp;&amp; carry == 1)&#123; val = 1; carry = 1; &#125;else if(a1==0 &amp;&amp; b1 ==0 || a1 ==0 &amp;&amp; carry ==0 || b1 ==0 &amp;&amp; carry ==0)&#123; val = 1; carry = 0; &#125;else&#123; val = 0; carry = 1; &#125; val = val &lt;&lt; i; sum = sum | val; a = a &gt;&gt; 1; b = b &gt;&gt; 1; &#125; return sum; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[345. 反转字符串中的元音字母]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F345-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%2F</url>
    <content type="text"><![CDATA[编写一个函数，以字符串作为输入，反转该字符串中的元音字母。12示例 1：给定 s = &quot;hello&quot;, 返回 &quot;holle&quot;. 示例 2：1给定 s = &quot;leetcode&quot;, 返回 &quot;leotcede&quot;. 注意:元音字母不包括 “y”. 思路分析：如果考虑一个更简单的问题：如何反转一个字符串，相信大家都能马上想到算法，因为我们知道每个位置的字符在反转后会出现在什么位置。方法一：翻转ID本题中只需要反转元音字母，同样的，我们希望知道每个元音字母在反转后应该出现在什么位置。因此我们用一个position数组记录元音字母的位置，然后进行反转即可。算法复杂度为O(N)，N是字符串长度。 12345678910111213141516171819202122232425262728293031class Solution &#123;public: string reverseVowels(string s) &#123; vector&lt;int&gt; pos(s.size()); set&lt;char&gt; vowel; int cnt = 0; vowel.insert('a'); vowel.insert('e'); vowel.insert('i'); vowel.insert('o'); vowel.insert('u'); vowel.insert('A'); vowel.insert('E'); vowel.insert('I'); vowel.insert('O'); vowel.insert('U'); string ans = ""; for(int i=0;i&lt;s.size();i++)&#123; if(vowel.count(s[i]))&#123; pos[cnt] = i; cnt++; &#125; ans += s[i]; &#125; for(int i=0;i&lt;cnt;i++)&#123; ans[pos[i]] = s[pos[cnt-i-1]]; &#125; return ans; &#125;&#125;; 方法二： 双指针法 本题还有另外一种思路，那就是two pointer。一个指针从前往后扫描，一个指针从后往前扫描，遇到元音字母是进行交换，直到两个指针相遇，算法终止。算法复杂度同样是O(N)。 1234567891011121314151617181920212223242526class Solution &#123;public: string reverseVowels(string s) &#123; int left = 0, right= s.size() - 1; while (left &lt; right) &#123; if (isVowel(s[left]) &amp;&amp; isVowel(s[right])) &#123; swap(s[left++], s[right--]); &#125; else if (isVowel(s[left])) &#123; --right; &#125; else &#123; ++left; &#125; &#125; return s; &#125; bool isVowel(char c) &#123; return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[350. 两个数组的交集 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F350-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-II%2F</url>
    <content type="text"><![CDATA[给定两个数组，写一个方法来计算它们的交集。 例如:给定 nums1 = [1, 2, 2, 1], nums2 = [2, 2], 返回 [2, 2]. 注意： 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 我们可以不考虑输出结果的顺序。跟进: 如果给定的数组已经排好序呢？你将如何优化你的算法？如果 nums1 的大小比 nums2 小很多，哪种方法更优？如果nums2的元素存储在磁盘上，内存是有限的，你不能一次加载所有的元素到内存中，你该怎么办？ 1234567891011121314151617181920212223class Solution &#123;public: vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; vector&lt;int&gt; res; sort(nums1.begin(),nums1.end()); sort(nums2.begin(),nums2.end()); int len1 = nums1.size(); int len2 = nums2.size(); int i = 0,j = 0; while(i&lt;len1&amp;&amp;j&lt;len2)&#123; if(nums1[i]&lt;nums2[j])&#123; i++; &#125;else if(nums1[i]&gt;nums2[j])&#123; j++; &#125;else&#123; res.push_back(nums1[i]); i++; j++; &#125; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[349. 两个数组的交集]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86%2F</url>
    <content type="text"><![CDATA[给定两个数组，写一个函数来计算它们的交集。 例子:1给定 num1= [1, 2, 2, 1], nums2 = [2, 2], 返回 [2]. 提示: 每个在结果中的元素必定是唯一的。我们可以不考虑输出结果的顺序。123456789101112131415class Solution &#123;public: vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; set&lt;int&gt; s,res; for(int i=0;i&lt;nums1.size();i++)&#123; s.insert(nums1[i]); &#125; for(int i=0;i&lt;nums2.size();i++)&#123; if(s.count(nums2[i]))&#123; res.insert(nums2[i]); &#125; &#125; return vector&lt;int&gt;(res.begin(),res.end()); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[367. 有效的完全平方数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F367-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。 注意：不要使用任何内置的库函数，如 sqrt。 示例 1：123输入： 16输出： True 示例 2：123输入： 14输出： False 法一：二分1234567891011121314151617class Solution &#123;public: bool isPerfectSquare(int num) &#123; long long left = 0,right = num; while(left&lt;=right)&#123; long long mid = left+(right-left)/2,t=mid*mid; if(t==num)&#123; return true; &#125;else if(t&lt;num)&#123; left = mid+1; &#125;else&#123; right = mid-1; &#125; &#125; return false; &#125;&#125;; 法二：任意完全平方数都可以表示成连续的奇数和1234567891011class Solution &#123;public: bool isPerfectSquare(int num) &#123; int i = 1; while(num&gt;0)&#123; num -= i; i += 2; &#125; return num == 0; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[342. 4的幂]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F342-4%E7%9A%84%E5%B9%82%2F</url>
    <content type="text"><![CDATA[给定一个整数 (32位有符整数型)，请写出一个函数来检验它是否是4的幂。 示例:当 num = 16 时 ，返回 true 。 当 num = 5时，返回 false。 问题进阶：你能不使用循环/递归来解决这个问题吗？ 循环写法：123456789101112131415class Solution &#123;public: bool isPowerOfFour(int num) &#123; if(num&lt;=0)&#123; return false; &#125; while(num&gt;1)&#123; if(num%4!=0)&#123; return false; &#125; num/=4; &#125; return true; &#125;&#125;; 递归写法：123456789101112class Solution &#123;public: bool isPowerOfFour(int num) &#123; if(num&lt;=0)&#123; return false; &#125; if(num==1)&#123; return true; &#125; return (num%4==0)&amp;&amp;isPowerOfFour(num/4); &#125;&#125;; 对数写法：1234567class Solution &#123;public: bool isPowerOfFour(int num) &#123; double result = log10(num)/log10(4); return (result==int(result))?true:false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[326. 3的幂]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F326-3%E7%9A%84%E5%B9%82%2F</url>
    <content type="text"><![CDATA[给定一个整数，写一个函数来判断它是否是 3 的幂次方。 示例 1:12输入: 27输出: true 示例 2:12输入: 0输出: false 示例 3:12输入: 9输出: true 示例 4:12输入: 45输出: false 进阶：你能不使用循环或者递归来完成本题吗？ 循环写法：123456789101112131415class Solution &#123;public: bool isPowerOfThree(int n) &#123; if(n&lt;=0)&#123; return false; &#125; while(n&gt;1)&#123; if(n%3!=0)&#123; return false; &#125; n/=3; &#125; return true; &#125;&#125;; 递归写法：123456789101112class Solution &#123;public: bool isPowerOfThree(int n) &#123; if(n&lt;=0)&#123; return false; &#125; if(n==1)&#123; return true; &#125; return (n%3==0)&amp;&amp;isPowerOfThree(n/3); &#125;&#125;; 可以采用取对数求解，如果一个数是3的幂，那么以3为底取对数结果必然是一个整数。1234567class Solution &#123;public: bool isPowerOfThree(int n) &#123; double result = log10(n)/log10(3); return (result==int(result))?true:false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[235. Lowest Common Ancestor of a Binary Search Tree]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree%2F</url>
    <content type="text"><![CDATA[Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]1234567 _______6______ / \ ___2__ ___8__/ \ / \0 _4 7 9 / \ 3 5 Example 1:123Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8Output: 6Explanation: The LCA of nodes 2 and 8 is 6. Example 2:1234Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4Output: 2Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Note: All of the nodes’ values will be unique.p and q are different and both values will exist in the BST. LCA问题，题目要求你求出给定结点的最近公共祖先。我们先来看下维基百科中关于LCA的定义：在图论和计算机科学中，最近公共祖先（英语：lowest common ancestor）是指在一个树或者有向无环图中同时拥有v和w作为后代的最深的节点。在这里，我们定义一个节点也是其自己的后代，因此如果v是w的后代，那么w就是v和w的最近公共祖先。 最近公共祖先是两个节点所有公共祖先中离根节点最远的，计算最近公共祖先和根节点的长度往往是有用的。比如为了计算树中两个节点v和w之间的距离，可以使用以下方法：分别计算由v到根节点和w到根节点的距离，两者之和减去最近公共祖先到根节点的距离的两倍即可得到v到w的距离。 我们只需要遍历二叉搜索树，如果结点的值比p和q都要大，那么LCA肯定在该结点的左边，反之，如果结点的值比p和q都要小，那么LCA肯定在该结点的右边，如果都不是，那么root其实就是LCA了。 递归写法：123456789101112131415161718192021222324/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123; if(root==NULL)&#123; return NULL; &#125; if(root-&gt;val&gt;p-&gt;val&amp;&amp;root-&gt;val&gt;q-&gt;val)&#123; return lowestCommonAncestor(root-&gt;left,p,q); &#125; if(root-&gt;val&lt;p-&gt;val&amp;&amp;root-&gt;val&lt;q-&gt;val)&#123; return lowestCommonAncestor(root-&gt;right,p,q); &#125; return root; &#125;&#125;; 迭代写法：12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123; while(root!=NULL)&#123; if(root-&gt;val&gt;p-&gt;val&amp;&amp;root-&gt;val&gt;q-&gt;val)&#123; root=root-&gt;left; &#125; else if(root-&gt;val&lt;p-&gt;val&amp;&amp;root-&gt;val&lt;q-&gt;val)&#123; root=root-&gt;right; &#125;else&#123; break; &#125; &#125; return root; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[234. Palindrome Linked List]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F234-Palindrome-Linked-List%2F</url>
    <content type="text"><![CDATA[Given a singly linked list, determine if it is a palindrome. Example 1:12Input: 1-&gt;2Output: false Example 2:1234Input: 1-&gt;2-&gt;2-&gt;1Output: trueFollow up:Could you do it in O(n) time and O(1) space? 题目要求就是给定一个单链表，让你判断是不是回文链表，最好时间复杂度控制在O(n),空间复杂度控制在O(1) 思路：第一步：两个指针都从头出发，快指针每次两步，慢指针每次一步，这样快指针的下一个或下下个为空时，慢指针就在链表正中间那个节点了（如果链表有偶数个节点则在靠近头那侧的）。第二步：从慢指针的下一个开始，把后面的链表都反转（Reverse Linked List），第三步：然后我们再从头和从尾同时向中间前进，就可以判断该链表是不是回文了。12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool isPalindrome(ListNode* head) &#123; if(head==NULL||head-&gt;next==NULL)&#123; return true; &#125; ListNode* mid = findMid(head); mid-&gt;next = reverse(mid-&gt;next); mid = mid-&gt;next; while(head!=NULL&amp;&amp;mid!=NULL)&#123; if(head-&gt;val!=mid-&gt;val)&#123; return false; &#125; head = head-&gt;next; mid = mid-&gt;next; &#125; return true; &#125; ListNode* findMid(ListNode* now)&#123; ListNode* slow = now; ListNode* fast = now-&gt;next; while(fast!=NULL&amp;&amp;fast-&gt;next!=NULL)&#123; slow = slow-&gt;next; fast = fast-&gt;next-&gt;next; &#125; return slow; &#125; ListNode* reverse(ListNode* now)&#123; ListNode* pre = NULL; while(now!=NULL)&#123; ListNode* temp = now-&gt;next; now-&gt;next = pre; pre = now; now = temp; &#125; return pre; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[257. Binary Tree Paths]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F257-Binary-Tree-Paths%2F</url>
    <content type="text"><![CDATA[Given a binary tree, return all root-to-leaf paths. Note: A leaf is a node with no children. Example: Input:1234567 1 / \2 3 \ 5Output: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;] Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3 题目要求：给定一棵二叉树，返回所有从根结点到叶结点的路径 分析：采用深度优先搜索，递归访问每个结点的子结点，如果遇到叶结点，则输出所记录的路径。然后返回上一层 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;string&gt; binaryTreePaths(TreeNode* root) &#123; vector&lt;string&gt; result; if(root==nullptr)&#123; return result; &#125; vector&lt;int&gt; path; dfs(root,path,result); return result; &#125;private: void dfs(TreeNode* node,vector&lt;int&gt;&amp; path,vector&lt;string&gt;&amp; result)&#123; if(node==nullptr)&#123; return ; &#125; path.push_back(node-&gt;val); if(node-&gt;left==nullptr&amp;&amp;node-&gt;right==nullptr)&#123; result.push_back(generatePath(path)); &#125;else&#123; if(node-&gt;left!=nullptr)&#123; dfs(node-&gt;left,path,result); path.pop_back(); &#125; if(node-&gt;right!=nullptr)&#123; dfs(node-&gt;right,path,result); path.pop_back(); &#125; &#125; &#125; string generatePath(vector&lt;int&gt; path)&#123; stringstream ss; int i; for(i=0;i&lt;path.size()-1;i++)&#123; ss&lt;&lt;path[i]&lt;&lt;"-&gt;"; &#125; ss&lt;&lt;path[i]; return ss.str(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1045 快速排序(25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1045-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1045 快速排序(25)（25 分）著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的N个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？ 例如给定N = 5, 排列是1、3、2、4、5。则： 1的左边没有元素，右边的元素都比它大，所以它可能是主元；\ 尽管3的左边元素都比它小，但是它右边的2它小，所以它不能是主元；\ 尽管2的右边元素都比它大，但其左边的3比它大，所以它不能是主元；\ 类似原因，4和5都可能是主元。 因此，有3个元素可能是主元。 输入格式： 输入在第1行中给出一个正整数N（&lt;= 10^5^）； 第2行是空格分隔的N个不同的正整数，每个数不超过10^9^。 输出格式： 在第1行中输出有可能是主元的元素个数；在第2行中按递增顺序输出这些元素，其间以1个空格分隔，行末不得有多余空格。 输入样例：1251 3 2 4 5 输出样例：1231 4 5 利用主元位置不变来做 1234567891011121314151617181920212223242526272829303132333435#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxm = 100010;int a[maxm],b[maxm],c[maxm];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); b[i] = a[i]; &#125; int max = 0,d = 0; sort(b,b+n); for(int i=0;i&lt;n;i++)&#123; if(max&lt;a[i])&#123; max = a[i]; &#125; if(a[i]==b[i]&amp;&amp;a[i]==max)&#123; c[d++] = a[i]; &#125; &#125; printf("%d\n",d); for(int i=0;i&lt;d;i++)&#123; if(i==0)&#123; printf("%d",c[i]); &#125;else&#123; printf(" %d",c[i]); &#125; &#125; printf("\n"); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[242. 有效的字母异位词]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。 示例 1:12输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;输出: true 示例 2:1234输入: s = &quot;rat&quot;, t = &quot;car&quot;输出: false说明:你可以假设字符串只包含小写字母。 进阶:如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？ 12345678910111213141516171819class Solution &#123;public: bool isAnagram(string s, string t) &#123; if(s.length()!=t.length())&#123; return false; &#125; int counter[27]=&#123;0&#125;; for(int i=0;i&lt;s.length();i++)&#123; counter[s[i]-'a']++; counter[t[i]-'a']--; &#125; for(int i=0;i&lt;26;i++)&#123; if(counter[i]!=0)&#123; return false; &#125; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[283. 移动零]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F283-%E7%A7%BB%E5%8A%A8%E9%9B%B6%2F</url>
    <content type="text"><![CDATA[给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例:12输入: [0,1,0,3,12]输出: [1,3,12,0,0] 说明: 必须在原数组上操作，不能拷贝额外的数组。尽量减少操作次数。 题目要求将一个数组中所以0元素移到数组末尾。我们可以初始化count为0作为下标，然后遍历数组，将所有不为0的元素放到前面，然后用一个while循环输出剩余的0。1234567891011121314class Solution &#123;public: void moveZeroes(vector&lt;int&gt;&amp; nums) &#123; int count = 0; for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]!=0)&#123; nums[count++] = nums[i]; &#125; &#125; while(count&lt;nums.size())&#123; nums[count++] = 0; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[461. 汉明距离]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。 给出两个整数 x 和 y，计算它们之间的汉明距离。 注意：0 ≤ x, y &lt; 231. 示例:12345678输入: x = 1, y = 4输出: 2解释:1 (0 0 0 1)4 (0 1 0 0) ↑ ↑ 上面的箭头指出了对应二进制位不同的位置。1234567891011121314class Solution &#123;public: int hammingDistance(int x, int y) &#123; int res = x^y;//对两个数异或，得到的结果不同的位置处即为1 int count = 0; while(res)&#123; if(res%2==1)&#123; count++;//计算1的个数 &#125; res/=2; &#125; return count; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-011 玩转二叉树（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-011-%E7%8E%A9%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-011 玩转二叉树（25 分）给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。这里假设键值都是互不相等的正整数。 输入格式： 输入第一行给出一个正整数N（&lt;=30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。 输出格式： 在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。 输入样例：12371 2 3 4 5 6 74 1 3 2 6 5 7 输出样例：14 6 1 7 5 3 2 普通的思路就是重建二叉树，然后广搜输出结点 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt; #include &lt;cstdio&gt; #include &lt;queue&gt; using namespace std; const int maxn = 35; const int INF = 0x3f3f3f3f; struct node&#123; int l=-1,r=-1; &#125;a[1000];int n;int mid[maxn],first[maxn]; int rebuild(int la, int ra, int lb, int rb)&#123;///la是中序遍历 if(la &gt; ra) return -1; int rt = first[lb]; int i = 0; while(mid[la+i] != rt) i++; a[rt].r = rebuild(la+i+1,ra,lb+i+1,rb); a[rt].l = rebuild(la,la+i-1,lb+1,lb+i); return rt; &#125; void bfs(int s)&#123; queue&lt;int&gt; q; q.push(s); while(!q.empty())&#123; int now = q.front(); q.pop(); if(a[now].r != -1) q.push(a[now].r); if(a[now].l != -1) q.push(a[now].l); printf("%d",now); if(!q.empty()) printf(" "); &#125; &#125; int main() &#123; scanf("%d",&amp;n); for(int i = 0; i &lt; n; ++i) scanf("%d",&amp;mid[i]); for(int i = 0; i &lt; n; ++i) scanf("%d",&amp;first[i]); rebuild(0,n-1,0,n-1); bfs(first[0]); return 0; &#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[383. 赎金信]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F383-%E8%B5%8E%E9%87%91%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。 (题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。) 注意： 你可以假设两个字符串均只含有小写字母。 canConstruct(“a”, “b”) -&gt; falsecanConstruct(“aa”, “ab”) -&gt; falsecanConstruct(“aa”, “aab”) -&gt; true123456789101112class Solution &#123;public: bool canConstruct(string ransomNote, string magazine) &#123; unordered_map&lt;char, int&gt; map(26); for (int i = 0; i &lt; magazine.size(); ++i) ++map[magazine[i]]; for (int j = 0; j &lt; ransomNote.size(); ++j) if (--map[ransomNote[j]] &lt; 0) return false; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1035 插入与归并(25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1035-%E6%8F%92%E5%85%A5%E4%B8%8E%E5%BD%92%E5%B9%B6-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1035 插入与归并(25)（25 分）根据维基百科的定义： 插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。 归并排序进行如下迭代操作：首先将原始序列看成N个只包含1个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下1个有序的序列。 现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？ 输入格式： 输入在第一行给出正整数N (&lt;=100)；随后一行给出原始序列的N个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。 输出格式： 首先在第1行中输出“Insertion Sort”表示插入排序、或“Merge Sort”表示归并排序；然后在第2行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行末不得有多余空格。 输入样例1：123103 1 2 8 7 5 9 4 6 01 2 3 7 8 5 9 4 6 0 输出样例1：12Insertion Sort1 2 3 5 7 8 9 4 6 0 输入样例2：123103 1 2 8 7 5 9 4 0 61 3 2 8 5 7 4 9 0 6 输出样例2：12Merge Sort1 2 3 8 4 5 7 9 0 6 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;cstdio&gt;using namespace std;bool cmp(int a,int b)&#123; return a&lt;b;&#125;int main()&#123; int n; scanf("%d",&amp;n); int *a = new int[n]; int *b = new int[n]; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); &#125; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;b[i]); &#125; int i,j; for(i=0;i&lt;n-1&amp;&amp;b[i]&lt;=b[i+1];i++); for(j=i+1;a[j]==b[j]&amp;&amp;j&lt;n;j++); if(j==n)&#123; printf("Insertion Sort\n"); sort(a,a+i+2,cmp); &#125;else&#123; printf("Merge Sort\n"); int k=1,flag=1; while(flag)&#123; flag=0; for(i=0;i&lt;n;i++)&#123; if(a[i]!=b[i])&#123; flag=1; &#125; &#125; k=k*2; for(i=0;i&lt;n/k;i++) sort(a+i*k,a+(i+1)*k,cmp); sort(a+n/k*k,a+n,cmp); &#125; &#125; for(j=0;j&lt;n-1;j++)&#123; printf("%d ",a[j]); &#125; printf("%d",a[n-1]); delete []a; delete []b; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1034 有理数四则运算(20)（20 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1034-%E6%9C%89%E7%90%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97-20-%EF%BC%8820-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1034 有理数四则运算(20)（20 分）本题要求编写程序，计算2个有理数的和、差、积、商。 输入格式： 输入在一行中按照“a1/b1 a2/b2”的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为0。 输出格式： 分别在4行中按照“有理数1 运算符 有理数2 = 结果”的格式顺序输出2个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式“k a/b”，其中k是整数部分，a/b是最简分数部分；若为负数，则须加括号；若除法分母为0，则输出“Inf”。题目保证正确的输出中没有超过整型范围的整数。 输入样例1：12/3 -4/2 输出样例1：12342/3 + (-2) = (-1 1/3)2/3 - (-2) = 2 2/32/3 * (-2) = (-1 1/3)2/3 / (-2) = (-1/3) 输入样例2：15/3 0/6 输出样例2：12341 2/3 + 0 = 1 2/31 2/3 - 0 = 1 2/31 2/3 * 0 = 01 2/3 / 0 = Inf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;//辗转相除法int gcd(long long a, long long b)&#123; return b == 0 ? a : gcd(b, a % b);&#125;void print(long long a, long long b)&#123; long long c = 0; //带分数前面的整数部分，默认是0 if(a &gt; 0)&#123; //正数 if(b == 1)&#123; //形如3/1 printf("%lld", a); &#125; else if(a &gt; b)&#123; //形如5/3 c = a / b; a -= b * c; printf("%lld %lld/%lld", c, a, b); &#125; else&#123; //真分数 形如3/5 printf("%lld/%lld", a, b); &#125; &#125; else if(a == 0)&#123; //形如0/3 printf("%c", '0'); &#125; else&#123; //负数 if(b == 1)&#123; //形如-3/1 printf("(%lld)", a); &#125; else if(-1 * a &gt; b)&#123; //形如-5/3 c = a / b; a = (-1 * a) % b; printf("(%lld %lld/%lld)", c, a, b); &#125; else&#123; //真分数 printf("(%lld/%lld)", a, b); &#125; &#125;&#125;void add(long long a1, long long b1, long long a2, long long b2)&#123; print(a1, b1); printf(" + "); print(a2, b2); printf(" = "); long long a3 = a1 * b2 + a2 * b1; long long b3 = b1 * b2; //化简到最简形式，非带分数形式 long long gcd3 = abs(gcd(a3, b3)); a3 /= gcd3; b3 /= gcd3; print(a3, b3); printf("\n");&#125;void subtract(long long a1, long long b1, long long a2, long long b2)&#123; print(a1, b1); printf(" - "); print(a2, b2); printf(" = "); long long a3 = a1 * b2 - a2 * b1; long long b3 = b1 * b2; //化简到最简形式，非带分数形式 long long gcd3 = abs(gcd(a3, b3)); a3 /= gcd3; b3 /= gcd3; print(a3, b3); printf("\n");&#125;void multiply(long long a1, long long b1, long long a2, long long b2)&#123; print(a1, b1); printf(" * "); print(a2, b2); printf(" = "); long long a3 = a1 * a2; long long b3 = b1 * b2; //化简到最简形式，非带分数形式 long long gcd3 = abs(gcd(a3, b3)); a3 /= gcd3; b3 /= gcd3; print(a3, b3); printf("\n");&#125;void divide(long long a1, long long b1, long long a2, long long b2)&#123; print(a1, b1); printf(" / "); print(a2, b2); printf(" = "); if(a2 == 0)&#123; printf("Inf"); &#125; else if(a2 &lt; 0)&#123; long long a3 = -1 * a1 * b2; long long b3 = -1 * b1 * a2; //化简到最简形式，非带分数形式 long long gcd3 = abs(gcd(a3, b3)); a3 /= gcd3; b3 /= gcd3; print(a3, b3); &#125; else&#123; long long a3 = a1 * b2; long long b3 = b1 * a2; //化简到最简形式，非带分数形式 long long gcd3 = abs(gcd(a3, b3)); a3 /= gcd3; b3 /= gcd3; print(a3, b3); &#125; printf("\n");&#125;int main()&#123; long long a1, b1, a2, b2; long long c1 = 0, c2 = 0; scanf("%lld/%lld %lld/%lld", &amp;a1, &amp;b1, &amp;a2, &amp;b2); //先化简到最简形式，非带分数形式 long long gcd1 = abs(gcd(a1, b1)); a1 /= gcd1; b1 /= gcd1; long long gcd2 = abs(gcd(a2, b2)); a2 /= gcd2; b2 /= gcd2; //统一用最简形式参与运算 add(a1, b1, a2, b2); subtract(a1, b1, a2, b2); multiply(a1, b1, a2, b2); divide(a1, b1, a2, b2); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[看不见的客人]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E5%AE%A2%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[昨晚看的一部电影《看不见的客人》，比我预想中的要好得多。其实和之前看的一部《控方证人》有异曲同工之处，但还是不得不承认这部剧的剧本够精彩。影片的主线围绕着一位律师和男主的谈话展开，一次次叙述的转变，层层反转，层层递进，吸引着观众紧跟节奏，直至结尾，真相揭露，给人豁然一击，人心叵测，人性慎测，莫过于此。 为什么说情节，布局十分巧妙。暂且撇开律师是死者母亲假扮这一点，说实话，在影片结尾这位母亲摘下假发，取下隐形镜片之前，我并没有看出来这位律师就是由死者母亲假扮的，当然，若是结合之前的一些对话以及言行，确实有很多地方与之相呼应，不然很难理解一位普通的花钱请来办事的普通律师会有很多奇怪的表现。例如，他为何一开始将一枚时钟摆在桌子上，表明只有３个小时的对话时间。另外，提现这部剧不是一部脑残剧的很大一点，便是这部剧剧情能吸引观众一步步深入，而不是一眼就让你看透结局。如何做到这一点的呢？首先影片是以律师和男主两人之间的对话展开的，这场对话实际上在我看来就是一场审判，一场拷问，关乎人性，关乎讽刺。因为对话的一方其实已经知道真相，而另一方却仍旧在重重伪装。而这位律师要做的便是层层诱导，让男主亲口一部部走入律师的陷阱，直至说出全部真相。剧情优秀的电影会让人觉得这是经得住推敲的，而这部电影恰好就是一部逻辑十分严密的电影。男主和律师其实是在进行一场博弈，尽管律师已经得知大部分真相，但她的目的是为了证据，他需要男主亲口说出自己的罪行，但显然，对男主这样一个内心防线严密的人来说这不是一件容易的事，他一次次叙述，一次次被律师推翻，就是想掩盖真相。你会发现，男主的每一次叙述，叙述中加入情节展现，你会发现竟然都是合情合理的，由此可以想象他的心理防线多么巨大，换言之，他的自私自利，泯灭良知已经到了何种程度。 接下来来看看男主的叙述，第一步，撇开车祸，撇开一切罪行喊冤，说明了自己在一个酒店莫名被人栽赃了，有人杀人劫财，并且嫁祸给他，一场密室杀人，所有证据都指向他，百口莫辩。然而，这场叙述不到10分钟就结束了，这样的话，律师简直听都不想听，于是让他别再浪费时间了，把该说的说出来才有辩护成功的希望，慢慢，男主有点服软，开始了他的第二个版本的叙述，这一次，他讲矛头指向了他的情人，劳拉。总之，他绝不会轻易说出自己的黑暗面，毕竟，他可是众人眼中的精英，万众瞩目，事业有成的成功企业家。男主将黑暗面加在了自己的情人劳拉身上，表明自己是身不由己，一时糊涂，听了情人劳拉的怂恿犯下大错，包括后面对死于车祸的男孩的陷害。然而律师一直不停的强调，注重细节，细节能救你，同时也能要了你的命。之后，男主一步步走入律师的圈套。最后，男主发现中计的时候，那种表情，绝对是被拷问后的表情，是被人对灵魂深深的拷问！让人难以想象的是男主为了自己所谓的前途竟然可以不择手段到这种程度，后面得知他的情人内心愧疚难安的了焦虑症，希望男主拿钱弥补死去男孩的父母并告知他们男孩尸体的位置，没想到男主一念之下杀了劳拉，更令人难以容忍的是，他在得知出了车祸的男孩还有一口气之时，他不是尽力去挽救，而是用力盖上了后备箱，视而不见，将车沉入湖底，实在难以想象但凡有一点良知的人能做得如此心狠手辣。 影片的讽刺方面直指一些现实社会中的“精英”，“名流”，尽管光环四射，衣着光鲜亮丽，成功，优秀都是他们的代名词，然而，有的人却被这些身外之物完全束缚了，私欲无限膨胀，完全以自我为中心，视他人如蝼蚁，视生命如蝼蚁，什么？出事了，我的前途怎么办，我的妻子女儿怎么办，我的事业刚刚达到巅峰，我怎能在这时出问题，一切都得为我开路，不能被这些碍手碍脚的家伙挡住我的美好前程。 另外，这部电影的正面主角，便是死者父母，用一句话来形容他们的内心“当你失去了至爱之人，便已无所畏惧”。他们为了给自己无辜的儿子，给死去的劳拉讨回一个公道，与男主不断周旋，收集各种资料，以谎言制服谎言，这也成就了这部电影最大的一个反转，长时间与恶龙搏斗，自身也会如同恶龙般强大，无所畏惧。 人心莫测，莫过于此，对《看不见的客人》而言，电影的画龙点睛之笔并不在于悬疑，更在于它深攫以了谎言这一人类用来满足自我私欲的本质，并在最后用打动人心的情感完成了这一内在的升华。]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[263. 丑数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F263-%E4%B8%91%E6%95%B0%2F</url>
    <content type="text"><![CDATA[编写一个程序判断给定的数是否为丑数。 丑数就是只包含质因数 2, 3, 5 的正整数。 示例 1:123输入: 6输出: true解释: 6 = 2 × 3 示例 2:123输入: 8输出: true解释: 8 = 2 × 2 × 2 示例 3:123输入: 14输出: false解释: 14 不是丑数，因为它包含了另外一个质因数 7。 说明： 1 是丑数。输入不会超过 32 位有符号整数的范围: [−231, 231 − 1]。 1234567891011121314151617181920class Solution &#123;public: bool isUgly(int num) &#123; if(num==0) return false; if(num==1) return true; if(num%2==0)&#123; num=num/2; return isUgly(num); &#125; if(num%3==0)&#123; num=num/3; return isUgly(num); &#125; if(num%5==0)&#123; num=num/5; return isUgly(num); &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[237. 删除链表中的节点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[请编写一个函数，使其可以删除某个链表中给定的（非末尾的）节点，您将只被给予要求被删除的节点。 比如：假设该链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 ，给定您的为该链表中值为 3 的第三个节点，那么在调用了您的函数之后，该链表则应变成 1 -&gt; 2 -&gt; 4 。后移指针 123456789101112131415/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: void deleteNode(ListNode* node) &#123; node-&gt;val = node-&gt;next-&gt;val; node-&gt;next = node-&gt;next-&gt;next; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[219. 存在重复元素 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0-II%2F</url>
    <content type="text"><![CDATA[给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。 示例 1:12输入: nums = [1,2,3,1], k = 3输出: true 示例 2:12输入: nums = [1,0,1,1], k = 1输出: true 示例 3:12输入: nums = [1,2,3,1,2,3], k = 2输出: false 1234567891011121314151617class Solution &#123;public: bool containsNearbyDuplicate(vector&lt;int&gt;&amp; nums, int k) &#123; unordered_map&lt;int,int&gt; check; for(int i=0;i&lt;nums.size();i++)&#123; if(check.find(nums[i])==check.end())&#123; check[nums[i]]=i; &#125;else&#123;//如果这个值在之前出现过，则检查差值 if(i-check[nums[i]]&lt;=k)&#123; return true; &#125; check[nums[i]]=i;//更新下标的值 &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[226. 翻转二叉树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[翻转一棵二叉树。 示例： 输入：12345 4 / \ 2 7 / \ / \1 3 6 9 输出：12345 4 / \ 7 2 / \ / \9 6 3 1 备注:这个问题是受到 Max Howell 的 原问题 启发的 ： 谷歌：我们90％的工程师使用您编写的软件(Homebrew)，但是您却无法在面试时在白板上写出翻转二叉树这道题，这太糟糕了。 递归写法： 翻转一棵空树结果还是一棵空树，但必须判断。之后递归交换左右结点。时间复杂度O(n)空间复杂度O(n)12345678910111213141516171819202122/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* invertTree(TreeNode* root) &#123; if(root==NULL)&#123; return NULL; &#125; TreeNode* right = invertTree(root-&gt;right); TreeNode* left = invertTree(root-&gt;left); root-&gt;left = right; root-&gt;right = left; return root; &#125;&#125;; 迭代写法： 123456789101112131415161718192021222324252627282930313233/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* invertTree(TreeNode* root) &#123; if(root==NULL)&#123; return NULL; &#125; queue&lt;TreeNode* &gt; q; q.push(root); while(!q.empty())&#123; TreeNode *current = q.front(); q.pop(); TreeNode *temp = current-&gt;left; current-&gt;left = current-&gt;right; current-&gt;right = temp; if(current-&gt;left!=NULL)&#123; q.push(current-&gt;left); &#125; if(current-&gt;right!=NULL)&#123; q.push(current-&gt;right); &#125; &#125; return root; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1030 完美数列(25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1030-%E5%AE%8C%E7%BE%8E%E6%95%B0%E5%88%97-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1030 完美数列(25)（25 分）给定一个正整数数列，和正整数p，设这个数列中的最大值是M，最小值是m，如果M &lt;= m * p，则称这个数列是完美数列。 现在给定参数p和一些正整数，请你从中选择尽可能多的数构成一个完美数列。 输入格式： 输入第一行给出两个正整数N和p，其中N（&lt;= 10^5^）是输入的正整数的个数，p（&lt;= 10^9^）是给定的参数。第二行给出N个正整数，每个数不超过10^9^。 输出格式： 在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。 输入样例：1210 82 3 20 4 5 1 6 7 8 9 输出样例：18 思路：对一个已经排序好的数列，找出这个数列小于等于这个数列最小元素*p的元素个数p与最小数相乘会超出int范围，所以不能用int定义数组 123456789101112131415161718192021222324252627282930#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;double a[100100];int main()&#123; int n,p; scanf("%d %d",&amp;n,&amp;p); for(int i=0;i&lt;n;i++)&#123; scanf("%lf",&amp;a[i]); &#125; int i,j,maxm = 0,cnt = 0; sort(a,a+n); double temp; for( i=0;i&lt;n;i++)&#123; temp = a[i]*p;//遍历，将a[i]作为最小数 for( j=cnt;j&lt;n;j++)&#123; if(a[j]&gt;temp)&#123;//如果不满足条件了，则将下一个元素最为最小值 break; &#125; if(j-i&gt;=maxm)&#123;//如果此次的长度大于上一次，更新数列长度 maxm = j-i+1; &#125; &#125; cnt = j; &#125; printf("%d",maxm); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[232. 用栈实现队列]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[使用栈实现队列的下列操作： push(x) – 将一个元素放入队列的尾部。pop() – 从队列首部移除元素。peek() – 返回队列首部的元素。empty() – 返回队列是否为空。示例: MyQueue queue = new MyQueue(); queue.push(1);queue.push(2);queue.peek(); // 返回 1queue.pop(); // 返回 1queue.empty(); // 返回 false说明: 你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class MyQueue &#123;public: stack&lt;int&gt; st,temp; /** Initialize your data structure here. */ MyQueue() &#123; &#125; /** Push element x to the back of queue. */ void push(int x) &#123; st.push(x); &#125; /** Removes the element from in front of queue and returns that element. */ int pop() &#123; int val; if(temp.empty())&#123; while(!st.empty()) &#123; val = st.top(); temp.push(val); st.pop(); &#125; &#125; int res = temp.top(); temp.pop(); return res; &#125; /** Get the front element. */ int peek() &#123; while(!st.empty()) &#123; int val = st.top(); temp.push(val); st.pop(); &#125; int ans = temp.top(); while(!temp.empty()) &#123; int val = temp.top(); st.push(val); temp.pop(); &#125; return ans; &#125; /** Returns whether the queue is empty. */ bool empty() &#123; return st.empty()&amp;&amp;temp.empty(); &#125;&#125;;/** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * bool param_4 = obj.empty(); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[225. 用队列实现栈]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88%2F</url>
    <content type="text"><![CDATA[使用队列实现栈的下列操作： push(x) – 元素 x 入栈pop() – 移除栈顶元素top() – 获取栈顶元素empty() – 返回栈是否为空注意: 你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class MyStack &#123; private: queue&lt;int&gt; st,st2;public: /** Initialize your data structure here. */ MyStack() &#123; &#125; /** Push element x onto stack. */ void push(int x) &#123; st.push(x); &#125; /** Removes the element on top of the stack and returns that element. */ int pop() &#123; auto result = top(); st.pop(); return result; &#125; /** Get the top element. */ int top() &#123; if(empty())&#123; throw runtime_error("stack is empty."); &#125; if(st.empty())&#123; swap(st,st2); &#125; while(st.size()&gt;1)&#123; st2.push(st.front()); st.pop(); &#125; return st.front(); &#125; /** Returns whether the stack is empty. */ bool empty() &#123; return st.empty()&amp;&amp;st2.empty(); &#125;&#125;;/** * Your MyStack object will be instantiated and called as such: * MyStack obj = new MyStack(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.top(); * bool param_4 = obj.empty(); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1025 反转链表 (25)（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8-25-%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1025 反转链表 (25)（25 分）给定一个常数K以及一个单链表L，请编写程序将L中每K个结点反转。例如：给定L为1→2→3→4→5→6，K为3，则输出应该为3→2→1→6→5→4；如果K为4，则输出应该为4→3→2→1→5→6，即最后不到K个元素不反转。 输入格式： 每个输入包含1个测试用例。每个测试用例第1行给出第1个结点的地址、结点总个数正整数N(&lt;= 10^5^)、以及正整数K(&lt;=N)，即要求反转的子链结点的个数。结点的地址是5位非负整数，NULL地址用-1表示。 接下来有N行，每行格式为： Address Data Next 其中Address是结点地址，Data是该结点保存的整数数据，Next是下一结点的地址。 输出格式： 对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。 输入样例：123456700100 6 400000 4 9999900100 1 1230968237 6 -133218 3 0000099999 5 6823712309 2 33218 输出样例：12345600000 4 3321833218 3 1230912309 2 0010000100 1 9999999999 5 6823768237 6 -1 1234567891011121314151617181920212223242526272829#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100005;int data[maxn];int list[maxn];int main()&#123; int next[maxn]; int first,k,n,temp,sum=0; scanf("%d%d%d",&amp;first,&amp;n,&amp;k); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;temp); scanf("%d %d",&amp;data[temp],&amp;next[temp]); &#125; while(first!=-1)&#123; list[sum++] = first; first = next[first]; &#125; for(int i=0;i&lt;(sum-sum%k);i+=k)&#123; reverse(begin(list) + i, begin(list) + i + k); &#125; for(int i=0;i&lt;sum-1;i++)&#123; printf("%05d %d %05d\n",list[i],data[list[i]],list[i+1]); &#125; printf("%05d %d -1",list[sum-1],data[list[sum-1]]); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[206. 反转链表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[反转一个单链表。 示例:12输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL 进阶:你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 迭代法：1234567891011121314151617181920212223/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; ListNode *prev = NULL; ListNode *curr = head; while(curr!=NULL)&#123; ListNode *temp = curr-&gt;next; curr-&gt;next = prev; prev = curr; curr = temp; &#125; head = prev; return head; &#125;&#125;; 递归法： 递归的终止步分三种情况讨论： 原链表为空，直接返回空链表即可。 原链表仅有一个元素，返回该元素。 原链表有两个以上元素，由于是单链表，故翻转需要自尾部向首部逆推。1234567891011121314151617181920212223/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; if(head==NULL)&#123; return head; &#125; if(head-&gt;next==NULL)&#123; return head; &#125; ListNode *newHead = reverseList(head-&gt;next); head-&gt;next-&gt;next = head; head-&gt;next = NULL; return newHead; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[190. 颠倒二进制位]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[颠倒给定的 32 位无符号整数的二进制位。 示例:1234输入: 43261596输出: 964176192解释: 43261596 的二进制表示形式为 00000010100101000001111010011100 ， 返回 964176192，其二进制表示形式为 00111001011110000010100101000000 。 进阶:如果多次调用这个函数，你将如何优化你的算法？ 方法一：遍历整数的所有位。 如果第i个位置的一个位置在I / P编号中。然后将该位设置为（NO_OF_BITS - 1） - i in o / p。 NO_OF_BITS是给定数字中存在的位数。12345678910111213141516class Solution &#123;public: uint32_t reverseBits(uint32_t n) &#123; unsigned int NO_OF_BITS = sizeof(n) * 8; unsigned int reverse_num = 0, i, temp; for (i = 0; i &lt; NO_OF_BITS; i++) &#123; temp = (n &amp; (1 &lt;&lt; i)); if(temp) reverse_num |= (1 &lt;&lt; ((NO_OF_BITS - 1) - i)); &#125; return reverse_num; &#125;&#125;; 时间复杂度：O(logn)空间复杂度：O(1)方法二：保持reversenum每一位与给定num相等直到num变成0，之后反向移动剩余的位123456789101112131415161718class Solution &#123;public: uint32_t reverseBits(uint32_t n) &#123; unsigned int count = sizeof(n) * 8 - 1; unsigned int reverse_num = n; n &gt;&gt;= 1; while(n) &#123; reverse_num &lt;&lt;= 1; reverse_num |= n &amp; 1; n &gt;&gt;= 1; count--; &#125; reverse_num &lt;&lt;= count; return reverse_num; &#125;&#125;; 时间复杂度：O(logn)空间复杂度：O(1)]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[160. 相交链表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[编写一个程序，找到两个单链表相交的起始节点。 例如，下面的两个链表：12345A: a1 → a2 ↘ c1 → c2 → c3 ↗ B: b1 → b2 → b3 在节点 c1 开始相交。 注意： 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 用环的思想来做，我们让两条链表分别从各自的开头开始往后遍历，当其中一条遍历到末尾时，我们跳到另一个条链表的开头继续遍历。两个指针最终会相等，而且只有两种情况，一种情况是在交点处相遇，另一种情况是在各自的末尾的空节点处相等。123456789101112131415161718192021/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; if(!headA||!headB) return NULL; ListNode *a = headA; ListNode *b = headB; while(a!=b)&#123; a = a ? a-&gt;next : headB; b = b ? b-&gt;next : headA; &#125; return a; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[141. 环形链表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[给定一个链表，判断链表中是否有环。 进阶：你能否不使用额外空间解决此题？ 可以用一个哈希表···cpp unordered_map&lt; int,bool&gt; visited···来标记每个元素是否被访问过，若某个元素被重复访问，则存在环。 最好的方法是用快慢指针，快指针每次走两步，慢指针每次走一步，只要快慢指针相遇，则肯定有环。 1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool hasCycle(ListNode *head) &#123; if(head==NULL||head-&gt;next==NULL)&#123; return false; &#125; ListNode* fast = head; ListNode* slow = head; while(fast-&gt;next!=NULL&amp;&amp;fast-&gt;next-&gt;next!=NULL)&#123; fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; if(slow==fast)&#123; return true; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[112. 路径总和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。 说明: 叶子节点是指没有子节点的节点。 示例:给定如下二叉树，以及目标和 sum = 22，12345678 5 / \ 4 8 / / \ 11 13 4 / \ \ 7 2 1返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。 直接深搜12345678910111213141516171819202122232425262728293031323334/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool hasPathSum(TreeNode* root, int sum) &#123; if(root==NULL)&#123; return false; &#125; return dfs(sum,0,root); &#125; bool dfs(int target,int sum,TreeNode* root)&#123; if(root==NULL)&#123; return false; &#125; sum+=root-&gt;val; if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)&#123; if(sum==target)&#123; return true; &#125;else&#123; return false; &#125; &#125; bool leftp = dfs(target,sum,root-&gt;left); bool rightp = dfs(target,sum,root-&gt;right); return leftp||rightp; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卖米]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E5%8D%96%E7%B1%B3%2F</url>
    <content type="text"><![CDATA[01《卖米》作者飞花，原名张培祥，1979年，出生于湖南醴陵一个山区农民家庭。自小于贫寒中刻苦学习，1997年考入北京大学法学院，2001年攻读法学硕士。2003年非典期间，年仅24岁的张培祥就已身患白血病离开了人世。 天刚蒙蒙亮，母亲就把我叫起来了：“琼宝，明天是这里的场，咱们担点米到场上卖了，好弄点钱给你爹买药。” 我恍恍惚惚展开双眼，看看窗外，日头还没出来呢。我真实太困，又在床上赖了一会儿。 近邻传来父亲的咳嗽声，母亲在厨房忙在世，饭菜的喷鼻气夹杂着淡淡的油烟味飘过去，渐渐遣散了我的睡意。我坐起来，穿好衣服，开端铺床。 “姐，我也跟你们一同去赶场好不好？你买冰棍给我吃！” 弟弟顶着一头睡得乱蓬蓬的头发跑到我房里来。 “毅宝，你不要去，你留在家里放水。”近邻传来父亲的声响，同化着几声咳嗽。 弟弟有些不甘愿地冲近邻说：“爹，天气这么热，你自个昨天才中了暑，今天又叫我去，就不怕我也中暑！” “人怕热，庄稼不怕？都不去放水，地都干了，禾都死了，一家人喝东南风去？”父亲一动气，咳嗽得更加凶猛了。 弟弟冲我吐吐舌头，扮了个鬼脸，就到父亲房里去了。 只听见父亲开端叮嘱他怎样放水，去哪个塘里引水，先放哪丘田，哪几个中央要特别注意他人来截水，等等。 02吃过饭，弟弟就找着父亲常用的那把锄头出去了。我和母亲开始往谷箩里装米，装完后先称了一下，一担八十多斤，一担六十多斤。 我说：“妈，我挑重的那担吧。” “你学生妹子，肩膀嫩，还是我来。” 母亲说着，一哈腰，把那担重的挑起来了。 我挑起那担轻的，跟着母亲出了门。 “路上当心点！我们家的米好，别廉价卖了！”父亲披着衣服站在门口吩咐道。 “晓得了。你快回床上躺着吧。”母亲困难地把头从扁担旁边扭过去，吩咐道，“饭菜在锅里，半夜你叫毅宝热一下吃！” 赶场的中央离我家大约有四里路，我和母亲挑着米，在窄窄的田间巷子上走走停停，足足走了一个钟头才到。场上的人曾经不少了，咱们赶忙找了一块旷地，把担子放上去，把扁担放在地上，两个人坐在扁担上，拿凉帽扇着。 一大早就这么热，中午就更不得了，我忍不住替弟弟担忧起来。 他去放水，是要在里头晒上一成天的。 我往周围看了看，发现场上有很多人卖米，莫非他们都等着用钱？ 场上的人大都眼生，都是附近十里八里的同乡，人家也是耕田的，谁会来买米呢？ 我问母亲，母亲说：“有专门的米商人会来收米的。他们开了车到乡间来赶场，收了米，拉到城里去卖，能挣好些哩。” 我说：“凭什么都给他们挣？咱们也拉到城里去卖好了！”其实自个也晓得不过是气话。 果真，母亲说：“我们这么一点米，又没车，真弄到城里去卖，挣的钱还不敷路费呢！早先你爹身体好的时刻，自个挑着一百来斤米进城去卖，隔几天去一趟，倒比较划算一点。” 我不由心里一紧，疼爱起父亲来。从家里到城里足足有三十多里山路呢，他挑着那么重的担子走着去，该何等辛劳！就为了多挣那几个钱，把人累成这样，多不值啊！但又有什么方法呢？家里除了种地，也没其余收入，不卖米，拿什么钱供我和弟弟上学？ 我想着这些，心里一阵阵忧伤起来。看看旁边的母亲，头发有些花白了，黑黝黝的脸上爬上了好多皱纹，脑门上密密麻麻都是汗珠，眼睛有些红肿。 “妈，你喝点水。” 我把水壶递过来，拿凉帽替她扇着。 03米商人们终于开着车来了。他们四处看着卖米的人，走过来细心看米的成色，还把手插进米里，抓上一把米细看。 “一块零五。” 米商人开价了。 卖米的似乎嫌太低，想还价讨价。 “不讨价，一口价，爱卖不卖！” 米商人立场很强硬，究竟，满场都是卖米的人，只有他们是买家，不趁机压价，更待何时？ 母亲留意着那里的情形说：“一块零五？也太廉价了。上场还卖到一块一呢。” 正说着，有个米商人朝咱们这边走过来了。 他把手插进大米里，抓了一把出来，迎着阳光细看着。 “这米好咧！又白又匀净，又筛得洁净，一点沙子也没有！”母亲堆着笑，语气里有几分骄傲。 确实，我家的米比场上其他人卖的米都好。 那人点了摇头，说：“米是好米，不过这几天城里涨价，再好的米也卖不出好价前来。一块零五，卖不卖？” 母亲摇摇头：“这也太廉价了吧？上场还卖一块一呢。再说，你是识货的，一分钱一分货，我这米一定好过别家的！” 那人又看了看米，犹疑了一下，说：“原本都是一口价，不许还的，看你们家米好，我加点，一块零八，怎样样？” 母亲照样摇头：“不可，咱们家这米，少说也要卖到一块一。你再加点？” 那人冷笑一声，说：“明天一定卖不出一块一的行情，我出一块零八你不卖，等会散场的时刻你一块零五都卖不出去！” “卖不出去，我们再担回家！”那人的立场激恼了母亲。 “那你就等着担回家吧。”那人冷笑着，丢下这句话走了。 04我在旁边听着，心里算着：一块零八到一块一，每斤才差两分钱。 这里一共150斤米，总共也就三块钱的事情，路这么远，何须再挑回去呢？ 我的肩膀还在痛呢。 我悄悄对母亲说：“妈，一块零八就一块零八吧，横竖也就三块钱的事。再说，还等着钱给爹买药呢。” “那哪行？”母亲似乎有些生气了，“三块钱不是钱？再说了，也不单是几块钱的事，经商也得讲点良知，我们辛辛苦苦种出来的米，质量也好，哪能这么贱卖了？” 我不敢再说。 我晓得耕田有何等累。 光说炎天放水，不就把爹给病倒了？ 弟弟也才十一二岁的毛孩子，还不得找着锄头去放水！ 究竟，这是一家人的生计啊！ 又有几个米商人过去了，他们也都只出一块零五。有一两个出到一块零八，也不愿再加。 母亲依然不愿卖。 看看人逐渐少了，我有些焦急了。 母亲必然也很心急吧，我想。 “妈，你去那里树下凉爽一下吧！”我说。 母亲一边擦汗，一边摇头：“不可。我走开了，来人买米怎样办？你又不会讨价！” 我有些羞愧。 “百无一用是书生”，固然在学校里功课好，但这些事情上就比母亲差远了。 又有好些人来买米，由于我家的米实在是好，人人都过去看，但谁也不愿出到一块一。 看看日头到头顶上了，我感觉肚子饿了，便拿出带来的饭菜和母亲一同吃起来。 母亲吃了两口就不吃了，我晓得她是担忧米卖不出去，心里焦急。 母亲叹了口气：“还不晓得卖得掉卖不掉呢。” 我趁机说：“不然就廉价点卖好了。” 母亲说：“我心里有数。” 05下午人更少了，日头又毒，谁情愿在场上晒着呢。 看看母亲，衣服都粘在背上了，乌黑的脸上也显露出晒红的印迹来。 “妈，我替你看着，你去溪里泡泡去。” 母亲照样摇头：“不行，我有风湿，不能在凉水里泡。你怕热，去那里树底下躲躲好了。” “不必，我不怕晒。” “那你去买根冰棍吃好了。” 母亲说着，从兜里掏出两毛钱零钱来。 我最喜好吃冰棍了，特别是那种叫“葡萄冰”的最好吃，也不贵，两毛钱一根。 但我今天忽然不想吃了：“妈，我不吃，喝水就行。” 最热的时候也过来了，转眼快散场了。 卖杂货的小贩开始降价甩卖，卖菜，卖西瓜的也都呼喊着：“散场了，廉价卖了！” 我四处看看，场上已经没有几个卖米的了，大部分人已经卖完回去了。 母亲也焦急起来，一焦急，汗就出得越多了。 终于有个米贩子过来了：“这米卖不卖？一块零五，不论价！” 母亲说：“你看我这米，多好！上场还卖一块一呢……” 不等母亲说完，那人就不耐性地说：“行情不同了！想卖一块一，你就等着往回担吧！” 奇怪的是，母亲没有生气，反而堆着笑说：“那，一块零八，你要不要？” 那人从鼻子里哼了一声，说：“你这个价钱，不是开场的时候也难卖出来，如今都散场了，谁买？做梦吧！” 母亲的脸一会儿白了，动着嘴唇，但什么也没说。 一旁的我不由得插嘴了：“不买就不买，谁稀罕？不买你就别站在这里挡道！” “哟，大妹子，你别这么大火气。” 那人冷笑着说，“留着点力气等会把米担回去吧！” 等那人走了，我不由得抱怨母亲：“开场的时候人家出一块零八你不卖，这会好了，人家还不愿意买了！” 母亲似乎有些羞愧，但并不愿认错：“本来嘛，一分钱一分货，米是好米，哪能贱卖了？出门的时候你爹不还叮嘱叫卖个好价钱？” “你还说爹呢！他病在家里，指着这米换钱买药治病！人要紧还是钱要紧？” 母亲似乎没有话说了，等了一会儿，低声说：“一会儿人家出一块零五也卖了吧。” 可是再没有人来买米了，米贩子把买来的米装上车，开走了。 06散场了，我和母亲晒了一天，一颗米也没卖出来。 “妈，走吧，回去吧，别愣在那儿了。” 我收拾好毛巾、水壶、饭盒，催促道。 母亲踌躇着，终于起了身。 “妈，我来挑重的。” “你先生妹子，肩膀嫩……” 不等母亲说完，我已经把那担重的挑起来了。 母亲也没有再说什么，挑起那担轻的跟在我后面，踏上了回家的路。 肩上的担子好沉，我只感觉压着一座山似的。 忽然脚下一滑，我差点摔倒。 我赶忙把剩下的力气都用到腿上，好不容易站稳了，但肩上的担子还是倾斜了一下，洒了好多米出来。 “啊，怎么搞的？”母亲也放下担子走过来，嘴里说，“我叫你不要挑这么重的，你偏不听，这不是洒了。多惋惜！真是败家精！” 败家精是母亲的口头禅，我和弟弟干了什么坏事她老是这么数落我们。 但今天我感觉格外委屈，也不晓得为什么。 “你在这等会儿，我回家去拿个簸箕来把地上的米扫进去。浪费了多可惜！拿回去能够喂鸡呢！”母亲也不问我扭伤没有，只顾心疼洒了的米。 我晓得母亲的脾性，她素来是“刀子嘴，豆腐心”的，虽然也心疼我，嘴里却非要骂我几句。 想到这些，我也不委屈了。 “妈，你回去还要往返走个六七里路呢，时候也不早了。”我说。 “那地上的米怎样办？” 我心血来潮，把头上的凉帽摘下来：“装在这里边好了。” 母亲笑了：“还是你脑子活，学生妹子，机灵。” 说着，我们便蹲下身子，用手把洒落在地上的米捧起来，放在凉帽里，然后把凉帽顶朝下放在谷箩里，便挑着米持续往家赶。 回抵家里，弟弟曾经回来了，母亲便忙着做晚饭，我跟父亲申报卖米的经过。 父亲听了，也没埋怨母亲，只说：“那些米贩子也太黑了，城里都卖一块五呢，把价压这么低！这么挣庄稼人的血汗钱，太没良心了！” 我说：“爹，也没给你买药，怎样办？” 父亲说：“我原本就说不用买药的嘛，过两天就好了，花那个冤枉钱做什么！” 早晨，父亲咳嗽得更凶猛了。 母亲对我说：“琼宝，今天是转步的场，我们辛劳一点，把米挑到那里场上去卖了，好给你爹买药。” “转步？那多远，十几里路呢！”我想到那漫长的山路，不由有些发怵。 “明天你们少担点米去。每人担50斤就够了。”父亲说。 “那明天可不要再卖不掉担回来哦！”我说，“十几里山路走个往返，还挑着担子，可不是说着玩的！” “不会了不会了。”母亲说，“今天一块零八也好，一块零五也好，总之都卖了！” 母亲的话里有很多辛酸和无奈的意思，我听得出来，但不晓得怎样抚慰她。 我自个心里也很忧伤，有点想哭。 我想，别让母亲看见了，要哭就躲到被子里哭去吧。 可我真是太累啦，头刚刚挨到枕头就睡着了，睡得又香又甜。 注：《卖米》曾取得北京大学首届校园原创文学大赛一等奖。然而，在颁奖现场，获奖者并没有出现，而是由她的同窗们在寄予哀思，那氛围已经不是在颁奖，而是在开追悼会了。一时间，缄默掩盖了北大的整个阳光大厅。至此，我才晓得获奖者在一年前就已身患白血病离开了人世。 你来人间一趟，总要看看太阳。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红黑树简介]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E7%BA%A2%E9%BB%91%E6%A0%91%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[红黑树简介红黑树（Red Black Tree）是一种自平衡的二叉查找树，它是在1972年由Rudolf Bayer发明的，当时被称为平衡二叉B树。后来，在1978年被Leo J.Guibas和Robert Sedgewick修改为如今的“红黑树”。红黑树应用非常广泛，比如C++ STL库中的map和Java中的TreeMap、HashMap都是基于红黑树红黑树结构实现的。近年来，红黑树也常在面试中被问到。因此，掌握红黑树数据结构是非常必要的。 红黑树的性质普通的二叉查找树在极端的情况下可退化成链表，此时的查找效率会比较低下。为了避免这种情况，就出现了一些自平衡的查找树，比如AVL、红黑树等。这些自平衡的查找树通过定义一些性质，将任意结点的左右子树高度差控制在固定范围内，以达到平衡状态。红黑树需要满足如下五条性质： 节点是红色或者黑色在树里面的结点不是红色就是黑色，没有其他颜色，这也就是红黑树的由来 根节点是黑色根节点总是黑色的，不能为红。 每个叶节点（NULL或空节点）是黑色NULL节点是个空节点，并且是黑色的。 每个红色节点的两个子节点都是黑色的连续的两个节点的意思就是父节点与子节点不能是连续的红色 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点（简称黑高）从根节点到每一个NULL节点的路径中，都包含了相同数量的黑色节点。 这五条性质约束了红黑树，可以通过数学来证明，满足这五条性质的二叉树，就可以保证任意节点到其每个叶子节点路径最长不会超过最短路径的2倍。证明如下： 当某条路径最短时，这条路径比如都是黑色节点构成。当某条路径长度最长时，这条路径必然是由红色和黑色节点相间构成（性质4限定了不能出现两个连续的红色节点）。而性质5又限定了从任一节点到其每个叶子节点的所有路径必须包含相同数量的黑色节点。此时，在路径最长的情况下，路径上红色节点数量 = 黑色节点数量。该路径长度为黑色节点数量的2倍，也就是最短路径长度的2倍。 红黑树的操作红黑树的基本操作与其他树的操作一样，有查找、插入和删除等操作。由于查找与其他树的操作一样，比较简单，而插入、删除操作比较复杂，这里主要就是接受插入、删除操作。 1.旋转操作由于插入、删除的过程中都要涉及到旋转，这里首先介绍一下旋转这个基本操作。旋转操作分为左旋转和右旋转 左旋左旋的过程是将节点x的右子树绕节点x逆时针旋转，使得节点x的右子树成为x的父亲，同时修改修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。 右旋右旋的过程是将节点x的左子树绕x顺时针旋转，使得节点x的左子树成为x的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。 2.插入操作红黑树的插入过程和二叉查找树的插入过程基本类似，不同的地方在于，红黑树插入新节点后，需要进行调整，以满足红黑树的性质。在讨论红黑树的插入操作之前必须要明白，任何一个即将插入的新节点的初始颜色都为红色。原因很简单，引入插入黑色的节点会增加某条路径上黑节点的数目，从而导致整棵树黑高度的不平衡。但如果插入的节点是红色的，此时所有路径上的黑色节点数量不变，仅可能会出现两个连续的红色节点的情况。这种情况下，通过变色和旋转进行调整即可，比插入黑色的简单多了。 红黑树的插入可能遇到如下几种情况： 情况1：当插入的节点是根节点时，直接涂黑即可； 情况2：当要插入的节点的父节点是黑色的时候，这个时候插入一个红色的节点并没有对这五个性质产生破坏。所以直接插入不用在进行调整操作。 情况3：如果要插入的节点的父节点是红色且叔叔节点也是红色。由于父节点和插入的节点都是红色，所以性质4被打破，此时需要进行调整。在这种情况下，先将父节点和叔叔节点的颜色染成黑色，再让祖父结点染成红色。此时经过祖父结点的路径上的黑色节点数量不变，性质5仍然满足。但需要注意的是祖父节点被染成红色后，可能会和它的父节点形成连续的红色节点，此时需要递归向上调整。 情况4：当要插入的父节点为红色，叔叔节点为黑色。此时需要对父节点进行左旋，然后按照情况5进行处理（注：这里要插入的节点有可能是调整后的其它节点，这里我们理解父节点为插入节点而转到情况5）。 情况5：当要插入的父节点为红色，叔叔节点为黑色。插入节点是父节点的左孩子，且父节点是祖父节点的左孩子。此时对祖父节点进行右旋，并将祖父节点和父节点进行互换颜色。这时候满足了红黑树的全部性质。 3.删除操作相对于插入操作，红黑树的删除操作更为复杂。同样，这里我们也分为几种情况进行分析： 情况1：当被删除元素为红时，对五条性质都没有什么影响，直接删除即可。 情况2：当被删除元素为黑且为根节点时，直接删除。 情况3：当被删除元素为黑，且有一个右子节点为红时，将右子节点涂黑放到被删除元素的位置，如图： 情况4：当被删除元素为黑，且兄弟节点为黑，兄弟节点两个孩子也为黑，父节点为红，此时，交换兄弟节点与父节点的颜色；NULL元素是指每个叶节点都是两个空的元素，颜色为黑的NULL元素，需要他的时候就可以把它看成两个黑元素，不需要的时候就可以忽视它。 情况5：当被删除的元素为黑、并且为父节点的左支，且兄弟颜色为黑，兄弟的右支为红色，这个时候需要交换兄弟与父亲的颜色，并把富且涂黑、兄弟的右支涂黑，并以父节点为中心左转。 情况6：当被删除元素为黑、并且为父节点的左支，且兄弟颜色为黑，兄弟的左支为红色，这个时候需要先把兄弟与兄弟的左子节点颜色互换，进行右转，然后就变成了情况5一样，在按照情况5进行旋转。 情况7：当被删除元素为黑且为父元素的右支时，跟情况5、情况6互为镜像。 情况8：当被删除的元素为黑，且父父元素的左支，兄弟节点为红色的时候，需要交换兄弟节点与父节点的颜色，以父节点进行左旋，就变成了情况4，再按照情况四进行操作即可。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[107. 二叉树的层次遍历 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F107-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86-II%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历） 例如：给定二叉树 [3,9,20,null,null,15,7],12345 3 / \9 20 / \ 15 7 返回其自底向上的层次遍历为：12345[ [15,7], [9,20], [3]] 题目要求：给定一颗二叉树， 返回一个二维数组，这个二维数组要满足这个条件， 二维数组的第一个一维数组要是这可二叉树的最下面一层，之后以此类推1234567891011121314151617181920212223242526272829303132333435363738/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; levelOrderBottom(TreeNode* root) &#123; int depth = getHeight(root); vector&lt;vector&lt;int&gt;&gt; ret(depth); if(depth==0)&#123; return ret; &#125; dfs(ret,ret.size()-1,root); return ret; &#125; void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; ret,int level,TreeNode* root)&#123; if(root==NULL)&#123; return ; &#125; ret[level].push_back(root-&gt;val); dfs(ret,level-1,root-&gt;left); dfs(ret,level-1,root-&gt;right); &#125; int getHeight(TreeNode* root)&#123; if(root==NULL)&#123; return 0; &#125; int lside = getHeight(root-&gt;left); int rside = getHeight(root-&gt;right); int height = (lside&gt;rside?lside:rside)+1; return height; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[L2-006 树的遍历（25 分）]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FL2-006-%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%EF%BC%8825-%E5%88%86%EF%BC%89%2F</url>
    <content type="text"><![CDATA[L2-006 树的遍历（25 分）给定一棵二叉树的后序遍历和中序遍历，请你输出其层序遍历的序列。这里假设键值都是互不相等的正整数。 输入格式： 输入第一行给出一个正整数N（&lt;=30），是二叉树中结点的个数。第二行给出其后序遍历序列。第三行给出其中序遍历序列。数字间以空格分隔。 输出格式： 在一行中输出该树的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。 输入样例：12372 3 1 5 7 6 41 2 3 4 5 6 7 输出样例：14 1 6 3 5 7 2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=50;struct node&#123; int data; node* lchild; node* rchild;&#125;;int pre[maxn],in[maxn],post[maxn];int n;node* create(int postl,int postr,int inl,int inr)&#123; if(postl&gt;postr)&#123; return NULL; &#125; node* root = new node; root-&gt;data=post[postr]; int k; for(k=inl;k&lt;=inr;k++)&#123; if(in[k]==post[postr])&#123; break; &#125; &#125; int numLeft=k-inl; root-&gt;lchild=create(postl,postl+numLeft-1,inl,k-1); root-&gt;rchild=create(postl+numLeft,postr-1,k+1,inr); return root;&#125;int num=0;void bfs(node* root)&#123; queue&lt;node*&gt; q; q.push(root); while(!q.empty())&#123; node* now=q.front(); q.pop(); printf("%d",now-&gt;data); num++; if(num&lt;n) printf(" "); if(now-&gt;lchild!=NULL) q.push(now-&gt;lchild); if(now-&gt;rchild!=NULL) q.push(now-&gt;rchild); &#125;&#125;int main()&#123; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;post[i]); &#125; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;in[i]); &#125; node* root=create(0,n-1,0,n-1); bfs(root); return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>PAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[110. 平衡二叉树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。 示例 1: 给定二叉树 [3,9,20,null,null,15,7]123456 3 / \ 9 20 / \ 15 7返回 true 。 示例 2:12345678910给定二叉树 [1,2,2,3,3,null,null,4,4] 1 / \ 2 2 / \ 3 3 / \ 4 4返回 false 。 1234567891011121314151617181920212223/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool isBalanced(TreeNode* root) &#123; return balanceHeight(root)&gt;=0; &#125; //假如是平衡二叉树，则返回root的高度，否则返回-1 int balanceHeight(TreeNode* root)&#123; if(root==nullptr) return 0; int left = balanceHeight(root-&gt;left); int right = balanceHeight(root-&gt;right); if(left&lt;0||right&lt;0||(abs(left-right)&gt;1)) return -1; return max(left,right)+1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[258. 各位相加]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F258-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。 示例:123输入: 38输出: 2解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。 进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？12345678910111213141516171819202122class Solution &#123;public: int addDigits(int num) &#123; return num-9*((num-1)/9); &#125;&#125;;class Solution &#123;public: int addDigits(int num) &#123; int sum = 0; while(num!=0)&#123; sum+=num%10; num/=10; &#125; if(sum&lt;10)&#123; return sum; &#125;else&#123; return addDigits(sum); &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[292. Nim游戏]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F292-Nim%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[你和你的朋友，两个人一起玩Nim游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。 你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。 示例:12输入: 4输出: false 解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛； 因为无论你拿走 1块、2块 还是 3块石头，最后一块石头总是会被你的朋友拿走。 找规律发现，只要是4的倍数就一定会输 class Solution {public: bool canWinNim(int n) { return (n%4!=0); }};]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[344. 反转字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[请编写一个函数，其功能是将输入的字符串反转过来。 示例： 输入：s = “hello”返回：”olleh”12345678910111213141516171819class Solution &#123;public: string reverseString(string s) &#123; reverse(s.begin(),s.end()); return s; &#125;&#125;;class Solution &#123;public: string reverseString(string s) &#123; string res; for (int nIdx = 0; nIdx &lt; s.length(); nIdx++) &#123; res += s[s.length() - nIdx - 1]; &#125; return res; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[268. 缺失数字]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F268-%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。 示例 1:12输入: [3,0,1]输出: 2 示例 2:12输入: [9,6,4,2,3,5,7,0,1]输出: 8 说明:你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现? 123456789101112131415class Solution &#123;public: int missingNumber(vector&lt;int&gt;&amp; nums) &#123; sort(nums.begin(),nums.end()); int j; for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]!=i)&#123; return i; &#125; j=i; &#125; return j+1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[231. 2的幂]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F231-2%E7%9A%84%E5%B9%82%2F</url>
    <content type="text"><![CDATA[给定一个整数，写一个函数来判断它是否是 2 的幂次方。 示例 1:12输入: 1输出: true 示例 2:12输入: 16输出: true 示例 3:12输入: 218输出: false 分析： 负数一定不是2的幂 2的整数次幂对应的二进制数只含有0个或者1个1 时间复杂度：O(n) 空间复杂度：O(1) 123456789101112131415161718class Solution &#123;public: bool isPowerOfTwo(int n) &#123; if(n&lt;0) return false; bool hasOne = false; while(n&gt;0)&#123; if(n&amp;1)&#123; if(hasOne)&#123; return false; &#125;else&#123; hasOne = true; &#125; &#125; n&gt;&gt;=1; &#125; return hasOne; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[217. 存在重复元素]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[给定一个整数数组，判断是否存在重复元素。 如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。 示例 1:12输入: [1,2,3,1]输出: true 示例 2:12输入: [1,2,3,4]输出: false 示例 3:12输入: [1,1,1,3,3,4,3,2,4,2]输出: true 12345678910111213141516class Solution &#123;public: bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123; if(nums.size()&lt;=1)&#123; return false; &#125; sort(nums.begin(),nums.end()); for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]==nums[i+1])&#123; return true; break; &#125; &#125; return false; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[108. 将有序数组转换为二叉搜索树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%2F</url>
    <content type="text"><![CDATA[将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。 本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。 示例: 给定有序数组: [-10,-3,0,5,9], 一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：12345 0 / \ -3 9 / /-10 5 因为给出的是有序数组，所以数组的中间元素就是二叉搜索树的根结点，然后分治去递归1234567891011121314151617181920212223/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) &#123; return sortedArrayToBST(nums,0,nums.size()); &#125; TreeNode* sortedArrayToBST(vector&lt;int&gt; &amp;nums,int start,int end)&#123; if(start&gt;=end) return NULL; int mid = (end+start)/2; TreeNode *root = new TreeNode(nums[mid]); root-&gt;left = sortedArrayToBST(nums,start,mid); root-&gt;right = sortedArrayToBST(nums,mid+1,end); return root; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[101. 对称二叉树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。12345 1 / \ 2 2 / \ / \3 4 4 3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:12345 1 / \2 2 \ \ 3 3 说明: 如果你可以运用递归和迭代两种方法解决这个问题，会很加分。12345678910111213141516171819202122递归写法：/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool isSymmetric(TreeNode* root) &#123; if(root==nullptr) return true; return isSymmetric(root-&gt;left,root-&gt;right); &#125; bool isSymmetric(TreeNode *p,TreeNode *q)&#123; if(p==nullptr&amp;&amp;q==nullptr) return true; if(p==nullptr||q==nullptr) return false; return p-&gt;val==q-&gt;val&amp;&amp;isSymmetric(p-&gt;left,q-&gt;right)&amp;&amp;isSymmetric(p-&gt;right,q-&gt;left); &#125;&#125;; 123456789101112131415161718192021222324252627282930313233迭代写法：/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: bool isSymmetric(TreeNode* root) &#123; if(!root) return true; stack&lt;TreeNode*&gt; s; s.push(root-&gt;left); s.push(root-&gt;right); while(!s.empty())&#123; auto p = s.top(); s.pop(); auto q = s.top(); s.pop(); if(!q&amp;&amp;!p) continue; if(!p||!q) return false; if(p-&gt;val!=q-&gt;val) return false; s.push(p-&gt;left); s.push(q-&gt;right); s.push(p-&gt;right); s.push(q-&gt;left); &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[198. 打家劫舍]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D%2F</url>
    <content type="text"><![CDATA[你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。 示例 1:12输入: [1,2,3,1]输出: 4 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。 偷窃到的最高金额 = 1 + 3 = 4 。示例 2:12输入: [2,7,9,3,1]输出: 12 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。 偷窃到的最高金额 = 2 + 9 + 1 = 12 。考虑动态规划解法，关键在于得到dp转移方程dp[i] = max(dp[i-2]+nums[i],dp[i-1]);123456789101112131415161718class Solution &#123;public: int rob(vector&lt;int&gt;&amp; nums) &#123; if(nums.size()==0)&#123; return 0; &#125; if(nums.size()==1)&#123; return nums[0]; &#125; vector&lt;int&gt; dp(nums.size()); dp[0] = nums[0]; dp[1] = max(nums[0],nums[1]); for(int i=2;i&lt;nums.size();i++)&#123; dp[i] = max(dp[i-2]+nums[i],dp[i-1]); &#125; return dp[nums.size()-1]; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[67. 二进制求和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定两个二进制字符串，返回他们的和（用二进制表示）。 输入为非空字符串且只包含数字 1 和 0。 示例 1:12输入: a = &quot;11&quot;, b = &quot;1&quot;输出: &quot;100&quot; 示例 2:12输入: a = &quot;1010&quot;, b = &quot;1011&quot;输出: &quot;10101&quot; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Solution &#123;public: string addBinary(string a, string b) &#123; int len1 = a.size(); int len2 = b.size(); if(len1==0)&#123; return b; &#125; if(len2==0)&#123; return a; &#125; string ret; int carry = 0; int index1 = len1-1; int index2 = len2-1; while(index1&gt;=0&amp;&amp;index2&gt;=0)&#123; int num = (a[index1]-'0')+(b[index2]-'0')+carry; carry = num/2; num = num%2; index1--; index2--; ret.insert(ret.begin(),num+'0'); &#125; if(index1&lt;0&amp;&amp;index2&lt;0)&#123; if(carry==1)&#123; ret.insert(ret.begin(),carry+'0'); return ret; &#125; &#125; while(index1&gt;=0)&#123; int num = (a[index1]-'0')+carry; carry = num/2; num = num%2; index1--; ret.insert(ret.begin(),num+'0'); &#125; while(index2&gt;=0)&#123; int num = (b[index2]-'0')+carry; carry = num/2; num = num%2; index2--; ret.insert(ret.begin(),num+'0'); &#125; if(carry==1)&#123; ret.insert(ret.begin(),carry+'0'); &#125; return ret; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[155. 最小栈]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F155-%E6%9C%80%E5%B0%8F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) – 将元素 x 推入栈中。pop() – 删除栈顶的元素。top() – 获取栈顶元素。getMin() – 检索栈中的最小元素。示例: MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin(); –&gt; 返回 -3.minStack.pop();minStack.top(); –&gt; 返回 0.minStack.getMin(); –&gt; 返回 -2. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class MinStack &#123;public: /** initialize your data structure here. */ stack&lt;int&gt; st; stack&lt;int&gt; minSt; MinStack() &#123; while(!st.empty())&#123; st.pop(); &#125; while(!minSt.empty())&#123; minSt.pop(); &#125; &#125; void push(int x) &#123; st.push(x); if(minSt.size()==0)&#123; minSt.push(x); &#125;else&#123; if(x&lt;=minSt.top())&#123; minSt.push(x); &#125;else&#123; minSt.push(minSt.top()); &#125; &#125; &#125; void pop() &#123; if(st.size()!=0)&#123; st.pop(); minSt.pop(); &#125; &#125; int top() &#123; if(st.size()==0)&#123; return -1; &#125; return st.top(); &#125; int getMin() &#123; if(minSt.size()==0)&#123; return -1; &#125; return minSt.top(); &#125;&#125;;/** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(x); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[205. 同构字符串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定两个字符串 s 和 t，判断它们是否是同构的。 如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。 所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。 示例 1:12输入: s = &quot;egg&quot;, t = &quot;add&quot;输出: true 示例 2:12输入: s = &quot;foo&quot;, t = &quot;bar&quot;输出: false 示例 3:12输入: s = &quot;paper&quot;, t = &quot;title&quot;输出: true 说明:你可以假设 s 和 t 具有相同的长度。 用两个HashMap维护字符的映射关系，时间复杂度O(n)，空间复杂度O(n)。12345678910111213141516171819202122class Solution &#123; public boolean isIsomorphic(String s, String t) &#123; if(s.length()!=t.length()) return false; final Map&lt;Character,Character&gt; map1 = new HashMap&lt;&gt;(); final Map&lt;Character,Character&gt; map2 = new HashMap&lt;&gt;(); for(int i=0;i&lt;s.length();i++)&#123; final char c1 = s.charAt(i); final char c2 = t.charAt(i); if(map1.containsKey(c1))&#123; if(map1.get(c1)!=c2) return false; &#125;else&#123; map1.put(c1,c2); &#125; if(map2.containsKey(c2))&#123; if(map2.get(c2)!=c1) return false; &#125;else&#123; map2.put(c2,c1); &#125; &#125; return true; &#125;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[125. 验证回文串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 示例 1:12输入: &quot;A man, a plan, a canal: Panama&quot;输出: true 示例 2:12输入: &quot;race a car&quot;输出: false transform函数的作用是：将某操作应用于指定范围的每个元素123456789101112//C++transform|C++tolower|C++toupper|C++字母转大写|C++字母转小写#include&lt;string&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;usingnamespacestd;voidmain()&#123;string s("WelcomeToWebSite!");cout&lt;&lt;s&lt;&lt;endl;transform(s.begin(),s.end(),s.begin(),::tolower);//字母转小写cout&lt;&lt;s&lt;&lt;endl;transform(s.begin(),s.end(),s.begin(),::toupper);//字母转大写cout&lt;&lt;s&lt;&lt;endl;&#125; 123456789101112131415161718192021222324class Solution &#123;public: bool isPalindrome(string s) &#123; if(s.size()==0)&#123; return true; &#125; string res = ""; for(int i=0;i&lt;s.size();i++)&#123; if((s[i]&gt;='0'&amp;&amp;s[i]&lt;='9')||(s[i]&gt;='a'&amp;&amp;s[i]&lt;='z')||(s[i]&gt;='A'&amp;&amp;s[i]&lt;='Z'))&#123; res+=s[i]; &#125; &#125; transform(res.begin(),res.end(),res.begin(),::tolower); int i=0,j=res.size()-1; while(i&lt;j)&#123; if(res[i]!=res[j])&#123; return false; &#125; i++; j--; &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13. 罗马数字转整数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[罗马数字包含以下七种字符：I， V， X， L，C，D 和 M。 字符 数值I 1V 5X 10L 50C 100D 500M 1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。 示例 1:12输入: &quot;III&quot;输出: 3 示例 2:12输入: &quot;IV&quot;输出: 4 示例 3:12输入: &quot;IX&quot;输出: 9 示例 4:123输入: &quot;LVIII&quot;输出: 58解释: C = 100, L = 50, XXX = 30, III = 3. 示例 5:123输入: &quot;MCMXCIV&quot;输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4. 1234567891011121314151617181920212223242526class Solution &#123;public: int romanToInt(string s) &#123; int ans = 0; ans = toInt(s[0]); for(int i=1;i&lt;s.length();i++)&#123; ans +=toInt(s[i]); if(toInt(s[i-1])&lt;toInt(s[i]))&#123; ans -=toInt(s[i-1])*2; &#125; &#125; return ans; &#125; int toInt(char c)&#123; switch(c)&#123; case 'I':return 1; case 'V':return 5; case 'X':return 10; case 'L':return 50; case 'C':return 100; case 'D':return 500; case 'M':return 1000; &#125; return 0; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[122. 买卖股票的最佳时机 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA-II%2F</url>
    <content type="text"><![CDATA[给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 示例 1:12输入: [7,1,5,3,6,4]输出: 7 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。示例 2:12输入: [1,2,3,4,5]输出: 4 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。示例 3: 输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 用贪心的思想，低进高出，只要相邻两天有差价就相加，因为题中没有限制交易次数。12345678910111213141516class Solution &#123;public: int maxProfit(vector&lt;int&gt;&amp; prices) &#123; int len = prices.size(); if(len&lt;=1)&#123; return 0; &#125; int sum = 0; for(int i=1;i&lt;len;i++)&#123; if(prices[i]-prices[i-1]&gt;0)&#123; sum+=prices[i]-prices[i-1]; &#125; &#125; return sum; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[111. 二叉树的最小深度]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明: 叶子节点是指没有子节点的节点。 示例:12345678给定二叉树 [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7返回它的最小深度 2. 递归写法：1234567891011121314151617181920/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int minDepth(TreeNode* root) &#123; return minDepth(root,false); &#125;private: static int minDepth(TreeNode *root,bool hasbrother)&#123; if(!root) return hasbrother ? INT_MAX:0; return 1+min(minDepth(root-&gt;left,root-&gt;right!=NULL),minDepth(root-&gt;right,root-&gt;left!=NULL)); &#125;&#125;; 迭代写法：1234567891011121314151617181920212223242526272829303132333435/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int minDepth(TreeNode* root) &#123; if(root==nullptr)&#123; return 0; &#125; int result = INT_MAX; stack&lt;pair&lt;TreeNode*,int&gt;&gt; s; s.push(make_pair(root,1)); while(!s.empty())&#123; auto node = s.top().first; auto depth = s.top().second; s.pop(); if(node-&gt;left==nullptr&amp;&amp;node-&gt;right==nullptr)&#123; result = min(result,depth); &#125; if(node-&gt;left&amp;&amp;result&gt;depth)&#123; s.push(make_pair(node-&gt;left,depth+1)); &#125; if(node-&gt;right&amp;&amp;result&gt;depth)&#123; s.push(make_pair(node-&gt;right,depth+1)); &#125; &#125; return result; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[119. 杨辉三角 II]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92-II%2F</url>
    <content type="text"><![CDATA[给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。 在杨辉三角中，每个数是它左上方和右上方的数的和。 示例:12输入: 3输出: [1,3,3,1] 进阶： 你可以优化你的算法到 O(k) 空间复杂度吗？ 解法：滚动数组 我们知道，帕斯卡三角的计算公式是这样的，A[k][n] = A[k-1][n-1] + A[k-1][n]。假设现在数组存放的第3层的数据，[1, 3, 3, 1]，如果我们需要计算第4层的数据， 如果我们从前往后计算，譬如A[4][2]= A[3][1] + A[3][2]，也就是4，但是因为只有一 个数组，所以需要将4这个值覆盖到2这个位置，那么我们计算A[4][3]的时候就会出 现问题了，因为这时候A[3][2]不是3，而是4了。为了解决这个问题，我们只能从后往前计算，仍然是上面那个例子，我们实现计算 A[4][3] = A[3][2] + A[3][3]，也就是6，我们将6直接覆盖到3这个位置，但不会影响 我们计算A[4][2]，因为A[4][2] = A[3][1] + A[3][2]，已经不会涉及到3这个位置了。1234567891011121314class Solution &#123;public: vector&lt;int&gt; getRow(int rowIndex) &#123; vector&lt;int&gt; array; for(int i=0;i&lt;=rowIndex;i++)&#123; for (int j = i - 1; j &gt; 0; j--)&#123; array[j] = array[j - 1] + array[j]; &#125; array.push_back(1); &#125; return array; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[189. 旋转数组]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1:12输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4] 解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]示例 2:12输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100] 解释:向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100]说明: 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。要求使用空间复杂度为 O(1) 的原地算法。 方法一：最简单的想法，进行k次循环，每次循环转移所有元素时间复杂度O(n*k)空间复杂度O(1)1234567891011121314class Solution &#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; int temp,previous; for(int i=0;i&lt;k;i++)&#123; previous = nums[nums.size()-1]; for(int j=0;j&lt;nums.size();j++)&#123; temp = nums[j]; nums[j] = previous; previous = temp; &#125; &#125; &#125;&#125;; 方法二：用一个额外的数组Array[Accepted]另开一个数组，将每一个元素按正确的位置赋值给新数组，最后将新数组复制到原数组。时间复杂度为O(n)空间复杂度为O(n)123456789101112class Solution &#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; vector&lt;int&gt; a(nums.size()); for(int i=0;i&lt;nums.size();i++)&#123; a[(i+k)%nums.size()] = nums[i]; &#125; for(int i=0;i&lt;nums.size();i++)&#123; nums[i] = a[i]; &#125; &#125;&#125;; 方法三：Using Cyclic Replacements [Accepted]我们可以直接将阵列的每个数字放置在所需的正确位置。但如果我们这样做，我们将破坏原始元素。因此，我们需要将被替换的数字存储在temptemp变量中。然后，我们可以将替换的数字（temptemp）放在正确的位置Look at the following example to clarify the process: nums: [1, 2, 3, 4, 5, 6] k: 2时间复杂度为O(n)空间复杂度为O(1) 12345678910111213141516171819class Solution &#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; k = k%nums.size(); int count = 0; for(int start=0;count&lt;nums.size();start++)&#123; int current = start; int prev = nums[start]; do&#123; int next = (current+k)%nums.size(); int temp = nums[next]; nums[next] = prev; prev = temp; current = next; count++; &#125;while(start!=current); &#125; &#125;&#125;; 方法四：用reverse函数时间复杂度为O(n)空间复杂度为O(1)例如：Original List : 1 2 3 4 5 6 7After reversing all numbers : 7 6 5 4 3 2 1After reversing first k numbers : 5 6 7 4 3 2 1After revering last n-k numbers : 5 6 7 1 2 3 4 –&gt; Result12345678910111213141516171819class Solution &#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; k = k%nums.size(); reverse(nums,0,nums.size()-1); reverse(nums,0,k-1); reverse(nums,k,nums.size()-1); &#125; public: void reverse(vector&lt;int&gt;&amp; nums,int start,int end)&#123; while(start&lt;end)&#123; int temp = nums[start]; nums[start] = nums[end]; nums[end] = temp; start++; end--; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[14. 最长公共前缀]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80%2F</url>
    <content type="text"><![CDATA[编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 “”。 示例 1:12输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出: &quot;fl&quot; 示例 2:1234输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出: &quot;&quot;解释: 输入不存在公共前缀。说明: 所有输入只包含小写字母 a-z 。 可以采用纵向扫描或横向扫描纵向扫描，就从位置0开始，对每一个位置比较所有的字符串，直到遇到不匹配的字符为止。123456789101112class Solution &#123;public: string longestCommonPrefix(vector&lt;string&gt;&amp; strs) &#123; if(strs.empty()) return ""; for(int i=0;i&lt;strs[0].size();++i)&#123; for(int j=1;j&lt;strs.size();++j)&#123; if(strs[j][i]!=strs[0][i]) return strs[0].substr(0,i); &#125; &#125; return strs[0]; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[202. 快乐数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F202-%E5%BF%AB%E4%B9%90%E6%95%B0%2F</url>
    <content type="text"><![CDATA[编写一个算法来判断一个数是不是“快乐数”。 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 示例:1234567输入: 19输出: true解释:12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1 我们可以建立一个集合，将循环中计算得到的数组存入集合，如果算得结果为1，则为快乐数，相反如果有某个数重复出现，那么必然不是快乐数 不是快乐数的数称为不快乐数（unhappy number），所有不快乐数的数位平方和计算，最后都会进入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循环中。维基百科中有关于快乐数比较详细的介绍快乐数12345678910111213141516171819202122class Solution &#123;public: bool isHappy(int n) &#123; set&lt;int&gt; st; while(1)&#123; n = numSquareSum(n); if(n==1) return true; if(st.find(n)!=st.end()) return false; st.insert(n); &#125; &#125; int numSquareSum(int n)&#123; int squareSum = 0; while(n)&#123; squareSum +=(n%10)*(n%10); n /=10; &#125; return squareSum; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[203. 删除链表中的节点]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F203-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%2F</url>
    <content type="text"><![CDATA[删除链表中等于给定值 val 的所有节点。 示例:12输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6输出: 1-&gt;2-&gt;3-&gt;4-&gt;5 1234567891011121314151617181920212223242526272829/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* removeElements(ListNode* head, int val) &#123; if(head==NULL) return head;//检查链表是否为空 ListNode *p = head,*tmp = head,*dum = new ListNode(-1); dum-&gt;next = head; p = dum; while(p-&gt;next!=NULL)&#123;//遍历整个链表 if(p-&gt;next-&gt;val==val)&#123;//删除与给定值相等的结点 tmp = p-&gt;next; p-&gt;next = tmp-&gt;next; delete tmp; &#125;else&#123; p = p-&gt;next; &#125; &#125; head = dum-&gt;next; delete dum; return head; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[28. 实现strStr()]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F28-%E5%AE%9E%E7%8E%B0strStr%2F</url>
    <content type="text"><![CDATA[实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 示例 1:12输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot;输出: 2 示例 2:12输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;输出: -1 说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。 一道字符串匹配的问题：方法一：暴力解法，时间复杂度O(m*n) 方法二：KMP算法 方法三：Boyer-Mooer算法 方法四：Rabin-Karp算法123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123;public: int strStr(string haystack, string needle) &#123; int i, j, lenh = haystack.length(), lenn = needle.length(); if (lenn == 0) return 0; for (i = 0; i &lt;= lenh - lenn; i++) &#123; for (j = 0; j &lt; lenn; j++) if (haystack[i + j] != needle[j]) break; // 匹配成功 if (j == lenn) return i; &#125; return -1; &#125;&#125;;// KMP解法class Solution &#123;public: vector&lt;int&gt; KMPpreprocessing(string s) &#123; int n = s.size(); vector&lt;int&gt; match(n,-1); int j = -1; for(int i=1; i&lt;n; i++) &#123; while(j&gt;=0 &amp;&amp; s[i]!=s[j+1]) j = match[j]; if(s[i]==s[j+1]) j++; match[i] = j; &#125; return match; &#125; int strStr(string haystack, string needle) &#123; if(needle.empty()) return 0; if(haystack.empty()) return -1; int m = haystack.size(), n = needle.size(); vector&lt;int&gt; match = KMPpreprocessing(needle); int j = -1; for(int i=0; i&lt;m; i++) &#123; while(j&gt;=0 &amp;&amp; haystack[i]!=needle[j+1]) j = match[j]; if(haystack[i]==needle[j+1]) j++; if(j==n-1) return (i-n+1); &#125; return -1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20. 有效的括号]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。 示例 1:12输入: &quot;()&quot;输出: true 示例 2:12输入: &quot;()[]&#123;&#125;&quot;输出: true 示例 3:12输入: &quot;(]&quot;输出: false 示例 4:12输入: &quot;([)]&quot;输出: false 示例 5:12输入: &quot;&#123;[]&#125;&quot;输出: true 12345678910111213141516171819class Solution &#123;public: bool isValid(string s) &#123; string left = "([&#123;"; string right = ")]&#125;"; stack&lt;char&gt; stk; for(auto c : s)&#123; if(left.find(c)!=string::npos)&#123; stk.push(c); &#125;else&#123; if(stk.empty()||stk.top()!=left[right.find(c)]) return false; else stk.pop(); &#125; &#125; return stk.empty(); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[172. 阶乘后的零]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2F172-%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6%2F</url>
    <content type="text"><![CDATA[给定一个整数 n，返回 n! 结果尾数中零的数量。 示例 1:123输入: 3输出: 0解释: 3! = 6, 尾数中没有零。 示例 2:123输入: 5输出: 1解释: 5! = 120, 尾数中有 1 个零. 说明: 你算法的时间复杂度应为 O(log n) 。 尾随零通常由素数因子2和5产生。如果我们可以计数5s和2s的数量，我们的任务就完成了Trailing 0s in n! = Count of 5s in prime factors of n! = floor(n/5) + floor(n/25) + floor(n/125) + ….12345678910class Solution &#123;public: int trailingZeroes(int n) &#123; int count = 0; while(n=n/5) count+=n; return count; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树状数组]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[lowbit运算lowbit运算属于二进制的一个经典应用：lowbit(x) = x &amp; (-x) 整数在计算机中一般采用的是补码存储，而把一个补码表示的整数x变成其相反数-x的过程相当于把x的二进制的每一位都取反，然后末位+1.这又等价于直接把x的二进制最右边的1左边的每一位都取反。 所以lowbit(x) = x &amp; (-x)其实就是取x的二进制最右边的1和它右边所有0.lowbit(x)也可以理解为能整除x的最大2的幂次。 树状数组及其应用例题导入：给出一个整数序列A，元素个数为N(N&lt;=10^5),接下来查询K次（K&lt;=10^5）,每次查询将给出一个正整数（x）(x&lt;=N),求前x个整数之和。 一般做法是开一个sum数组，其中sum[i]表示前i个整数之和（数组下标从1开始），这样sum数组就可以在输入N个整数时就预处理出来。接着每次查询前x个整数之和时，输出sum[x]就行。每次查询复杂度为O(1),查询总复杂度为O(K) 问题升级：假设在查询的过程中可能随时给第x个整数加上一个整数v，要求在查询中能实时输出前x个整数之和（更新操作和查询操作的次数总和为K次）。若按照原先的思路，操作的总复杂度会达到O(KN). BIT树状数组解法树状数组其实仍然是一个数组，是一个用来记录和的数组，只不过它存放的不是前i个整数之和，而是在i号位之前（含i号位）lowbit(i)个整数之和。用数组C表示树状数组，其中C[i]存放数组A中i号位之前lowbit(i)个元素之和，C[i]和覆盖长度为lowbit(i)lowbit(i)是2的幂次 树状数组的下标必须从1开始 设计函数getSum(x) ,返回前x个数之和A[i]+……+A[x]1234567int getSum(int x)&#123; int sum = 0; for(int i=x;i&gt;0;i-=lowbit(i))&#123; sum+=c[i]; &#125; return sum;&#125; 设计函数update(x,y),实现将第x个数加上一个数v的功能，即A[x]+=v.12345void updata(int x,int v)&#123; for(int i=x;i&lt;=N;i+=lowbit(i))&#123; c[i]+=v; &#125;&#125; 树状数组经典应用统计序列中在元素左边比该元素小的元素个数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;cstdio&gt;#include&lt;cstring&gt;const int maxn = 100010;#define lowbit(i) ((i)&amp;(-i))int c[maxn];void update(int x,int v)&#123; for(int i=x;i&lt;maxn;i+=lowbit(i))&#123; c[i]+=v; &#125;&#125;int getSum(int x)&#123; int sum = 0; for(int i=x;i&gt;0;i-=lowbit(i))&#123; sum+=c[i]; &#125; return sum;&#125;int main()&#123; int n,x; scanf("%d",&amp;n); memset(c,0,sizeof(c)); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;x); update(x,1); printf("%d\n",getSum(x-1)); &#125; return 0;&#125;离散化代码#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100010;#define lowbit(i) ((i)&amp;(-i))struct Node&#123; int val; int pos;&#125;temp[maxn];int A[maxn];int c[maxn];void update(int x,int v)&#123; for(int i=x;i&lt;maxn;i+=lowbit(i))&#123; c[i]+=v; &#125;&#125;int getSum(int x)&#123; int sum = 0; for(int i=x;i&gt;0;i-=lowbit(i))&#123; sum+=c[i]; &#125; return sum;&#125;bool cmp(Node a,Node b)&#123; return a.val&lt;b.val;&#125;int main()&#123; int n; scanf("%d",&amp;n); memset(c,0,sizeof(c)); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;temp[i].val); temp[i].pos=i; &#125; sort(temp,temp+n,cmp); for(int i=0;i&lt;n;i++)&#123; if(i==0||temp[i].val!=temp[i-1].val)&#123; A[temp[i].pos] = i+1; &#125;else&#123; A[temp[i].pos] = A[temp[i-1].pos]; &#125; &#125; for(int i=0;i&lt;n;i++)&#123; update(A[i],1); printf("%d\n",getSum(A[i]-1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LeetCode191. 位1的个数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode191-%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。 示例 :123输入: 11输出: 3解释: 整数 11 的二进制表示为 00000000000000000000000000001011 示例 2:123输入: 128输出: 1解释: 整数 128 的二进制表示为 00000000000000000000000010000000 1234567891011class Solution &#123;public: int hammingWeight(uint32_t n) &#123; int ans = 0; while(n)&#123; ans +=n%2; n/=2; &#125; return ans; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode121. 买卖股票的最佳时机]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。 注意你不能在买入股票前卖出股票。 示例 1:12输入: [7,1,5,3,6,4]输出: 5 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。示例 2:123输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 分析：考察贪心思想，分别找到价格最高最低和最高的一天，并且保证最低的一天在最高的一天之前12345678910111213class Solution &#123;public: int maxProfit(vector&lt;int&gt;&amp; prices) &#123; if(prices.size()&lt;2) return 0; int profit = 0; int minm = prices[0]; for(int i=1;i&lt;prices.size();i++)&#123; profit = max(profit,prices[i]-minm); minm = min(minm,prices[i]); &#125; return profit; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode104. 二叉树的最大深度]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例：12345678给定二叉树 [3,9,20,null,null,15,7]， 3 / \ 9 20 / \ 15 7返回它的最大深度 3 。 1234567891011121314151617/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: int maxDepth(TreeNode* root) &#123; if(root==NULL) return 0; return max(maxDepth(root-&gt;left),maxDepth(root-&gt;right))+1; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode100. 相同的树]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode100-%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%2F</url>
    <content type="text"><![CDATA[给定两个二叉树，编写一个函数来检验它们是否相同。 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。 示例 1:1234567输入: 1 1 / \ / \ 2 3 2 3 [1,2,3], [1,2,3]输出: true 示例 2:1234567输入: 1 1 / \ 2 2 [1,2], [1,null,2]输出: false 示例 3:1234567输入: 1 1 / \ / \ 2 1 1 2 [1,2,1], [1,1,2]输出: false 12345678910111213141516171819202122232425262728293031323334353637383940414243/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */ 递归写法：class Solution &#123;public: bool isSameTree(TreeNode* p, TreeNode* q) &#123; if(!p&amp;&amp;!q) return true; //终止 if(!p||!q) return false; //剪枝 return p-&gt;val==q-&gt;val&amp;&amp;(isSameTree(p-&gt;left,q-&gt;left))&amp;&amp;isSameTree(p-&gt;right,q-&gt;right); &#125;&#125;;迭代写法class Solution &#123;public: bool isSameTree(TreeNode* p, TreeNode* q) &#123; stack&lt;TreeNode*&gt; s; s.push(p); s.push(q); while(!s.empty())&#123; p = s.top(); s.pop(); q = s.top(); s.pop(); if(!p&amp;&amp;!q) continue; if(!p||!q) return false; if(p-&gt;val!=q-&gt;val) return false; s.push(p-&gt;left); s.push(q-&gt;left); s.push(p-&gt;right); s.push(q-&gt;right); &#125; return true; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode118. 杨辉三角]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%2F</url>
    <content type="text"><![CDATA[给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。 在杨辉三角中，每个数是它左上方和右上方的数的和。 示例:123456789输入: 5输出:[ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]] 规律： 第k层有k个元素 每层第一个和最后一个为1 对于第k(k&gt;2)层第n(n&gt;1&amp;&amp;n&lt;k)各元素有a[k][n] = a[k-1][n-1]+a[k-1][n]12345678910111213141516class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; generate(int numRows) &#123; vector&lt;vector&lt;int&gt; &gt; vals; vals.resize(numRows); for(int i=0;i&lt;numRows;i++)&#123; vals[i].resize(i+1); vals[i][0] = 1; vals[i][vals[i].size()-1] = 1; for(int j=1;j&lt;vals[i].size()-1;j++)&#123; vals[i][j] = vals[i-1][j-1]+vals[i-1][j]; &#125; &#125; return vals; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[余光中的诗]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E4%BD%99%E5%85%89%E4%B8%AD%E7%9A%84%E8%AF%97%2F</url>
    <content type="text"><![CDATA[我会爱上现代诗，很大程度上有余先生的功劳；而我会关注到余先生，很大程度上是我一位高中同学的功劳。先生是在17年12月走的，得知消息后，内心还是有些伤感，但很快也就释然，相信先生定然是坦然且无遗憾地离开了我们。和很多朋友一样，了解到先生还是因为学校教材里收录了的他的作品，一首《乡愁》，便传遍了大江南北，一篇散文《听听那冷雨》，让人惊叹，原来是可以这么唱，散文可以这么写。梁实秋曾评价余光中，右手写诗，左手写散文，成就之高，一时无两。但之后我并未再去深入了解先生的作品，直到高三。班里有位大高个，是我在高中认识并结交的为数不多的好友之一，大家都叫他发哥，估计是身材魁梧的原因吧。可你绝对想不到，这家伙外表粗犷，内心却极其细腻，他很爱读书和摄影。猛虎细嗅蔷薇的感觉，用来形容他再适合不过了。记得高三班里面，的确，每个人座位里，抽屉里全都堆满了书，但几乎全是辅导书，模拟题，这时，发哥时不时拿在手里细细品味的一本《余光中散文诗集》就吸引了我的注意力，我笑嘻嘻地求他借我也看看，温暖的发哥自然不会拒绝，就这样，我一点点地了解到了先生更多的作品。如今先生走了，我不知该怎么还念他，于是又拿起了当年买的他的一本诗集翻看阅读着，顺便摘录几篇自己很喜欢的，与大家共品。绝色美丽而善变的巫娘，那月亮翻译是她的特长却把世界译走了样把太阳的鎔金译成了流银把烈火译成了冰而且带点薄荷的风味凡尝过的人都说译文是全不可靠但比起原文来呢却更加神秘，更加美雪是另一位唯美的译者存心把世界译错或者译对，诗人说只因原文本来就多误所以每当雪姑乘著六瓣的降落伞在风里飞旋地降临这世界一夜之间比革命更彻底竟变得如此白净若逢新雪初霁，满月当空下面平铺著皓影上面流转著亮银而你带笑地向我步来月色与雪色之间你是第三种绝色不知月色加反光的雪色该如何将你的本色——已经够出色的了合译成更绝的艳色？ 寻李白痛饮狂歌空度日 飞扬跋扈为谁雄那一双傲慢的靴子至今还落在高力士羞愤的手里，人却不见了把满地的难民和伤兵把胡马和羌笛交践的节奏留给杜二去细细的苦吟自从那年贺知章眼花了认你做谪仙，便更加佯狂用一只中了魔咒的小酒壶把自己藏起来，连太太也寻不到你怨长安城小而壶中天长在所有的诗里你都预言会突然水遁，或许就在明天只扁舟破浪，乱发当风而今，果然你失了踪树敌如林，世人皆欲杀肝硬化怎杀得死你酒入豪肠，七分酿成了月光余下的三分啸成剑气绣口一吐，就半个盛唐从开元到天宝，从洛阳到咸阳冠盖满途车骑的嚣闹不及千年后你的一首水晶绝句轻叩我额头当地一弹挑起的回音一贬世上已经够落魄再放夜郎毋乃太难堪至今成谜是你的籍贯陇西或山东，青莲乡或碎叶城不如归去归哪个故乡凡你醉处，你说过，皆非他乡失踪，是天才唯一的下场身后事，究竟你遁向何处猿啼不住，杜二也苦劝你不住一回头囚窗下竟已白头七仙、五友，都救不了你了匡山给雾锁了，无路可入仍炉火未纯青，就半粒丹砂怎追蹑葛洪袖里的流霞樽中月影，或许那才是你故乡常得你一生痴痴地仰望而无论出门向东哭，向西哭长安却早已陷落这二十四万里的归程也不必惊动大鹏了，也无须招鹤只消把酒杯向半空一扔便旋成一只霍霍的飞碟诡绿的闪光愈转愈快接你回传说里去 今生今世我最忘情的哭声有两次一次，在我生命的开始一次，在你生命的告终第一次，我不会记得是听你说的第二次，你不会晓得我说也没用但这两次哭声的中间有无穷无尽的笑声一遍一遍又一遍回荡了整整30年你都晓得，我都记得 乡愁小时候 乡愁是一枚小小的邮票 我在这头 母亲在那头 长大後 乡愁是一张窄窄的船票 我在这头 新娘在那头 後来啊 乡愁是一方矮矮的坟墓 我在外头 母亲在□头 而现在 乡愁是一湾浅浅的海峡 我在这头 大陆在那头 等你，在雨中等你，在雨中，在造虹的雨中蝉声沉落，蛙声升起一池的红莲如红焰，在雨中 你来不来都一样，竟感觉每朵莲都像你尤其隔着黄昏，隔着这样的细雨 永恒，刹那，刹那，永恒等你，在时间之外，在时间之外，等你，在刹那，在永恒 如果你的手在我的手里，此刻如果你的清芬在我的鼻孔，我会说，小情人 诺，这只手应该采莲，在吴宫这只手应该摇一柄桂浆，在木兰舟中 一颗星悬在科学馆的飞檐耳坠子一般的悬着瑞士表说都七点了忽然你走来 步雨后的红莲，翩翩，你走来像一首小令从一则爱情的典故里你走来 从姜白石的词里，有韵地，你走来 白玉苦瓜似醒似睡，缓缓的柔光里似悠悠醒自歉年的大寐一只瓜从从容容在成熟一只苦瓜，不再是色苦日磨月磋琢出深孕的清莹看茎须缭绕，叶掌抚抱哪一年的丰收想一口要吸尽古中国喂了又喂的乳浆完满的圆腻啊酣然而饱那触角，不断向外膨胀充实每一粒酪白的葡萄直到瓜尖，仍翘着当日的新鲜 茫茫九州只缩成一张舆图小时候不知道将它叠起一任摊开那无穷无尽硕大似记忆母亲，她的胸脯你便向那片肥沃匍匐用蒂用根索她的恩液苦心的慈悲苦苦哺出不幸呢还是大幸这婴孩钟整个大陆的爱在一只苦瓜皮鞋踩过，马蹄踩过重吨战车的履带踩过一丝伤痕也不曾留下 只留下隔玻璃这奇迹难信犹带着后土依依的祝福在时光以外奇异的光中熟着，一个自足的宇宙饱满而不虞腐烂，一只仙果不产生在仙山，产在人间久朽了，你的前身，唉，久朽为你换胎的那手，那巧腕千眄万睐巧将你引渡笑对灵魂在白玉里流转一首歌，咏生命曾经是瓜而苦被永恒引渡，成果而甘 1974.2.11 下次的约会当我死时，你的名字，如最后一瓣花自我的唇上飘落。你的手指是一串串钥匙，玲玲珑珑握在我手中，让我开启让我豁然开启，哪一扇门？ 握你的手而死是幸运的听你说，你仍爱我，听你说凤凰死后还有凤凰春天死后还有春天，但至少有一个五月曾属于我们 每一根白发仍为你颤抖，每一根潇骚都记得旧时候，记得你踩过的地方绽几朵红莲你立的地方喷一株水仙你立在风中，裙也翩翩，发也翩翩 覆你的耳朵于我的胸膛听我的心说，它倦了，倦了它已经逾龄，为甄甄啊甄甄它跳得太强烈，跳得太频爱情给它太重的负荷，爱情 爱情的一端在此，另一端在原始。 上次约会在蓝田再上次，在洛水之滨在洪荒，在沧海，在星云的叆叆在记忆啊记忆之外，另一端爱情 下次的约会在何处，在何处？你说呢，你说，我依你（你可相信轮回，你可相信？）死亡的黑袖挡住，我看不清楚，可是嗯，我听见了，我一定去 听听那冷雨惊蛰一过，春寒加剧。先是料料峭峭，继而雨季开始，时而淋淋漓漓，时而淅淅沥沥，天潮潮地湿湿，即连在梦里，也似乎有把伞撑着。而就凭一把伞，躲过一阵潇潇的冷雨，也躲不过整个雨季。连思想也都是潮润润的。每天回家，曲折穿过金门街到厦门街迷宫式的长巷短巷，雨里风里，走入霏霏令人更想入非非。想这样子的台北凄凄切切完全是黑白片的味道，想整个中国整部中国的历史无非是一张黑白片子，片头到片尾，一直是这样下着雨的。这种感觉，不知道是不是从安东尼奥尼那里来的。不过那—块土地是久违了，二十五年，四分之一的世纪，即使有雨，也隔着千山万山，千伞万伞。十五年，一切都断了，只有气候，只有气象报告还牵连在一起，大寒流从那块土地上弥天卷来，这种酷冷吾与古大陆分担。不能扑进她怀里，被她的裙边扫一扫也算是安慰孺慕之情吧。 这样想时，严寒里竟有一点温暖的感觉了。这样想时，他希望这些狭长的巷子永远延伸下去，他的思路也可以延伸下去，不是金门街到厦门街，而是金门到厦门。他是厦门人，至少是广义的厦门人，二十年来，不住在厦门，住在厦门街，算是嘲弄吧，也算是安慰。不过说到广义，他同样也是广义的江南人，常州人，南京人，川娃儿，五陵少年。杏花春雨江南，那是他的少年时代了。再过半个月就是清明。安东尼奥尼的镜头摇过去，摇过去又摇过来。残山剩水犹如是，皇天后土犹如是。纭纭黔首、纷纷黎民从北到南犹如是。那里面是中国吗？那里面当然还是中国永远是中国。只是杏花春雨已不再，牧童遥指已不再，剑门细雨渭城轻尘也都已不再。然则他日思夜梦的那片土地，究竟在哪里呢？ 在报纸的头条标题里吗？还是香港的谣言里？还是傅聪的黑键白键马恩聪的跳弓拨弦？还是安东尼奥尼的镜底勒马洲的望中？还是呢，故宫博物院的壁头和玻璃柜内，京戏的锣鼓声中太白和东坡的韵里？ 杏花，春雨，江南。六个方块字，或许那片土就在那里面。而无论赤县也好神州也好中国也好，变来变去，只要仓颉的灵感不灭，美丽的中文不老，那形象那磁石一般的向心力当必然长在。因为一个方块字是一个天地。太初有字，于是汉族的心灵他祖先的回忆和希望便有了寄托。譬如凭空写一个“雨”字，点点滴滴，滂滂沱沱，淅淅沥沥，一切云情雨意，就宛然其中了。视觉上的这种美感，岂是什么rain也好pluie也好所能满足？翻开一部《辞源》或《辞海》，金木水火土，各成世界，而一入“雨”部，古神州的天颜千变万化，便悉在望中，美丽的霜雪云霞，骇人的雷电霹雹，展露的无非是神的好脾气与坏脾气，气象台百读不厌门外汉百思不解的百科全书。 听听，那冷雨。看看，那冷雨。嗅嗅闻闻，那冷雨，舔舔吧，那冷雨。雨在他的伞上这城市百万人的伞上雨衣上屋上天线上，雨下在基隆港在防波堤海峡的船上，清明这季雨。雨是女性，应该最富于感性。雨气空而迷幻，细细嗅嗅，清清爽爽新新，有一点点薄荷的香味，浓的时候，竟发出草和树林之后特有的淡淡土腥气，也许那竟是蚯蚓的蜗牛的腥气吧，毕竟是惊蛰了啊。也许地上的地下的生命也许古中国层层叠叠的记忆皆蠢蠢而蠕，也许是植物的潜意识和梦紧，那腥气。 第三次去美国，在高高的丹佛他山居住了两年。美国的西部，多山多沙漠，千里干旱，天，蓝似安格罗萨克逊人的眼睛，地，红如印第安人的肌肤，云，却是罕见的白鸟，落基山簇簇耀目的雪峰上，很少飘云牵雾。一来高，二来干，三来森林线以上，杉柏也止步，中国诗词里“荡胸生层云”或是“商略黄昏雨”的意趣，是落基山上难睹的景象。落基山岭之胜，在石，在雪。那些奇岩怪石，相叠互倚，砌一场惊心动魄的雕塑展览，给太阳和千里的风看。那雪，白得虚虚幻幻，冷得清清醒醒，那股皑皑不绝一仰难尽的气势，压得人呼吸困难，心寒眸酸。不过要领略“白云回望合，青露入看无”的境界，仍须来中国。台湾湿度很高，最饶云气氛题雨意迷离的情调。两度夜宿溪头，树香沁鼻，宵寒袭肘，枕着润碧湿翠苍苍交叠的山影和万缀都歇的俱寂，仙人一样睡去。山中一夜饱雨，次晨醒来，在旭日未升的原始幽静中，冲着隔夜的寒气，踏着满地的断柯折枝和仍在流泻的细股雨水，一径探入森林的秘密，曲曲弯弯，步上山去。溪头的山，树密雾浓，蓊郁的水气从谷底冉冉升起，时稠时稀，蒸腾多姿，幻化无定，只能从雾破云开的空处，窥见乍现即隐的一峰半堑，要纵览全貌，几乎是不可能的。至少上山两次，只能在白茫茫里和溪头诸峰玩捉迷藏的游戏。回到台北，世人问起，除了笑而不答心自问，故作神秘之外，实际的印象，也无非山在虚无之间罢了。云绦烟绕，山隐水迢的中国风景，由来予人宋画的韵味。那天下也许是赵家的天下，那山水却是米家的山水。而究竟，是米氏父子下笔像中国的山水，还是中国的山水上只像宋画，恐怕是谁也说不清楚了吧？ 雨不但可嗅，可亲，更可以听。听听那冷雨。听雨，只要不是石破天惊的台风暴雨，在听觉上总是一种美感。大陆上的秋天，无论是疏雨滴梧桐，或是骤雨打荷叶，听去总有一点凄凉，凄清，凄楚，于今在岛上回味，则在凄楚之外，再笼上一层凄迷了，饶你多少豪情侠气，怕也经不起三番五次的风吹雨打。一打少年听雨，红烛昏沉。再打中年听雨，客舟中江阔云低。三打白头听雨的僧庐下，这更是亡宋之痛，一颗敏感心灵的一生：楼上，江上，庙里，用冷冷的雨珠子串成。十年前，他曾在一场摧心折骨的鬼雨中迷失了自己。雨，该是一滴湿漓漓的灵魂，窗外在喊谁。 雨打在树上和瓦上，韵律都清脆可听。尤其是铿铿敲在屋瓦上，那古老的音乐，属于中国。王禹的黄冈，破如椽的大竹为屋瓦。据说住在竹楼上面，急雨声如瀑布，密雪声比碎玉，而无论鼓琴，咏诗，下棋，投壶，共鸣的效果都特别好。这样岂不像住在竹和筒里面，任何细脆的声响，怕都会加倍夸大，反而令人耳朵过敏吧。 雨天的屋瓦，浮漾湿湿的流光，灰而温柔，迎光则微明，背光则幽黯，对于视觉，是一种低沉的安慰。至于雨敲在鳞鳞千瓣的瓦上，由远而近，轻轻重重轻轻，夹着一股股的细流沿瓦槽与屋檐潺潺泻下，各种敲击音与滑音密织成网，谁的千指百指在按摩耳轮。“下雨了”，温柔的灰美人来了，她冰冰的纤手在屋顶拂弄着无数的黑键啊灰键，把晌午一下子奏成了黄昏。 在古老的大陆上，千屋万户是如此。二十多年前，初来这岛上，日式的瓦屋亦是如此。先是天黯了下来，城市像罩在一块巨幅的毛玻璃里，阴影在户内延长复加深。然后凉凉的水意弥漫在空间，风自每一个角落里旋起，感觉得到，每一个屋顶上呼吸沉重都覆着灰云。雨来了，最轻的敲打乐敲打这城市。苍茫的屋顶，远远近近，一张张敲过去，古老的琴，那细细密密的节奏，单调里自有一种柔婉与亲切，滴滴点点滴滴，似幻似真，若孩时在摇篮里，一曲耳熟的童谣摇摇欲睡，母亲吟哦鼻音与喉音。或是在江南的泽国水乡，一大筐绿油油的桑叶被啮于千百头蚕，细细琐琐屑屑，口器与口器咀咀嚼嚼。雨来了，雨来的时候瓦这幺说，一片瓦说千亿片瓦说，说轻轻地奏吧沉沉地弹，徐徐地叩吧挞挞地打，间间歇歇敲一个雨季，即兴演奏从惊蛰到清明，在零落的坟上冷冷奏挽歌，一片瓦吟千亿片瓦吟。 在旧式的古屋里听雨，听四月，霏霏不绝的黄梅雨，朝夕不断，旬月绵延，湿黏黏的苔藓从石阶下一直侵到舌底，心底。到七月，听台风台雨在古屋顶上一夜盲奏，千层海底的热浪沸沸被狂风挟挟，掀翻整个太平洋只为向他的矮屋檐重重压下，整个海在他的蝎壳上哗哗泻过。不然便是雷雨夜，白烟一般的纱帐里听羯鼓一通又一通，滔天的暴雨滂滂沛沛扑来，强劲的电琵琶忐忐忑忑忐忐忑忑，弹动屋瓦的惊悸腾腾欲掀起。不然便是斜斜的西北雨斜斜刷在窗玻璃上，鞭在墙上打在阔大的芭蕉叶上，一阵寒潮泻过，秋意便弥湿旧式的庭院了。 在旧式的古屋里听雨，春雨绵绵听到秋雨潇潇，从少年听到中年，听听那冷雨。雨是一种单调而耐听的音乐是室内乐是室外乐，户内听听，户外听听，冷冷，那音乐。雨是一种回忆的音乐，听听那冷雨，回忆江南的雨下得满地是江湖下在桥上和船上，也下在四川在秧田和蛙塘，—下肥了嘉陵江下湿布谷咕咕的啼声，雨是潮潮润润的音乐下在渴望的唇上，舔舔那冷雨。 因为雨是最最原始的敲打乐从记忆的彼端敲起。瓦是最最低沉的乐器灰蒙蒙的温柔覆盖着听雨的人，瓦是音乐的雨伞撑起。但不久公寓的时代来临，台北你怎么一下子长高了，瓦的音乐竟成了绝响。千片万片的瓦翩翩，美丽的灰蝴蝶纷纷飞走，飞入历史的记忆。现在雨下下来下在水泥的屋顶和墙上，没有音韵的雨季。树也砍光了，那月桂，那枫树，柳树和擎天的巨椰，雨来的时候不再有丛叶嘈嘈切切，闪动湿湿的绿光迎接。鸟声减了啾啾，蛙声沉了咯咯，秋天的虫吟也减了唧唧。七十年代的台北不需要这些，一个乐队接一个乐队便遣散尽了。要听鸡叫，只有去诗经的韵里找。现在只剩下一张黑白片，黑白的默片。 正如马车的时代去后，三轮车的伕工也去了。曾经在雨夜，三轮车的油布篷挂起，送她回家的途中，篷里的世界小得多可爱，而且躲在警察的辖区以外，雨衣的口袋越大越好，盛得下他的一只手里握一只纤纤的手。台湾的雨季这么长，该有人发明一种宽宽的双人雨衣，一人分穿一只袖子此外的部分就不必分得太苛。而无论工业如何发达，一时似乎还废不了雨伞。只要雨不倾盆，风不横吹，撑一把伞在雨中仍不失古典的韵味。任雨点敲在黑布伞或是透明的塑胶伞上，将骨柄一旋，雨珠向四方喷溅，伞缘便旋成了一圈飞檐。跟女友共一把雨伞，该是一种美丽的合作吧。最好是初恋，有点兴奋，更有点不好意思，若即若离之间，雨不妨下大一点。真正初恋，恐怕是兴奋得不需要伞的，手牵手在雨中狂奔而去，把年轻的长发的肌肤交给漫天的淋淋漓漓，然后向对方的唇上颊上尝凉凉甜甜的雨水。不过那要非常年轻且激情，同时，也只能发生在法国的新潮片里吧。 大多数的雨伞想不会为约会张开。上班下班，上学放学，菜市来回的途中。现实的伞，灰色的星期三。握着雨伞。他听那冷雨打在伞上。索性更冷一些就好了，他想。索性把湿湿的灰雨冻成干干爽爽的白雨，六角形的结晶体在无风的空中回回旋旋地降下来。等须眉和肩头白尽时，伸手一拂就落了。二十五年，没有受故乡白雨的祝福，或许发上下一点白霜是一种变相的自我补偿吧。一位英雄，经得起多少次雨季？他的额头是水成岩削成还是火成岩？他的心底究竟有多厚的苔藓？厦门街的雨巷走了二十年与记忆等长，—座无瓦的公寓在巷底等他，一盏灯在楼上的雨窗子里，等他回去，向晚餐后的沉思冥想去整理青苔深深的记忆。 前尘隔海。古屋不再。听听那冷雨。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 88. 合并两个有序数组]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。示例:12345输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6], n = 3输出: [1,2,2,3,5,6] 由于题目已经假定nums1有足够的空间，所以就很好解决了 12345678910class Solution &#123;public: void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) &#123; for(int i=m,j=0;i&lt;m+n,j&lt;n;i++,j++)&#123; nums1[i] = nums2[j]; &#125; int k = m+n; sort(nums1.begin(),nums1.end()); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 83. 删除排序链表中的重复元素]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。 示例 1:12输入: 1-&gt;1-&gt;2输出: 1-&gt;2 示例 2:12输入: 1-&gt;1-&gt;2-&gt;3-&gt;3输出: 1-&gt;2-&gt;3 123456789101112131415161718192021222324252627282930/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* deleteDuplicates(ListNode* head) &#123; if(!head)&#123; return head; &#125;//真正写的时候，链表为空一定不能漏了 int val = head-&gt;val; ListNode* p = head; while(p&amp;&amp;p-&gt;next)&#123; if(p-&gt;next-&gt;val!=val)&#123; val = p-&gt;next-&gt;val; p = p-&gt;next; &#125;else&#123; ListNode* n = p-&gt;next-&gt;next; p-&gt;next = n; &#125; &#125; return head; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 7. 反转整数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-7-%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:12输入: 123输出: 321 示例 2:12输入: -123输出: -321 示例 3:12输入: 120输出: 21 注意: 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31, 2^31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 这道题主要还是考察细节问题； 考虑负数的情况 考虑溢出，包括正溢出和负溢出，即如果是正数，则大于2147483647溢出；如果是负数，则小于-2147483648溢出1234567891011121314151617181920212223242526272829class Solution &#123;public: int reverse(int x) &#123; long long r = 0; long long t = x; if(t&lt;0)&#123; t=-t; &#125; for(;t;t/=10)&#123; r=r*10+t%10; &#125; bool sign; if(x&gt;0)&#123; sign = false; &#125; else&#123; sign =true; &#125; if(r&gt;2147483647||(sign&amp;&amp;r&gt;2147483648))&#123; return 0; &#125;else&#123; if(sign)&#123; return -r; &#125;else&#123; return r; &#125; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 69. x 的平方根]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-69-x-%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9%2F</url>
    <content type="text"><![CDATA[实现 int sqrt(int x) 函数。 计算并返回 x 的平方根，其中 x 是非负整数。 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。 示例 1:12输入: 4输出: 2 示例 2:12输入: 8输出: 2 说明: 8 的平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。 这道题明显就是考察二分，面试时你总不可能给面试官直接调用下sqrt函数吧 123456789101112131415161718192021222324252627 class Solution &#123;public: int mySqrt(int x) &#123; return sqrt(x); &#125;&#125;;class Solution &#123;public: int mySqrt(int x) &#123; int left = 1,right = x/2; int last_mid; if(x&lt;2) return x; while(left&lt;=right)&#123; const int mid = left+(right-left)/2; if(x/mid&gt;mid)&#123; left = mid+1; last_mid = mid; &#125;else if(x/mid&lt;mid)&#123; right = mid-1; &#125;else&#123; return mid; &#125; &#125; return last_mid; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 58. 最后一个单词的长度]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-58-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[给定一个仅包含大小写字母和空格 ‘ ‘ 的字符串，返回其最后一个单词的长度。 如果不存在最后一个单词，请返回 0 。 说明：一个单词是指由字母组成，但不包含任何空格的字符串。 示例:12输入: &quot;Hello World&quot;输出: 5 12345678910111213141516171819202122class Solution &#123;public: int lengthOfLastWord(string s) &#123; int len = 0,tag = 0; if(s.empty())&#123; return 0; &#125; for(int i=s.size()-1;i&gt;=0;i--)&#123; if(s[i]!=' ')&#123; len++; &#125; if((s[i]==' '||i==0)&amp;&amp;len!=0)&#123; return len; &#125; &#125; if(len==0)&#123; return 0; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 53. 最大子序和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例:123输入: [-2,1,-3,4,-1,2,1,-5,4],输出: 6解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。 进阶: 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。 这是一道很经典的算法问题了，很多算法书在讲到dp问题的时候都是作为一个范例了 思路1：暴力枚举，但是太low了，复杂度达到了O(n^3)量级，所以基本可以忽略 思路2：先预处理，因为连续子序列和等于两个前缀和之差，时间复杂度为O(n^2) 思路3：动态规划解法 思路4：分治法 我主要就了解了这几种，还有一些其他的优化解法没怎么学过。INT_MIN在标准头文件limits.h中定义。12#define INT_MAX 2147483647#define INT_MIN (-INT_MAX - 1) 动态规划解法转移方程：dp[i+1] = max(dp[i]+a[i+1])1234567891011class Solution &#123;public: int maxSubArray(vector&lt;int&gt;&amp; nums) &#123; int result = INT_MIN,f = 0; for(int i=0;i&lt;nums.size();i++)&#123; f = max(f + nums[i],nums[i]); result = max(result,f); &#125; return result; &#125;&#125;; 预处理解法1234567891011121314151617181920212223242526class Solution &#123;public: int maxSubArray(vector&lt;int&gt;&amp; nums) &#123; return deal(nums.begin(),nums.end()); &#125; private: template&lt;typename T&gt; static int deal(T begin,T end)&#123; int result,cur_min; const int n = distance(begin,end); int *sum = new int[n+1]; sum[0] = 0; result = INT_MIN; cur_min = sum[0]; for(int i=1;i&lt;=n;i++)&#123; sum[i] = sum[i-1]+*(begin + i - 1); &#125; for(int i=1;i&lt;=n;i++)&#123; result = max(result,sum[i]-cur_min); cur_min = min(cur_min,sum[i]); &#125; delete[] sum; return result; &#125;&#125;; 分治解法假设数组A[left, right]存在最大区间，mid = (left + right) / 2，那么无非就是三中情 况： 最大值在A[left, mid - 1]里面 最大值在A[mid + 1, right]里面 最大值跨过了mid，也就是我们需要计算[left, mid - 1]区间的最大值，以及[mid + 1, right]的最大值，然后加上mid，三者之和就是总的最大值 123456789101112131415161718192021222324252627282930class Solution&#123;public: int maxSubArray(int A[],int n)&#123; return divide(A,0,n-1,INT_MIN); &#125; int divide(int A[],int left,int right,int maxm)&#123; if(left&gt;right)&#123; return INT_MIN; &#125; int mid = left+(right-left)/2; int lmax = divide(A,left,mid-1,maxm); int rmax = divide(A,mid+1,right,maxm); maxm = max(maxm,lmax); maxm = max(maxm,rmax); int sum = 0; int mlmax = 0; for(int i=mid-1;i&gt;=left;i--)&#123; sum+=A[i]; mlmax = max(mlmax,sum); &#125; sum = 0; int mrmax = 0; for(int i = mid+1;i&lt;=right;i++)&#123; sum += A[i]; mrmax = max(mrmax,sum); &#125; maxm = max(maxm,A[mid]+mlmax+mrmax); return maxm; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 35. 搜索插入位置]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 你可以假设数组中无重复元素。 示例 1:12输入: [1,3,5,6], 5输出: 2 示例 2:12输入: [1,3,5,6], 2输出: 1 示例 3:12输入: [1,3,5,6], 7输出: 4 示例 4:12输入: [1,3,5,6], 0输出: 0 12345678910111213141516class Solution &#123;public: int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123; int index = 0; int x = nums.size(); if(nums[x-1]&lt;target)&#123; return x; &#125; for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]&gt;=target)&#123; index = i; return index; &#125; &#125; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 27. 移除元素]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1:123给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。示例 2:123给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。 注意这五个元素可为任意顺序。 你不需要考虑数组中超出新长度后面的元素。说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) { print(nums[i]);} 12345678910111213141516171819class Solution &#123;public: int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123; int index = 0; for(int i=0;i&lt;nums.size();i++)&#123; if(nums[i]!=val)&#123; nums[index++] = nums[i]; &#125; &#125; return index; &#125;&#125;;class Solution &#123;public: int removeElement(vector&lt;int&gt;&amp; nums, int val) &#123; return distance(nums.begin(),remove(nums.begin(),nums.end(),val)); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 26. 删除排序数组中的重复项]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1:123给定数组 nums = [1,1,2],函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。示例 2:123给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 你不需要考虑数组中超出新长度后面的元素。解法一：标记下标，然后遍历数组元素依次进行比较，出现不等元素就赋值给标记的下一个位置解法二：利用STL里的unique函数（由于给的是有序数组，所以可以直接用） unique()是C++标准库函数里面的函数，其功能是去除相邻的重复元素（只保留一个），所以使用前需要对数组进行排序 distance主要是用来求两个迭代器之间的元素个数。1234567891011121314151617181920class Solution &#123;public: int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123; if(nums.empty()) return 0; int pos = 0; for(int i=0;i&lt;nums.size()-1;i++)&#123; if(nums[i]!=nums[i+1])&#123; nums[++pos] = nums[i+1]; &#125; &#125; return pos+1; &#125;&#125;;class Solution &#123;public: int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123; return distance(nums.begin(),unique(nums.begin(),nums.end())); &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 21. 合并两个有序链表]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例：12输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 逐个比较大小，到后面较长的链表的多余元素直接补上12345678910111213141516171819202122232425262728293031323334/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; ListNode dummy(0); ListNode* p = &amp;dummy; while(l1&amp;&amp;l2)&#123; int val1 = l1-&gt;val; int val2 = l2-&gt;val; if(val1&lt;val2)&#123; p-&gt;next = l1; p = l1; l1 = l1-&gt;next; &#125;else&#123; p-&gt;next = l2; p = l2; l2 = l2-&gt;next; &#125; &#125; if(l1)&#123; p-&gt;next = l1; &#125;else if(l2)&#123; p-&gt;next = l2; &#125; return dummy.next; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 204. 计数质数]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-204-%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0%2F</url>
    <content type="text"><![CDATA[统计所有小于非负数整数 n 的质数的数量。 示例:123输入: 10输出: 4解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。 先预处理，不是素数的就标记出来123456789101112131415161718192021class Solution &#123;public: int countPrimes(int n) &#123; vector&lt;bool&gt; isPrime(n,true); for(int i=2;i*i&lt;n;i++)&#123; if(isPrime[i])&#123; for(int j=i*i;j&lt;n;j+=i)&#123; isPrime[j] = false; &#125; &#125; &#125; int cnt = 0; for(int i=2;i&lt;n;i++)&#123; if(isPrime[i])&#123; cnt++; &#125; &#125; return cnt; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 167. 两数之和 II - 输入有序数组]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-II-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。 函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。 说明: 返回的下标值（index1 和 index2）不是从零开始的。你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。示例:123输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。 12345678910111213141516171819class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) &#123; map&lt;int,int&gt; m; vector&lt;int&gt; result; for(int i=0;i&lt;numbers.size();i++)&#123; m[numbers[i]]=i; &#125; for(int i=0;i&lt;numbers.size();i++)&#123; const int gap = target-numbers[i]; if(m.find(gap)!=m.end()&amp;&amp;m[gap]&gt;i)&#123; result.push_back(i+1); result.push_back(m[gap]+1); break; &#125; &#125; return result; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 136.只出现一次的数字]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 示例 1:12输入: [2,2,1]输出: 1 示例 2:12输入: [4,1,2,1,2]输出: 4 分析，只有一个元素出现一次，其余均出现两次，可以想到异或运算符，遍历整个数组，出现两次的异或以后为0，最后自然只剩下了出现一次的。12345678910class Solution &#123;public: int singleNumber(vector&lt;int&gt;&amp; nums) &#123; int x = 0; for(int i=0;i&lt;nums.size();i++)&#123; x^=nums[i]; &#125; return x; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1.两数之和]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 法一：直接双重循环 暴力解，但会超时，O(n^2) 法二：哈希，用一个哈希表，存储每个数的对应下标，复杂度O(n) 12345678910111213141516171819class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; map&lt;int,int&gt; m; vector&lt;int&gt; result; for(int i=0;i&lt;nums.size();i++)&#123; m[nums[i]]=i; &#125; for(int i=0;i&lt;nums.size();i++)&#123; const int gap = target-nums[i]; if(m.find(gap)!=m.end()&amp;&amp;m[gap]&gt;i)&#123; result.push_back(i); result.push_back(m[gap]); break; &#125; &#125; return result; &#125;&#125;;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完全背包]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%2F</url>
    <content type="text"><![CDATA[完全背包问题有n种物品，每种物品的单件重量为w[i],价值为c[i]。现有一个容量为V的背包，问如何选取物品放入背包，使得背包内物品的总价值最大。其中每种物品都有无穷件。 完全背包与01背包的唯一区别：完全背包的物品数量每种有无穷件，而01背包的物品数量每种只有1件。 令dp[i][v]表示前i件物品恰好放入容量为v的背包中能获得的最大价值 对每种物品有两种策略： 不放第i件物品，那么dp[i][v] = dp[i-1][v] 放第i件物品。dp[i][v] = dp[i][v-w[i]]+c[i]由此得出状态转移方程：**dp[i][v] = max(dp[i-1][v],dp[i][v-w[i]]+c[i]) (1&lt;=i&lt;=n,w[i]&lt;=v&lt;=V)** 边界：dp[0][v] = 0(0&lt;=v&lt;=V) 改写成一维形式：**dp[v] = max(dp[v],dp[v-w[i]]+c[i]) (1&lt;=i&lt;=n,w[i]&lt;=v&lt;=V)** 边界：dp[v] = 0(0&lt;=v&lt;=V) 12345for(int i=1;i&lt;=n;i++)&#123; for(int v=w[i];v&lt;=V;v++)&#123; dp[v] = max(dp[v],dp[v-w[i]]+c[i]); &#125;&#125; 常见dp问题的模型总结 最大连续子列和令dp[i]表示以A[i]作为末尾的连续序列的最大和。 最长不下降子序列（LIS）令dp[i]表示以A[i]结尾的最长不下降子序列长度 最长公共子序列（LCS）令dp[i][j]表示字符串A的i号位和字符串B的j号位之前的LCS长度 最长回文子串令dp[i][j]表示S[i]至S[j]所表示的子串是否是回文子串 数塔dp令dp[i][j]表示从第i行第j个数字出发的到达最底层的所有路径上所能得到的最大和 DAG最长路令dp[i]表示从i号顶点出发能获得的最长路径长度 01背包令dp[i][v]表示前i件物品恰好放入容量为v的背包中能获得的最大价值 完全背包令dp[i][v]表示前i件物品恰好放入容量为v的背包中能获得的最大价值]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[01背包]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F01%E8%83%8C%E5%8C%85%2F</url>
    <content type="text"><![CDATA[01背包问题有n件物品，每件物品的重量为w[i]，价值为c[i]。现有一个容量为V的背包，问如何选取物品放入背包，使得背包内物品的总价值最大。其中每件物品都只有1件。样例：123455 8 //n,v3 5 1 2 2 //w[i]4 5 2 1 3 //c[i] 暴力枚举的想法枚举每一件物品放或者不放进背包，显然每件物品都有两种选择，因此n件物品就有2^n种情况，显然不是理想的解决方案 动态规划解法时间复杂度为O(nV) 令dp[i][v]表示前i件物品（1&lt;=i&lt;=n,0&lt;=v&lt;=V）恰好装入容量为v的背包中所能获得的最大价值。 考虑对第i件物品的选择策略，有两种策略： 不放第i件物品，那么问题转化为前i-1件物品恰好装入容量为v的背包中所能获得的最大价值，即dp[i-1][v] 放第i件物品，那么问题转化为前i-1件物品恰好装入容量为v-w[i]的背包中所能获得的最大价值，即dp[i-1][v-w[i]]+c[i] 由此得出状态转移方程： dp[i][v] = max{dp[i-1][v],dp[i-1][v-w[i]]+c[i]} (1&lt;=i&lt;=n,w[i]&lt;=v&lt;=V) 边界： dp[0][v] = 0(0&lt;=v&lt;=V)（即前0件物品放入任何容量为v的背包中都只能获得价值0） 12345for(int i=1;i&lt;=n;i++)&#123; for(int v=w[i];v&lt;=V;v++)&#123; dp[i][v] = max(dp[i-1][v],dp[i-1][v-w[i]]+c[i]); &#125;&#125; 这段代码时间复杂度与空间复杂度均为O(nV),其中时间复杂度无法优化，但空间复杂度可以优化的关键在于开一个一维数组dp[v]，枚举方向改变为i从1到n，v从V到0（逆序） 状态转移方程： dp[v] = max{dp[v],dp[v-w[i]]+c[i]} (1&lt;=i&lt;=n,w[i]&lt;=v&lt;=V) 12345for(int i=1;i&lt;=n;i++)&#123; for(int v=V;v&gt;=w[i];v--)&#123; dp[v] = max(dp[v],dp[v-w[i]]+c[i]); &#125;&#125; 此时空间复杂度为O(V)说明：如果是二维数组存放，v的枚举顺序或逆序皆可；但如果用一维数组存放，v的枚举必须为逆序 123456789101112131415161718192021222324252627282930313233#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 100;const int maxv = 1000;int w[maxn],c[maxn],dp[maxv];int main()&#123; int n,V; scanf("%d%d",&amp;n,&amp;V); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;w[i]); &#125; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c[i]); &#125; for(int v=0;v&lt;=V;v++)&#123; dp[v] = 0; &#125; for(int i=1;i&lt;=n;i++)&#123; for(int v=V;v&gt;=w[i];v--)&#123; dp[v] = max(dp[v],dp[v-w[i]]+c[i]); &#125; &#125; int max = 0; for(int v=0;v&lt;=V;v++)&#123; if(dp[v]&gt;max)&#123; max = dp[v]; &#125; &#125; printf("%d\n",max); return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 5. 最长回文子串]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FLeetCode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。 示例 1：123输入: &quot;babad&quot;输出: &quot;bab&quot;注意: &quot;aba&quot;也是一个有效答案。 示例 2：12输入: &quot;cbbd&quot;输出: &quot;bb&quot; 解决思路 1 —— 暴力枚举法暴力枚举法是这几种方法中最直观的求解，求解过程中分别以每个元素为中间元素（奇数为最中间的一个数，偶数为中间元素的其中一个），同时从左右出发，计算出最长的回文子串。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869class Solution &#123;public: string longestPalindrome(string s) &#123; int startIndex = 0; int endIndex = 0; // 保存最大回文子串的起始与终点位置 int resStart = 0; int resEnd = 0; int maxLen = 0; int countLen = 0; for(int i = 0; i &lt; s.size(); i++) &#123; /* 回文子串为奇串处理 */ startIndex = i; endIndex = i; countLen = 0; while(startIndex &gt;= 0 &amp;&amp; endIndex &lt; s.size()) &#123; if(s[startIndex] == s[endIndex]) &#123; if(startIndex == endIndex) &#123; countLen++; &#125; else &#123; countLen += 2; &#125; startIndex--; endIndex++; &#125; else &#123; break; &#125; &#125; // 当前回文子串大于上一次最大回文子串 if(countLen &gt; maxLen) &#123; maxLen = countLen; resStart = startIndex + 1; resEnd = endIndex - 1; &#125; /* 回文子串为奇串处理 */ startIndex = i-1; endIndex = i; countLen = 0; while(startIndex &gt;= 0 &amp;&amp; endIndex &lt; s.size()) &#123; if(s[startIndex] == s[endIndex]) &#123; if(startIndex == endIndex) &#123; countLen++; &#125; else &#123; countLen += 2; &#125; startIndex--; endIndex++; &#125; else &#123; break; &#125; &#125; // 当前回文子串大于上一次最大回文子串 if(countLen &gt; maxLen) &#123; maxLen = countLen; resStart = startIndex + 1; resEnd = endIndex - 1; &#125; &#125; return s.substr(resStart, resEnd - resStart + 1); &#125;&#125;; 复杂度分析 时间复杂度：最外层循环复杂度为O(n),内层两个循环的复杂度都为O(n/2),因此时间复杂度为O(n2)。 空间复杂度：在此算法中，没有使用额外的辅助空间，因此空间复杂度为O(1)。 解决思路 2 —— 记忆化搜索回文字符串的子串也是回文，我们可以将最长回文子串分解一系列子问题，使用动态规划求解。设状态f(i,j)表示区间[i,j]是否为回文串，f(i,j) = false表示子串[i,j]不是回文，f(i,j)=true表示子串[i,j]是回文串，则有以下的关系： 123456789101112131415161718192021222324252627282930313233343536class Solution&#123;public: string longestPalindrome(string s) &#123; int n; n = s.size(); bool **f = new bool*[n]; for(int i = 0; i &lt; n; i++) &#123; f[i] = new bool[n]; &#125; for(int i = 0; i &lt; n; i++) &#123; for(int j = 0; j &lt; n; j++) &#123; f[i][j] = false; &#125; &#125; int maxLen = 1; int start = 0; for(int i = 0; i &lt; s.size(); i++) &#123; f[i][i] = true; for(int j = 0; j &lt; i; j++) &#123; f[j][i] = (s[j] == s[i] &amp;&amp; (i-j &lt; 2 || f[j+1][i-1])); if(f[j][i] &amp;&amp; maxLen &lt; (i-j+1)) &#123; maxLen = i - j + 1; start = j; &#125; &#125; &#125; for(int i = 0; i &lt; n; i++) &#123; delete[] f[i]; &#125; delete[] f; return s.substr(start, maxLen); &#125;&#125;; 复杂度分析 时间复杂度：使用了两层循环,因此时间复杂度为O(n2)。 空间复杂度：使用了f[n][n]作为辅助空间，因此空间复杂度为O(n2)。 解决思路 3 —— Mancher’s AlgorithmMancher算法能够很快的得到一个字符串中以任意一个字符为中心的回文子串，其基本原理使用已知回文串的左半部分来推导有半部分。 我们使用rad[i]表示以第i个字符为中心的最长回文半径，假设我们求出了rad[0,…,i-1]的值，现在我们需要通过已知的结果计算出rad[i]的值，在此我们定义maxRight是i位置前所有回文串能延伸到的最右端位置，并且此时回文串的中心位置为k（取第一个达到最右端的位置），则我们可以得到maxRight = k + radk，可以有以下两种情况： 第一种情况：位置i不在前面的任何回文串中，即i &gt; maxRight,这时则初始化rad[i]=1，然后rad[i]向两边延伸，即 while(s[i+rad[i]] == s[i-rad[i]]) rad[i]++;第二种情况：i这个位置被前面位置k为中心的回文串包含，即i &lt;= maxRight，这种情况下rad[i]就不是从1开始。由回文串的性质，我们可以知道2k-i这个位置与i关于k对称，在这种情况下由可分为三种情形：第一种情形：以2k-i为中心的回文串有一部分在以i为中心回文串之外，这种情况下rad[i]=maxRight-i=k+rad[k]-i,即为图中空心箭头长度，那有没有可能rad[i]会更长呢？不可能，如果rad[i]会更长，则会延伸到k为中心的子串外，由于i和2k-i的对称性可得到k为中心的子串会大于图中紫色对应的半径，与已知矛盾。 第二种情形：以2k-i为中心的回文串在以i为中心回文串之内，此时rad[i]=rad[2k-i],那么这个时候rad[i]会更长吗？不可能，如果rad[i]长度更长，则延伸部分与2k-i正好对称，这个时候2k-i子串半径则大于图中蓝色箭头的长度，矛盾。 第三种情形：以2k-i为中心的回文串与i为中心回文串左端部重叠，则ran[i]=rad[2k-i],并且rad[i]可能继续增加，所以有:rad[i]=rad[2k-i];while(s[i+rad[i]] == s[i-rad[i]]) rad[i]++;上面的方法存在一个问题，就是只能计算出奇数长度的回文子串，偶数的就不行，怎么解决呢？这里使用一个比较好的方法，在原来的串中每两个字符之间添加一个特殊字符，如aabbaca变成^#a#a#b#b#a#c#a#$，这里^$作为字符串的定界符是为了防止算法越界。这样处理后，无论原来的回文子串长度是偶数还是奇数，现在都变成奇数了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution&#123;public: // 字符串预处理，如输入"abba",返回"^#a#b#b#a#$" string preProcess(string s) &#123; int n = s.size(); if(n == 0) return "^$"; string ret = "^"; for(int i = 0; i &lt; n; i++) ret += "#" + s.substr(i,1); ret+= "#$"; return ret; &#125; string longestPalindrome(string s) &#123; string tmpStr = preProcess(s); int n = tmpStr.size(); int *rad = new int[n]; int center = 0, maxRight = 0; for(int i = 1; i &lt; n - 1; i++) &#123; int sym_pos = 2 * center - i; rad[i] = (maxRight &gt; i) ? min(maxRight - i, rad[sym_pos]) : 1; // 以i为中心检索两边的字符串 while(tmpStr[i + rad[i]] == tmpStr[i - rad[i]]) rad[i]++; if(i + rad[i] &gt; maxRight) &#123; center = i; maxRight = i + rad[i]; &#125; &#125; // 寻找最长的半径 int maxLen = 0; int center_index = 0; for(int i = 1; i &lt; n-1; i++) &#123; if(rad[i] &gt; maxLen) &#123; maxLen = rad[i]; center_index = i; &#125; &#125; return s.substr((center_index - maxLen) / 2, maxLen-1); &#125;&#125;; 复杂度分析 时间复杂度：Mancher算法时间复杂度为O(n)。 空间复杂度：空间复杂度也为O(n)。]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长回文子串]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[最长回文子串问题描述：给出一个字符串S，求S的最长回文子串的长度。 暴力解法枚举子串的两个端点i和j，判断[i,j]区间内的子串是否回文。其中枚举端点需要O(n^2),判断回文需要O(n)因此总的复杂度为O(n^3) 动态规划解法时间复杂度为O(n^2)令dp[i][j]表示S[i]至S[j]所表示的子串是否是回文子串，是则为1，不是为0.根据S[i]是否等于S[j]，将转移情况分为两类： 若S[i]==S[j]，只要S[i+1]到S[j-1]是回文子串，那么S[i]到S[j]就是回文子串；否则，就不是。 若S[i]!=S[j]那么S[i]到S[j]一定不是回文子串。由此得出状态转移方程： dp[i][j]= dp[i+1][j-1],S[i]==S[j] 0,S[i]!=S[j]边界：dp[i][i] = 1,dp[i][i+1] = (S[i]==S[i+1)?1:0 但是不能按照i和j从小到大进行枚举子串两个端点然后更新dp[i][j]，因为无法保证dp[i+1][j-1]已经被计算过，从而无法得到正确的dp[i][j] 由于边界表示的是长度为1和2的子串，且每次转移时都对子串的长度减1，因此考虑按子串的长度和子串的初始位置进行枚举即第一遍将长度为3的子串的dp值全部求出，第二遍通过第一遍结果计算长度为4的子串的值12345678910111213141516171819202122232425262728293031#include&lt;cstdio&gt;#include&lt;cstring&gt;const int maxn = 1010;char S[maxn];int dp[maxn][maxn];int main()&#123; gets(S); int len = strlen(S),ans = 1; memset(dp,0,sizeof(dp)); for(int i=0;i&lt;len;i++)&#123; dp[i][i] = 1; if(i&lt;len-1)&#123; if(S[i]==S[i+1])&#123; dp[i][i+1] = 1; ans = 2; &#125; &#125; &#125; for(int t=3;t&lt;=len;t++)&#123; for(int i=0;i+t-1&lt;len;i++)&#123; int j = i+t-1; if(S[i]==S[j]&amp;&amp;dp[i+1][j-1]==1)&#123; dp[i][j] = 1; ans = t; &#125; &#125; &#125; printf("%d\n",ans); return 0;&#125; 字符串哈希+二分解法时间复杂度为O(nlogn)对给定的字符串str，可以先求出其字符串hash数组h1，然后再将str反转，求出反转字符串rstr的hash数组h2，接着按回文串的奇偶情况讨论 回文串的长度是奇数：枚举回文中心点i，二分子串的半径k，找到最大的使子串[i-k,i+k]是回文串的k。 回文串的长度是偶数：枚举回文空隙点，令i表示空隙左边第一个元素的下标，二分子串的半径k，找到最大的使子串[i-k+1,i+k]是回文串的k。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;const ll mod = 1000000007;const ll p = 10000019;const ll maxn = 200010;ll powp[maxn],h1[maxn],h2[maxn];void init()&#123; powp[0] = 1; for(int i=1;i&lt;maxn;i++)&#123; powp[i] = (powp[i-1]*p)%mod; &#125;&#125;void calh(ll h[],string &amp;str)&#123; h[0] = str[0]; for(int i=1;i&lt;str.length();i++)&#123; h[i] = (h[i-1]*p+str[i])%mod; &#125;&#125;int calSingleSubh(ll h[],int i,int j)&#123; if(i==0) return h[j]; return ((h[j]-h[i-1]*powp[j-i+1])%mod+mod)%mod;&#125;int binarySearch(int l,int r,int len,int i,int isEven)&#123; while(l&lt;r)&#123; int mid = (l+r)/2; int h1l = i-mid+isEven,h1r = i; int h2l = len-1-(i+mid),h2r = len-1-(i+isEven); int hashl = calSingleSubh(h1,h1l,h1r); int hashr = calSingleSubh(h2,h2l,h2r); if(hashl!=hashr) r=mid; else l=mid+1; &#125; return l-1;&#125;int main()&#123; init(); string str; getline(cin,str); calh(h1,str); reverse(str.begin(),str.end()); calh(h2,str); int ans = 0; for(int i=0;i&lt;str.length();i++)&#123; int maxlen = min(i,(int)str.length()-1-i)+1; int k = binarySearch(0,maxlen,str.length(),i,0); ans = max(ans,k*2+1); &#125; for(int i=0;i&lt;str.length();i++)&#123; int maxlen = min(i+1,(int)str.length()-1-i)+1; int k = binarySearch(0,maxlen,str.length(),i,1); ans = max(ans,k*2); &#125; printf("%d\n",ans); return 0;&#125; Manacher算法时间复杂度为O(n)算法分析：由于回文分为偶回文（比如 bccb）和奇回文（比如 bcacb），而在处理奇偶问题上会比较繁琐，所以这里我们使用一个技巧，具体做法是：在字符串首尾，及各字符间各插入一个字符（前提这个字符未出现在串里）。 举个例子：s=”abbahopxpo”，转换为s_new=”$#a#b#b#a#h#o#p#x#p#o#”（这里的字符 $ 只是为了防止越界，下面代码会有说明），如此，s 里起初有一个偶回文abba和一个奇回文opxpo，被转换为#a#b#b#a#和#o#p#x#p#o#，长度都转换成了奇数。 定义一个辅助数组int p[]，其中p[i]表示以 i 为中心的最长回文的半径p[i] - 1正好是原字符串中最长回文串的长度。 设置两个变量，mx 和 id 。mx 代表以 id 为中心的最长回文的右边界，也就是mx = id + p[id]。 假设我们现在求p[i]，也就是以 i 为中心的最长回文半径，如果i &lt; mx，如上图，那么：12if (i &lt; mx) p[i] = min(p[2 * id - i], mx - i); 2 * id - i为 i 关于 id 的对称点，即上图的 j 点，而p[j]表示以 j 为中心的最长回文半径，因此我们可以利用p[j]来加快查找。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cstring&gt;using namespace std;void findBMstr(string&amp; str)&#123; int *p = new int[str.size() + 1]; memset(p, 0, sizeof(p)); int mx = 0, id = 0; for(int i = 1; i &lt;= str.size(); i++) &#123; if(mx &gt; i) &#123; p[i] = (p[2*id - i] &lt; (mx - i) ? p[2*id - i] : (mx - i)); &#125; else &#123; p[i] = 1; &#125; while(str[i - p[i]] == str[i + p[i]]) p[i]++; if(i + p[i] &gt; mx) &#123; mx = i + p[i]; id = i; &#125; &#125; int max = 0, ii; for(int i = 1; i &lt; str.size(); i++) &#123; if(p[i] &gt; max) &#123; ii = i; max = p[i]; &#125; &#125; max--; int start = ii - max ; int end = ii + max; for(int i = start; i &lt;= end; i++) &#123; if(str[i] != '#') &#123; cout &lt;&lt; str[i]; &#125; &#125; cout &lt;&lt; endl; delete p;&#125;int main()&#123; string str = "12212321"; string str0; str0 += "$#"; for(int i = 0; i &lt; str.size(); i++) &#123; str0 += str[i]; str0 += "#"; &#125; cout &lt;&lt; str0 &lt;&lt; endl; findBMstr(str0); return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最长公共子序列]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[最长公共子序列最长公共子序列问题描述：给定两个字符串（或数字序列）A和B,求一个字符串，使得这个字符串是A和B的最长公共部分（子序列可以不连续） 暴力解法设字符串A和B的长度分别是n和m，那么对两个字符串中的每个字符，分别有选与不选两个决策，而得到子序列后比较两个子序列是否相同有需要O(max(m,n))，这样总的复杂度就会达到O(2^(m+n)*max(m,n))，无法承受较大数据 动态规划解法令dp[i][j]表示字符串A的i号位和字符串B的j号位之前的LCS长度（下标从1开始）两种决策如下： 若A[i]==B[j]则字符串A与字符串B的LCS增加了1位，即dp[i][j]=dp[i-1][j-1]+! 若A[i]!=B[j]，则字符串A的i号位和字符串B的j号位之前的LCS无法延长，因此dp[i][j]将会继承dp[i-1][j]与dp[i][j-1]z中的较大值，即dp[i][j]= max{dp[i-1][j],dp[i][j-1]} 由此可以得到状态转移方程：dp[i][j]= dp[i-1][j-1]+1,A[i]==B[j] max{dp[i-1][j],dp[i][j-1]},A[i]!=B[j]边界：dp[i][0]=dp[0][j]=0(0&lt;=i&lt;=n,0&lt;=j&lt;=m)时间复杂度为O(nm)12345678910111213141516171819202122232425262728293031#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int N = 100;char A[N],B[N];int dp[N][N];int main()&#123; int n; gets(A+1);//从下标为1开始读入 gets(B+1); int lenA = strlen(A+1); int lenB = strlen(B+1); for(int i=0;i&lt;=lenA;i++)&#123; dp[i][0] = 0; &#125; for(int j=0;j&lt;=lenB;j++)&#123; dp[0][j] = 0; &#125; for(int i=1;i&lt;=lenA;i++)&#123; for(int j=1;j&lt;=lenB;j++)&#123; if(A[i]==B[j])&#123; dp[i][j] = dp[i-1][j-1]+1; &#125;else&#123; dp[i][j] = max(dp[i-1][j],dp[i][j-1]); &#125; &#125; &#125; printf("%d\n",dp[lenA][lenB]); return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最长不下降子序列]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E9%95%BF%E4%B8%8D%E4%B8%8B%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[最长不下降子序列LIS问题：在一个数字序列中，找到一个最长的子序列（可以不连续），使得这个子序列是不下降的 原始方法枚举每种情况，即对于每个元素有取和不取两种选择，然后判断序列是否为不下降序列。如果是不下降序列，则更新最大长度，直到枚举完所有情况并得到最大长度。但这种做法时间复杂度将达到O(2^n)显然不可取 动态规划解法用dp[i]表示以A[i]结尾的最长不下降子序列长度，则A[i]有两种情况 如果存在A[i]之前的元素Aj，使得A[j]&lt;=A[i]且dp[j]+1&gt;dp[i]（即把A[i]跟以A[j]结尾的LIS后面时能比当前以A[i]结尾的LIS长度更长），那么就把A[i]跟在以A[j]结尾的LIS后面，形成一条更长的不下降子序列，（令dp[i]=dp[j]+1） 如果A[i]之前的元素都比A[i]大，那么A[i]就只好自己形成一条LIS,但是长度为1，即这个子序列里面只有一个A[i] 最后以A[i]结尾的LIS长度就是上述两点中能形成的最大长度 由此写出状态转移方程：dp[i] = max{1,dp[j]+1}(j=1,2,…i-1&amp;&amp;A[j]&lt;A[i])边界dp[i] = 1(1&lt;=i&lt;=n)整体复杂度为O(n^2)123456789101112131415161718192021222324#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int N = 100;int A[N],dp[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;A[i]); &#125; int ans = -1; for(int i=1;i&lt;=n;i++)&#123; dp[i] = 1; for(int j=1;j&lt;i;j++)&#123; if(A[i]&gt;=A[j]&amp;&amp;(dp[j]+1&gt;dp[i]))&#123; dp[i] = dp[j]+1; &#125; &#125; ans = max(ans,dp[i]); &#125; printf("%d",ans); return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最大连续子列和]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%88%97%E5%92%8C%2F</url>
    <content type="text"><![CDATA[最大连续子列和问题给定一个数字序列A1，A2，……An,求i，j(1&lt;=i&lt;=j&lt;=n),使得Ai+….Aj最大，输出这个最大和。 方法一：暴力枚举枚举左端点和右端点（即枚举i和j），需要O(n^2)的复杂度，求和有需要O(n)的复杂度，因此总复杂度为O(n^3) 方法二：预处理记录前缀和记S[i] = A[0]+A[1]….+A[i],这样A[i]+…+A[j] = S[j]-S[i-1];该计算的复杂度为O(1),但总的时间复杂度为O(n^2) 方法三：动态规划动态规划问题的核心与难点其实就在于确定状态和状态转移方程，以及边界分析。步骤一：确定状态令状态dp[i]表示以A[i]作为末尾的连续序列的最大和，因此所求最大和便是dp[0],dp[1],dp[2]…dp[n-1]中的最大值。步骤二：确定状态转移方程，求dp数组以A[i]结尾的连续序列只有两种情况 这个最大和的连续序列只有一个元素，即以A[i]开始，以A[i]结尾 这个最大和的连续序列有多个元素，即以A[p]开始，A[i]结尾第一种情况，最大和就是A[i]第二种情况，最大和是dp[i-1]+A[i]所以可以得到状态转移方程dp[i] = max{A[i],dp[i-1]+A[i]}边界为dp[0] = A[0]时间复杂度为O(n)12345678910111213141516171819202122232425#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 10010;int a[maxn],dp[maxn];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); &#125; dp[0] = a[0]; for(int i=1;i&lt;n;i++)&#123; dp[i] = max(a[i],dp[i-1]+a[i]); &#125; int k = 0; for(int i=1;i&lt;n;i++)&#123; if(dp[i]&gt;dp[k])&#123; k = i; &#125; &#125; printf("%d\n",dp[k]); return 0;&#125; 状态的无后效性状态的无后效性是指：当前状态记录了信息，一旦当前状态确定，就不会再改变，且未来的决策只能在已有的一个或若干个状态的基础上进行，历史信息只能通过已有的状态去影响未来的决策。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[dp简介]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2Fdp%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[动态规划的递归写法和递推写法动态规划是一种算法思想，没有固定写法，十分灵活，需要具体问题具体分析 动态规划是一种用来解决一类最优化问题的算法思想。即将一个复杂的问题分解成若干个子问题，通过综合子问题的最优解来得到原问题的最优解。动态规划会将每个求解过的子问题的解记录下来，这样当下一次碰到同样的子问题时，就可以直接使用之前记录的结果。 动态规划的递归写法以求解斐波那契数列为例f0=1,f1=1,f(n)=f(n-1)+f(n-2)(n&gt;=2)12345int f(int n)&#123; if(n==0||n==1) return 1; else return f(n-1)+f(n-2); &#125; 上述代码就涉及到了很多重复计算，严重增大了时间复杂度为了便重复计算，可以开一个dp数组，用来保存已经计算过的结果其中dp[n]表示f(n)的结果123456789int dp[maxn];int f(int n)&#123; if(n==0||n==1) return 1; if(dp[n]!=-1) return dp[n]; else&#123; dp[n] = f(n-1)+f(n-1); return dp[n]; &#125;&#125; 这种做法将复杂度由O(2^n)降到了O(n)，这也是名词记忆化搜索的由来。 动态规划的递推写法以数塔问题为例从顶部出发在每一个节点可以选择向左或者向右走，一直走到底层，要求找出一条路径，使得路径上的数字之和最大.不妨令dp[i][j]表示从第i行第j个数字出发的到达底层的所有路径中能得到的最大和。于是dp[1][1]就是dp[2][1]和dp[2][2]的较大值加上5即： dp[1][1] = max(dp[2][1],dp[2][2]+f[1][1]) 状态转移方程：dp[i][j] = max(dp[i+1][j],dp[i+1][j+1]+f[i][j])12345678910111213141516171819202122232425#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn = 1000;int f[maxn][maxn],dp[maxn][maxn];int main()&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; scanf("%d",&amp;f[i][j]); &#125; &#125; for(int j=1;j&lt;=n;j++)&#123; dp[n][j] = f[n][j]; &#125; for(int i=n-1;i&gt;=1;i--)&#123; for(int j=1;j&lt;=i;j++)&#123; dp[i][j] = max(dp[i+1][j],dp[i+1][j+1])+f[i][j]; &#125; &#125; printf("%d\n",dp[1][1]); return 0;&#125; 使用递推写法采用自底向上，即从边界开始，不断向上解决问题，直到解决目标问题使用递归写法采用自顶向下，即从目标问题开始，将她分解成子问题的组合，直到分解至边界为止 一个问题必须拥有重叠子问题和最优子结构，才能使用动态规划去解决 分治与动态规划：分治和动态规划都是讲问题分解成子问题，然后合并子问题的解得到原问题的解。但是分治法分解出的子问题时不重叠的，因此分治法解决的问题不拥有重叠子问题，而动态规划解决的问题拥有重叠子问题另外，分治法解决的问题不一定是最优化问题，而动态规划解决的一定是最优化问题 贪心和动态规划：贪心和动态规划都要求原问题必须拥有最优子结构。贪心并不等待子问题求解完毕后在选择使用哪一个，而是通过一种策略直接选择一个问题去求解，没被选择的子问题就不在去求解，直接抛弃。而动态规划不管是自底向上还是自顶向下，都是从边界开始向上得到目标问题的解。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[拓扑排序]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[有向无环图如果一个有向图的任意顶点都无法通过一些有向边回到自身，那么称这个有向图为有向无环图。 拓扑排序拓扑排序是将有向无环图G的所有顶点排成一个线性序列，使得对图G中的任意两个顶点u，v，如果存在边u-&gt;v,那么在序列中u一定在v前面。该序列被称为拓扑序列。求解拓扑序列： 定义一个队列q,并把所有入度为0的结点加入队列 取队首结点，输出。然后删去所有从它出发的边，并令这些边到达的顶点的入度减1，如果某个顶点的入度减为0，则将其加入队列。 反复进行2操作，直到队列为空。如果队列为空时入队的结点数目恰好为n，说明拓扑排序成功，图G为有向无环图；否则，拓扑排序失败，图G中有环。 123456789101112131415161718192021222324252627vector&lt;int&gt; G[maxv];int n,m,inDegree[maxv];bool topologicalSort()&#123; int num = 0; queue&lt;int&gt; q; for(int i=0;i&lt;n;i++)&#123; if(inDegree[i]==0)&#123; q.push(i); &#125; &#125; while(!q.empty())&#123; int u = q.front(); printf("%d ",u); q.pop(); for(int i=0;i&lt;G[u].size();i++)&#123; int v = G[u][i]; inDegree[v]--; if(inDegree[v]==0)&#123; q.push(v); &#125; &#125; G[u].clear(); num++; &#125; if(num==n) return true; else return false;&#125; 用拓扑排序可以判断一个給定的图是否为有向无环图。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最小生成树]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%2F</url>
    <content type="text"><![CDATA[最小生成树最小生成树（MST）是在一个給定的无向图G(v,e)中求一棵树T，使得这棵树拥有图G中的所有顶点，且所有边都是来自图G中的边，并且满足整棵树的边权之和最小。 三个重要性质 最小生成树是树，因此其边数等于顶点数减1，且树内一定不会有环。 对給定的图G（v,e），其最小生成树可以不唯一，但其边权之和一定是唯一的。 由于最小生成树是在无向图中生成的，因此其根结点可以是这棵树上的任意一个结点，于是，如果题目中涉及最小生成树本身的输出，为了让最小生成树唯一，一般都会直接给出根结点。 求最小生成树一般有两种算法，即prim算法和kruskal算法。这两种算法均采用了贪心的思想。 prim算法基本思想：对图G（v，e）设置集合s，存放已被访问的顶点，然后每次从集合v-s中选择与集合s的最短距离最小的一个顶点（记为u）访问并加入集合s。之后，令顶点u为中介点，优化所有从u能到达的顶点v与集合s之间的最短距离。这样的操作执行n次，直到集合s已包含所有顶点。其实思路与Dijstra算法类似。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const int maxv = 1000;const int inf = 0x3f3f3f3f;//邻接矩阵写法int n,g[maxv][maxv];int d[maxv];bool vis[maxv] = &#123;false&#125;;int prim()&#123;//默认0为初始点，返回最小生成树边权之和 fill(d,d+maxv,inf); d[0] = 0; int ans = 0; for(int i=0;i&lt;n;i++)&#123; int u=-1,minm = inf; for(int j=0;j&lt;n;j++)&#123; //找到未被访问的顶点中d[]最小的 if(vis[j]==false&amp;&amp;d[j]&lt;minm)&#123; u = j; minm = d[j]; &#125; &#125; //找不到小于inf的d[u],则剩下的顶点和集合s不连通 if(u==-1) return -1; vis[u] = true; ans+= d[u]; for(int v=0;v&lt;n;v++)&#123;//v未被访问&amp;&amp;u能到达v&amp;&amp;以u为中介点可以使v离集合s更近 if(vis[v]==false&amp;&amp;g[u][v]!=inf&amp;&amp;g[u][v]&lt;d[v])&#123; d[v] = g[u][v]; &#125; &#125; &#125; return ans;&#125;//邻接表写法struct Node&#123; int v,dis;&#125;;vector&lt;Node&gt; Adj[maxv];int n;int d[maxv];bool vis[maxv] = &#123;false&#125;;int prim()&#123; fill(d,d+maxv,inf); d[0] = 0; int ans = 0; for(int i=0;i&lt;n;i++)&#123; int u=-1,minm = inf; for(int j=0;j&lt;n;j++)&#123; if(vis[j]==false&amp;&amp;d[j]&lt;minm)&#123; u = j; minm = d[j]; &#125; &#125; if(u==-1) return -1; vis[u] = true; ans+ = d[u]; for(int j=0;j&lt;Adj[u].size();j++)&#123; int v=Adj[u][j].v; if(vis[v]==false&amp;&amp;Adj[u][j]&lt;div)&#123; d[v] = g[u][[v]; &#125; &#125; &#125; return ans;&#125; kruskal算法kruskal算法采用的是边贪心的策略基本思想：在初始状态时隐去图中的所有边，这样图中每个顶点都自成一个连通块。之后执行如下步骤： 对所有边按边权从小到大排序 按边权从小到大测试所有边，如果当前测试边所连接的两个顶点不在同一个连通块中，则把这条测试边加入到当前最小生成树中；否则，将边舍弃 执行步骤2，直到最小生成树中的边数等于总顶点数减1或是测试完所有边时结束。当结束时如果最小生成树的边数小于总顶点数减1，说明该图不连通。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748struct edge&#123; int u,v; int cost;//边权&#125;e[maxe];bool cmp(edge a,edge b)&#123; return a.cost&lt;b.cost;&#125;伪代码int kruskal()&#123; 令最小生成树的边权之和为ans，最小生成树的当前边数为Num_Edge; 将所有边按边权从小到大排序; for(从小到大枚举所有边)&#123; if(当前测试边的两个端点在不同的连通块中)&#123; 将该测试边加入最小生成树中; ans+=测试边的边权; 最小生成树的当前边数为Num_Edge+1; 当边数Num_Edge等于顶点数减1时结束循环; &#125; &#125; return ans;&#125;其中 并查集可以通过查询两个结点所在集合的根结点是否相同来判断他们是否在同一个集合而只要把测试边的两个端点所在集合合并，就能达到将边加入最小生成树的效果int father[n];int findfather(int x)&#123; &#125;int kruskal()&#123; int ans = 0,Num_Edge = 0; for(int i=1;i&lt;=n;i++)&#123; father[i] = i; &#125; sort(e,e+m,cmp); for(int i=0;i&lt;m;i++)&#123; int fau = findfather(e[i].u); int fav = findfather(e[i].v); if(fau!=fav)&#123; father[fau] = fav; ans += e[i].cost; Num_Edge++; if(Num_Edge==n-1) break; &#125; &#125; if(Num_Edge!=n-1) return -1; else return ans;&#125; kruskal算法的时间复杂度主要来源于对边进行排序所以其时间复杂度为O(eloge)综合来看：如果是稠密图（边多），则用prim算法；如果是稀疏图（边少），则用kruskal算法]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最短路问题]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最短路径最短路径是图论中的一个经典问题：给定图G(v,e)，求一条从起点到终点的路径，使得这条路径上经过的所有边的边权之和最小。 即解决如下问题：对任意给出的图G（v，e）和起点s，终点t，如何求从s到t的最短路径解决最短路径的常用算法有Dijkstra算法、Bellman-Ford算法，SPFA算法和Floyd算法 Dijstra算法Dijstra算法用来解决单源最短路问题，即给定图G和起点s，通过算法得到s到达其他每个顶点的最短距离。基本思想：对图G（v，e）设置集合s，存放已被访问的顶点，然后每次从集合v-s中选择与起点s的最短距离最小的一个顶点（记为u），访问并加入集合s。之后，令顶点u为中介点，优化起点s与所有从u能到达的顶点v之间的最短距离。这样的操作执行n次，直到集合s已包含所有顶点。算法策略：设置集合s存放已被访问的顶点，然后执行n次下面的两个步骤 每次从集合v-s中选择与起点s的最短距离最小的一个顶点（记为u），访问并加入集合s 之后，令顶点u为中介点，优化起点s与所有从u能到达的顶点v之间的最短距离 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071伪代码Dijkstra(G,d[],s)&#123; 初始化; for(循环n次)&#123; u = 使d[u]最小的还未被访问的顶点的标号; 记u已被访问; for(从u出发能到达的所有顶点v)&#123; if(v未被访问&amp;&amp;以u为中介点使s到顶点v的最短距离d[v]更优)&#123; 优化d[v]; &#125; &#125; &#125;&#125;//邻接矩阵版const maxv = 1000;const int inf = 0x3fffffff;int n,G[maxv][maxv];int d[maxv];bool vis[maxv]=&#123;false&#125;;void Dijstra(int s)&#123; fill(d,d+maxv,inf);//fill函数将整个d数组赋值为inf d[s] = 0; for(int i = 0;i &lt; n; i++)&#123; int u = -1,minm = inf; for(int j = 0; j&lt;n; j++)&#123; if(vis[j]==false&amp;&amp;d[j]&lt;minm)&#123; u=j; minm = d[j]; &#125; &#125; if(u==-1) return ; vis[u] = true; for(int v = 0;v&lt;n;v++)&#123; if(vis[v] == false&amp;&amp;G[u][v]!=inf&amp;&amp;d[u]+G[u][v]&lt;d[v])&#123; d[v] = d[u]+G[u][v]; &#125; &#125; &#125;&#125;//邻接表版struct Node&#123; int v,dis; &#125;;vector&lt;Node&gt; Adj[maxv];int n;int d[maxv];bool vis[maxv] = &#123;false&#125;;void Dijstra(int s)&#123; fill(d,d+maxv,inf); d[s] = 0; for(int i=0;i&lt;n;i++)&#123; int u=-1,minm=inf; for(int j=0;j&lt;n;j++)&#123; if(vis[j]==false&amp;&amp;d[j]&lt;minm)&#123; u=j; minm=d[j]; &#125; &#125; if(u==-1) return; vis[u] = true; for(int j=0;j&lt;Adj[u].size();j++)&#123; int v = Adj[u][j].v; if(vis[v]==false&amp;&amp;d[u]+Adj[u][j].dis&lt;d[v])&#123; d[v] = d[u] + Adj[u][j].dis; &#125; &#125; &#125;&#125; Bellman-Ford算法Dijstra算法可以很好地解决无负权图的最短路径问题，但如果出现了负权边，Dijstra算法会失效。Bellman-Ford和Dijstra一样，也可以解决单源最短路径问题，同时能处理有负权边的情况。 由于Bellman-Ford算法需要遍历所有边，所以使用邻接表会比邻接矩阵方便1234567891011121314151617181920212223242526272829303132struct Node&#123; int v,dis;//v为邻接边的目标顶点，dis为邻接边的边权&#125;;vector&lt;Node&gt; Adj[maxv]; //图G的邻接表int n;//n为顶点数，maxv为最大顶点数int d[maxv]; //起点到达各边的最短路径长度bool Bellman(int s)&#123; fill(d,d+maxv,inf); d[s]=0; for(int i=0;i&lt;n-1;i++)&#123; for(int u=0;u&lt;n;u++)&#123; for(int j=0;j&lt;Adj[u].size();j++)&#123; int v=Adj[u][j].v; int dis=Adj[u][j].dis; if(d[u]+dis&lt;d[v])&#123; d[v]=d[u]+dis; &#125; &#125; &#125; &#125; // 以下为判断负环的代码 for(int u=0;u&lt;n;u++)&#123; for(int j=0;j&lt;Adj[u].size();j++)&#123; int v=Adj[u][j].v; int dis=Adj[u][j].dis; if(d[u]+dis&lt;d[v])&#123; return false; &#125; &#125; &#125; return true;&#125; 由于Bellman-Ford算法的时间复杂度达到了O(ve),这并不如意，所以需要进行优化，Bellman-Ford的每轮操作都需要操作所有边，这其中会有大量无意义操作，严重影响了算法性能。由于，只有当某个顶点u的d[u]值改变时，从它出发的邻接点v的d[v]值才有可能被改变。所以可以如下优化：建立一个队列，每次将队首顶点u取出，然后对从u出发的所有边u-&gt;v进行松弛操作，即判断d[u]+length[u-&gt;v]&lt;d[v]是否成立，如果成立，则用d[u]+length[u-&gt;v]覆盖d[v];如果v不在队列中，就把v加入队列。这样操作直到队列为空（说明图中没有从源点可达的负环），或某个顶点的入队次数超过v-1（说明图中存在从源点可达的负环） SPFA算法上述被优化后的算法即为SPFA算法，期望时间复杂度为O(ve)但如果图中有从源点可达的负环，则SPFA的时间复杂度又会退化为O(ve)1234567891011121314151617181920212223242526272829303132vector&lt;Node&gt; ADj[maxv];int n,d[maxv],num[maxv];bool inq[maxv];bool SPFA(int s)&#123; memset(inq,false,sizeof(inq)); memset(num,0,sizeof(num)); fill(d,d+maxv,inf); queue&lt;int&gt; q; q.push(s); inq[s]=true; num[s]++; d[s]=0; while(q.empty())&#123; int u=q.front(); q.pop(); inq[u]=false; for(int j=0;j&lt;Adj[u].size();j++)&#123; int v=Adj[u][j].v; int dis=Adj[u][j].dis; if(d[u]+dis&lt;d[v])&#123; d[v]=d[u]+dis; if(!inq[v])&#123; q.push(v); inq[v]=true; num[v]++; if(num[v]&gt;=n) return false; &#125; &#125; &#125; &#125; return true;&#125; Flord算法Flord算法用来解决全源最短路问题。即对給定的图G（v,e），求任意两点u，v之间的最短路径长度，时间复杂度为O(n^3)所以顶点数要限制约在200以内。用邻接矩阵来实现Flord算法比较合适。123456789101112131415161718192021222324252627282930313233343536373839#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int inf =0x3f3f3f3f;const int maxv =200;int n,m;int dis[maxv][maxv];void Flord()&#123; for(int k=0;k&lt;n;k++)&#123; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; if(dis[i][k]!=inf&amp;&amp;dis[k][j]!=inf&amp;&amp;dis[i][k]+dis[k][j]&lt;dis[i][j])&#123; dis[i][j]=dis[i][k]+dis[k][j]; &#125; &#125; &#125; &#125;&#125;int main()&#123; int u,v,w; fill(dis[0],dis[0]+maxv*maxv,inf); scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;n;i++)&#123; dis[i][i]=0; &#125; for(int i=0;i&lt;m;i++)&#123; scanf("%d%d%d",&amp;u,&amp;v,&amp;w); dis[u][v]=w; &#125; Flord(); for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; printf("%d ",dis[i][j]); &#125; printf("\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[图的存储和遍历]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E5%92%8C%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[图的存储图的存储一般有两种方式：邻接矩阵和邻接表 邻接矩阵设图G(V,E)的顶点标号为0,1，……n-1，则令二维数组G[n][n]的两维分别表示图的顶点标号。即如果G[i][j]等于1，指顶点i和顶点j之间有边，如果G[i][j]等于0，指顶点i和顶点j之间没有边，如果为有权图，则令G[i][j]存放边权。但如果题目中顶点数过大，可能会造成内存超限。 邻接表图的常用储存结构之一，由表头结点和表结点两部分组成，其中表头结点存储图的各顶点，表结点用单向链表存储表头结点所对应顶点的相邻顶点（也就是表示了图的边）。在有向图里表示表头结点指向其它结点（a-&gt;b）,无向图则表示与表头结点相邻的所有结点（a—b） 123456789101112131415161718//表头结点（表示图的顶点） struct vnode&#123; char data; //顶点数据，这里用字符表示 struct arcnode * firstarc; //指针指向第一条边 &#125;; //表结点（表示图的边） struct arcnode&#123; int wt; //权重 int adjvex; //顶点下标 struct arcnode *nextarc; //指针指向下一条边 &#125;; typedef struct arcnode * Arc; //图 struct mgraph&#123; struct vnode vexs[100]; int vexsnum,arcnum; //顶点数，边数 &#125; *g; typedef struct mgraph* Graph; 图的遍历用DFS遍历图沿着一条路径直到无法继续前进，才退回到路径上离当前顶点最近的还存在未访问分支顶点的岔道口，并前往访问那些未访问的分支节点，直至遍历完成 连通分量：在无向图中，如果两个顶点可以互相到达，则称这两个顶点连通，如果图G（V，E）的任意两个顶点都连通，则称图G为连通图，否则，称图G为非连通图，且称其中的极大连通子图为连通分量。 强连通分量：在有向图中，如果两个顶点可以各自通过一条有向路径到达另一个顶点，则称这两个顶点强联通。如果一个图的任意两个顶点都强联通，则称这个图为强连通图；否则这个图为非强连通图，且称其中的极大连通子图为强联通分量。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152伪代码DFS(u)&#123; vis[u]=true; for(从u出发能到达的所有顶点v) if(vis[v]==false) DFS(v);&#125;DFSTrave(G)&#123; for(G的所有顶点u) if(vis[u]==false) DFS(u);&#125;邻接矩阵实现const int maxv=1000;const int inf=1000000;int n,G[maxv][maxv];bool vis[maxv]=&#123;false&#125;;void dfs(int u,int depth)&#123; vis[u]=true; for(int v=0;v&lt;n;v++)&#123; if(vis[v]==false&amp;&amp;G[u][v]!=inf)&#123; dfs(v,depth+1); &#125; &#125;&#125;void dfstrave()&#123; for(int u=0;u&lt;n;u++)&#123; if(vis[u]==false)&#123; dfs(u,1); &#125; &#125;&#125;邻接表实现vector&lt;int&gt; Adj[maxv];int n;bool vis[maxv] = &#123;false&#125;;void dfs(int u,int depth)&#123; vis[u] =true; for(int i=0;i&lt;Adj[u].size();i++)&#123; int v=Adj[u][i]; if(vis[v]==false)&#123; dfs(v,depth+1); &#125; &#125;&#125;void dfstrave()&#123; for(int u=0;u&lt;n;u++)&#123; if(vis[u]==false)&#123; dfs(u,1); &#125; &#125;&#125; 用BFS遍历图类似树的遍历，遍历图需要使用一个队列，通过反复取出队首顶点，将该顶点可到达的未曾加入过队列的顶点全部入队，直到队列为空时遍历结束。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172伪代码BFS(u)&#123; queue q; inq[u]=true; while(q非空)&#123; 取出q的队首元素加以访问; for(从u出发能到达的所有顶点v) if(inq[v]==false)&#123; 将v入队; inq[v]=true; &#125; &#125;&#125;BFSTrave(G)&#123; for(G的所有顶点u) if(inq[u]==false) &#123; BFS(u); &#125;&#125;邻接矩阵实现int n,G[maxv][maxv];bool inq[maxv]=&#123;false&#125;;void BFS(int u)&#123; queue&lt;int&gt; q; q.push(u); inq[u]=true; while(!q.empty())&#123; int u.q.front(); q.pop(); for(int v=0;v&lt;n;v++)&#123; if(inq[v]==false&amp;&amp;G[u][v]!=inf)&#123; q.push(v); inq[v]=true; &#125; &#125; &#125;&#125;void BFSTrave()&#123; for(int u=0;u&lt;n;u++)&#123; if(inq[u]==false)&#123; BFS(q); &#125; &#125;&#125;邻接表实现vector&lt;int&gt; Adj[maxv];int n;bool inq[maxv]=&#123;false&#125;;void BFS(int u)&#123; queue&lt;int&gt; q; q.push(u); inq[u]=true; while(!q.empty())&#123; int u=q.front(); q.pop(); for(int i=0;i&lt;Adj[u].size();i++)&#123; int v=Adj[u][i]; if(inq[v]==false)&#123; q.push(v); inq[v]=true; &#125; &#125; &#125;&#125;void BFSTrave()&#123; for(int u=0;u&lt;n;u++)&#123; if(inq[u]==false)&#123; BFS(q); &#125; &#125;&#125; 例子：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt; using namespace std; typedef struct &#123; int edges[100][100];///邻接矩阵 int n; int e; &#125;graph; bool vis[100];///访问数组 void creategraph(graph &amp;G) &#123; int i,j; int s,t; int v; for(i=0;i&lt;G.n;i++) &#123; for(j=0;j&lt;G.n;j++) &#123; G.edges[i][j]=0;///邻接表初始化 &#125; vis[i]=false;///访问数组初始化 &#125; for(i=0;i&lt;G.e;i++) &#123; cin&gt;&gt;s&gt;&gt;t&gt;&gt;v;///读入顶点数边数和权值 G.edges[s][t]=v;///赋值 &#125; &#125; void dfs(graph G,int v) &#123; int i; printf("%d ",v); vis[v]=true;///访问第v个定点，并将访问数组置为true for(i=0;i&lt;G.n;i++) &#123; if(G.edges[v][i]!=0&amp;&amp;vis[i]==false) &#123; dfs(G,i);///如果i未被访问递归调用dfs &#125; &#125; &#125; void bfs(graph G,int v) &#123; queue&lt;int&gt;Q; printf("%d ",v); vis[v]=true; Q.push(v); while(!Q.empty()) &#123; int i,j; i=Q.front();///取队头元素 Q.pop();///队头元素出队 for(j=0;j&lt;G.n;j++) &#123;///检查所有邻接点 if(G.edges[i][j]!=0&amp;&amp;vis[j]==false) &#123; printf("%d ",j); vis[j]=true; Q.push(j); &#125; &#125; &#125; &#125; int main() &#123; int n,e; while(1) &#123; puts("输入图的顶点数和边数："); cin&gt;&gt;n&gt;&gt;e; graph G; G.n=n; G.e=e; creategraph(G); puts("输出深度优先遍历序列："); dfs(G,0); puts("\n"); creategraph(G); puts("输出广度优先遍历序列："); bfs(G,0); puts("\n"); &#125; return 0; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[堆的简介]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%A0%86%E7%9A%84%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[堆的定义与基本操作堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子结点的值。如果父亲结点的值大于或等于孩子结点的值，则称这样的堆为大顶堆，这时每个结点的值都是以它为根结点的子树的最大值；如果父亲结点的值小于或等于孩子结点的值，则称这样的堆为小顶堆，这时每个结点的值都是以它为根结点的子树的最小值。堆一般用于优先队列的实现，优先队列实现默认使用大顶堆。 建堆用数组来存储完全二叉树，则结点就按层序存储于数组中，其中第一个结点存于数组中的1号位，第i号结点的左孩子为2i，右孩子为2i+1建堆采用结点向下调整的方法：如果结点存在，总是将当前结点V与它的左右孩子进行比较，，假如孩子中存在权值比结点V大的，就将其中权值最大的那个孩子结点与结点V交换。交换完毕后继续让结点V和孩子比较，直到结点V的孩子的权值都比结点V的权值小或是结点V不存在孩子结点时间复杂度O(logn)1234567891011121314151617181920212223242526const int maxn=100;int heap[maxn],n=10;//对heap数组在[low,high]范围进行向下调整//low为欲调整结点的数组下标，high为堆的最后一个元素的数组下标void downAdjust(int low,int high)&#123; int i=low,j=i*2; while(j&lt;=high)&#123; if(j+1&lt;=high&amp;&amp;heap[j+1]&gt;heap[j])&#123; i=j+1; &#125; if(heap[j]&gt;heap[i])&#123; swap(heap[j]&gt;heap[i]); i=j; j=i*2; &#125; else&#123; break; &#125; &#125;&#125;//建堆 void createHeap()&#123; for(int i=n/2;i&gt;=1;i--)&#123; downAdjust(i,n); &#125; &#125; 删除堆顶元素1234void deleteTop()&#123; heap[1]=heap[n--]; downAdjust(1,n);&#125; 往堆里添加一个元素12345678910111213141516void UpAdjust(int low,int high)&#123; int i=high,j=i/2; while(j&gt;=low)&#123; if(heap[j]&lt;heap[i])&#123; swap(heap[j],heap[i]); i=j; j=i/2; &#125;else&#123; break; &#125; &#125;&#125;void insert(int x)&#123; heap[++n]=x; UpAdjust(1,n);&#125; 堆排序堆排序是指使用堆结构对一个序列进行排序1234567void heapSort()&#123; createHeap(); for(int i=n;i&gt;1;i--)&#123; swap(heap[i],heap[1]); downAdjust(1,i-1); &#125;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[并查集的定义并查集是一种维护集合的数据结构：合并（Union）、查找（Find）、集合（Set）并查集支持以下两个操作： 合并：合并两个集合 查找：判断两个元素是否在一个集合通过数组即可实现并查集基本操作 初始化 123for(int i=1;i&lt;=n;i++)&#123; father[i]=i;&#125; 查找由于规定同一个集合中只存在一个根结点，因此查找操作就是对給定的结点寻找其根结点的过程实现方式：递推或递归思路：反复寻找父亲结点，直到找到根结点 123456789101112//递推低吗int findFather(int x)&#123; while(x!=father[x])&#123; x=father[x]; &#125; return x;&#125;//递归代码int findFather(int x)&#123; if(x==father[x]) return x; else return findFather(father[x]);&#125; 3.合并合并是指把两个集合合并成一个集合，题目中一般给出两个元素，要求把这两个元素所在集合合并。一般是先判断两个元素是否属于同一集合，只有当两个元素属于不同集合时才合并，而合并的过程一般是把其中一个集合的根结点的父亲指向另一个集合的根结点。思路： 对于給定的两个元素a，b，判断它们是否属于同一集合。可以调用查找函数对这两个元素分别查找根结点，然后判断其根节点是否相同 合并两个集合：在第一步中获得了两个元素的根结点faA和faB，因此只需要把其中一个的父亲结点指向另一个结点。1234567void Union(int a,int b)&#123; int faA=findFather(a); int fab=findFather(b); if(faA!=faB)&#123; father[faA]=faB; &#125;&#125; 并查集产生的每一个集合都是一棵树 路径压缩当题目给出的元素数量很多并且形成一条链，则上述查找函数效率较低，需进行优化把当前查询结点的路径上的所有结点的父亲都指向根结点，查找的时候就不需要一直回溯去找父亲了，查询复杂度降为O(1）转换步骤： 按原先的写法获得x的根结点r 重新从x开始走一遍寻找根结点的过程，把路径上经过的所有结点的父亲全部改为根结点r123456789101112131415161718192021int findFather(int x)&#123; int a=x; while(x!=father[x])&#123; x=father[x]; &#125; while(a!=father[x])&#123; int z=a; a=father[a]; father[z]=x; &#125; return x;&#125;int findFather(int v)&#123; if(v==father[v]) return v; else&#123; int f=findFather(father[v]); father[v]=f; return f; &#125;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[平衡二叉树]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[平衡二叉树的定义当使用序列{1,2,3,4,5}构建二叉查找树，会得到一棵长链条式的树，此时对这棵树中的结点进行查找，时间复杂度会达到O(n)，为了优化数据查询，需要对树的结构进行调整，使树的高度在每次插入元素后仍能保持O(logn)的级别，这样能让查询操作仍然为O(logn)的时间复杂度AVL树仍然是一棵二叉查找树，只是在其基础上增加了平衡要求。即对AVL树的任意结点来说，其左子树与右子树的高度之差的绝对值不超过1，其中左子树和右子树的高度之差称为该结点的平衡因子。只要能随时保证每个结点的平衡因子的绝对值不超过1，AVL的高度就始终能保持O(logn)级别。1234567891011121314151617181920212223242526//结点结构struct node&#123; int v,height; node *lchild,*rchild;&#125;;//生成一个新结点，v为结点权值node* newNode(int v)&#123; node* Node = new node; Node-&gt;v=v; Node-&gt;height=1; Node-&gt;lchild=Node-&gt;rchild=NULL; return Node;&#125;//获取以root为根结点的子树的当前heightint getHeight(node* root)&#123; if(root==NULL) return 0; return root-&gt;height;&#125;//计算结点root的平衡因子int getBalanceFactor(node* root)&#123; return getHeight(root-&gt;lchild)-getHeight(root-&gt;rchild);&#125;//更新结点root的heightvoid UpdateHeight(node* root)&#123; root-&gt;height=max(getHeight(root-&gt;lchild),getHeight(root-&gt;rchild))+1;&#125; 平衡二叉树的基本操作 查找操作类似于二叉查找树，由于AVL树的高度为O(logn)级别，所以查找操作的时间复杂度为O(logn) 12345678910111213void search(node* root,int x)&#123; if(root==NULL)&#123; printf("search failed\n"); return; &#125; if(x==root-&gt;data)&#123; printf("%d\n",root-&gt;data); &#125;else if(x&lt;root-&gt;data)&#123; search(root-&gt;lchild,x); &#125;else&#123; search(root-&gt;rchild,x); &#125;&#125; 旋转操作 123456789101112131415161718//左旋void L(node* &amp;root)&#123; node* temp=root-&gt;rchild; root-&gt;rchild=temp-&gt;lchild; temp-&gt;lchild=root; UpdateHeight(root); UpdateHeight(temp); root=temp;&#125;//右旋void R(node* &amp;root)&#123; node* temp=root-&gt;lchild; root-&gt;lchild=temp-&gt;rchild; temp-&gt;rchild=root; UpdateHeight(root); UpdateHeight(temp); root=temp;&#125; 插入操作只要把最靠近插入结点的失衡结点调整到正常，路径上的所有结点就都会平衡在二叉查找树的插入操作基础上从下往上判断结点是否失衡，因此需要在每个insert函数之后更新当前子树高度，并在这之后根据树型是LL型、LR型、RR型、RL型之一来进行平衡操作 123456789101112131415161718192021222324252627void insert(node* &amp;root,int v)&#123; if(root==NULL)&#123; root=newNode(v); return; &#125; if(v&lt;root-&gt;v)&#123; insert(root-&gt;lchild,v); UpdateHeight(root); if(getBalanceFactor(root)==2)&#123; if(getBalanceFactor(root-&gt;lchild)==1)&#123; R(root); &#125;else if(getBalanceFactor(root-&gt;rchild)==1)&#123; L(root-&gt;lchild); R(root); &#125; &#125; &#125;else&#123; insert(root-&gt;rchild,v); UpdateHeight(root); if(getBalanceFactor(root)==-2)&#123; if(getBalanceFactor(root-&gt;rchild)==1)&#123; R(root-&gt;rchild); L(root); &#125; &#125; &#125;&#125; AVL树的建立建立在插入操作的基础上，依次插入n个结点即可 1234567node* Create(int data[],int n)&#123; node* root=NULL; for(int i=0;i&lt;n;i++)&#123; insert(root,data[i]); &#125; return root;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[二叉查找树]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%2F</url>
    <content type="text"><![CDATA[二叉查找树二叉查找树的定义二叉查找树是一种特殊的二叉树，又称二叉排序树、二叉搜索树。二叉查找树的递归定义： 二叉查找树要么为一棵空树。 二叉查找树要么为由根结点、左子树、右子树组成，其中左子树和右子树都是二叉查找树，且左子树上所有结点的数据域均小于或等于根结点的数据域，右子树上所有结点的数据域均大于等于根节点的数据域。 二叉查找树其实是一棵数据有序的树。即对树上的每个结点，都满足其左子树上所有结点的数据域均小于或等于根结点的数据域，右子树上所有结点的数据域均大于根结点的数据域。 二叉查找树的基本操作 查找操作由二叉查找树的性质得：可以只选择一棵子树进行遍历，因此查找将会是从树根到查找结点的一条路径，故最坏时间复杂度为O(h),h为二叉查找树高度基本思路： 如果当前根结点为空，则查找失败，返回 如果需要查找的值x等于当前根结点的数据域root-&gt;data，说明查找成功，访问 如果需要查找的值x小于当前根结点的数据域root-&gt;data,则向左子树root-&gt;lchild递归查找 如果需要查找的值x大于当前根结点的数据域root-&gt;data,则向右子树root-&gt;rchild递归查找 12345678910111213void search(node* root,int x)&#123; if(root==NULL)&#123; printf("search failed\n"); return ; &#125; if(x==root-&gt;data)&#123; printf("%d\n",root-&gt;data); &#125;else if(x&lt;root-&gt;data)&#123; search(root-&gt;lchild,x); &#125;else&#123; search(root-&gt;rchild,x); &#125;&#125; 插入操作对一棵二叉查找树来说，查找某个数据域的结点一定是沿着确定的路径进行的。当某个需要查找的值在二叉查找树中查找成功，说明结点已经存在；反之，查找失败的地方一定是结点需要插入的位置。插入操作的时间复杂对也是O(h) 12345678910111213void insert(node* &amp;root,int x)&#123; if(root==NULL)&#123; root=newNode(x); return; &#125; if(x==root-&gt;data)&#123; return; &#125;else if(x&lt;root-&gt;data)&#123; insert(root-&gt;lchild,x); &#125;else&#123; insert(root-&gt;rchild,x); &#125;&#125; 二叉查找树的建立建立一棵二叉查找树就是先后插入n个结点的过程。 1234567node* Create(int data[],int n)&#123; node* root=NULL; for(int i=0;i&lt;n;i++)&#123; insert(root,data[i]); &#125; return root;&#125; 二叉查找树的删除（确保删除后仍是一棵二叉查找树）一般有两种做法，时间复杂度都为O(h)删除操作的基本思路： 如果当前结点root为空，说明不存在权值为x的结点，返回 如果当前结点root的权值恰为给定的权值x，说明找到了想要删除的结点，进入删除处理a. 如果当前结点root不存在左右孩子，说明是叶子结点，直接删除b. 如果当前结点root存在左孩子，那么在左子树中寻找结点前驱pre，然后让pre的数据覆盖root，接着在右子树中删除节点nextc. 如果当前结点root存在右孩子，那么在右子树中寻找结点后继next，然后让next的数据覆盖root，接着在右子树中删除节点next 如果当前结点root的权值大于给定的权值x，则在左子树中递归删除权值为x的结点 如果当前结点root的权值大于給定的权值x，则在右子树中递归删除权值为x的结点12345678910111213141516171819202122232425262728293031323334//寻找以root为根结点的树中的最大权值结点node* findMax(node* root)&#123; while(root-&gt;rchild!=NULL)&#123; root=root-&gt;rchild; &#125; return root;&#125;//寻找以root为根结点的树中权值最小的结点node* findMin(node* root)&#123; while(root-&gt;lchild!=NULL)&#123; root=root-&gt;lchild; &#125; return root;&#125;void deleteNode(node* &amp;root,int x)&#123; if(root==NULL) return; if(root-&gt;data==x)&#123; if(root-&gt;lchild==NULL&amp;&amp;root-&gt;rchild==NULL)&#123; root=NULL; &#125;else if(root-&gt;lchild!=NULL)&#123; node* pre=findMax(root-&gt;lchild); root-&gt;data=pre-&gt;data; deleteNode(root-&gt;lchild,pre-&gt;data); &#125;else&#123; node* next=findMin(root-&gt;rchild); root-&gt;data=next-&gt;data; deleteNode(root-&gt;rchild,next-&gt;data); &#125; &#125;else if(root-&gt;data&gt;x)&#123; deleteNode(root-&gt;lchild,x); &#125;else&#123; deleteNode(root-&gt;rchild,x); &#125;&#125; 二叉查找树的性质对二叉查找树进行中序遍历，遍历的结果是有序的]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[二叉树的遍历]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[二叉树的遍历二叉树的遍历是指通过一定的顺序访问二叉树的所有结点。一般包括：先序遍历、中序遍历、后序遍历、层次遍历先序、中序、后序的遍历一般通过深度优先搜索实现，层次遍历一般通过广度优先搜索实现。 1. 先序遍历遍历顺序：根结点-&gt;左子树-&gt;右子树12345678void preorder(node* root)&#123; if(root==NULL)&#123; return; &#125; printf("%d\n",root-&gt;data); preorder(root-&gt;lchild); preorder(root-&gt;rchild);&#125; 2. 中序遍历遍历顺序：左子树-&gt;根结点-&gt;右子树12345678void inorder(node* root)&#123; if(root==NULL)&#123; return; &#125; inorder(root-&gt;lchild); printf("%d\n",root-&gt;data); inorder(root-&gt;rchild);&#125; 3. 后序遍历遍历顺序：左子树-&gt;右子树-&gt;根结点12345678void postorder(node* root)&#123; if(root==NULL)&#123; return; &#125; postorder(root-&gt;lchild); postorder(root-&gt;rchild); printf("%d\n",root-&gt;data);&#125; 4. 层序遍历层序遍历指按层次的顺序从根结点向下逐层进行遍历，且对同一层的节点为从左到右遍历。基本思路：从根结点开始广度优先搜索 将根结点root加入队列 取出队首结点，访问它 如果该结点有左孩子，将左孩子入队。 如果该结点有右孩子，将右孩子入队 返回第二步，直到队列为空 1234567891011void LayerOrder(node* root)&#123; queue&lt;node*&gt; q; q.push(root); while(!q.empty())&#123; node* now = q.front(); q.pop(); printf("%d",noe-&gt;data); if(now-&gt;lchild!=NULL) q.push(now-&gt;lchild); if(now-&gt;rchild!=NULL) q.push(now-&gt;rchild); &#125;&#125; 如果题目要求计算每个结点所处层次，可以在二叉树结点的定义中添加一个记录层次的layer变量。 1234567891011121314151617181920212223242526struct node&#123; int data; int layer; node* lchild; node* rchild;&#125;;void LayerOrder(node* root)&#123; queue&lt;node*&gt; q; root-&gt;layer=1; q.push(root); while(!q.empty())&#123; node* now = q.front(); q.pop(); printf("%d",noe-&gt;data); if(now-&gt;lchild!=NULL)&#123; now-&gt;lchild-&gt;layer=now-&gt;layer+1; q.push(now-&gt;lchild); &#125; if(now-&gt;rchild!=NULL) &#123; now-&gt;rchild-&gt;layer=now-&gt;layer+1; q.push(now-&gt;rchild); &#125; &#125;&#125; 问题：给定一棵二叉树的先序遍历序列和中序遍历序列（或者给定后序序列和中序序列），要求重建这棵二叉树。 中序序列(确定左右子树)可以与先序序列、后序序列、层序序列（确定根结点）中的任意一个来构建唯一地二叉树，后三者任意搭配都不能构建唯一的二叉树假设已知先序序列为pre1,pre2……中序序列为in1,in2……则先序序列中的第一个元素pre1是当前二叉树的根结点当前二叉树的根结点又将中序序列划分为左子树和右子树，在中序序列中找到某个结点ink，使得ink=pre1。左子树结点个数numLeft=k-1，同时可得出左右子树的先序和中序序列区间。递归边界：先序序列的长度小于等于0 1234567891011121314151617node* create(int prel ,int prer,int inl,int inr)&#123; if(prel&lt;prer)&#123; return NULL; &#125; node* root=new node; root-&gt;data=pre[prel]; int k; for(k=inl;k&lt;=inr;k++)&#123; if(in[k]==pre[prel])&#123; break; &#125; &#125; int numLeft=k-inl; root-&gt;lchild=create(prel+1,prel+numLeft,inl,k-1); root-&gt;rchild=create(prel+numLeft+1,prer,k+1,inr); return root;&#125; 二叉树的静态实现不用指针，只用数组实现二叉树基本操作 静态二叉链表123456789101112struct node&#123; typename data; int lchild; int rchild;&#125;Node[maxn];int index=0;int newNode(int v)&#123; Node[index].data=v; Node[index].lchild=-1; Node[index].rchild=-1; return index++;&#125; 二叉树的查找、插入、建立root为根结点在数组中的下标12345678910111213141516171819202122232425262728void search(int root,int x,int newdata)&#123; if(root==-1)&#123; return; &#125; if(Node[root].data==x)&#123; Node[root].data=newdata; &#125; search(Node[root].lchild,x,newdata); search(Node[root].rchil,x,newdata);&#125;void insert(int &amp;root,int x)&#123; if(root==-1)&#123; root==newNode(x); return; &#125; if(x插在左子树)&#123; insert(Node[root].lchild,x); &#125;else&#123; insert(Node[root].rchild,x); &#125;&#125;void create(int data[],int n)&#123; int root=-1; for(int i=0;i&lt;n;i++)&#123; insert(root,data[i]); &#125; return root;&#125; 二叉树的遍历123456789101112131415161718192021222324252627282930313233343536373839//先序遍历void preorder(int root)&#123; if(root==-1)&#123; return; &#125; printf("%d\n",Node[root].data); preorder(Node[root].lchild); preorder(Node[root].rchild);&#125;//中序遍历void inorder(int root)&#123; if(root==-1)&#123; return; &#125; inorder(Node[root].lchild); printf("%d\n",Node[root].data); inorder(Node[root].rchild);&#125;//后序遍历void postorder(int root)&#123; if(root==-1)&#123; return ; &#125; postorder(Node[root].lchild); postorder(Node[root].rchild); printf("%d\n",Node[root].data);&#125;//层序遍历void LayerOrder(int root)&#123; queue&lt;int&gt; q; q.push(root); while(!q.empty())&#123; int now=q.front(); q.pop(); printf("%d ",Node[now].data); if(Node[now].lchild!=-1) q.push(Node[now].lchild); if(Node[now].rchild!=-1) q.push(Node[now].rchild); &#125;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《素媛》与《熔炉》]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E3%80%8A%E7%B4%A0%E5%AA%9B%E3%80%8B%E4%B8%8E%E3%80%8A%E7%86%94%E7%82%89%E3%80%8B%2F</url>
    <content type="text"><![CDATA[现实依旧残酷 最近看了两部韩国电影，正好五一假期有空，想写点什么。在知乎上看过一个话题，人开始废掉的标志是什么？记得有人答说当一个人沉迷于短期便可轻易获得快感的事物时，有人答说当一个开始拒绝输出的时候便是废掉的开始。我感到恐慌，我意识到尽管一天到晚都在读书，在听歌看电影，在接受各种信息，但我不能一位接收而不输出，其实这也是我搞这个静态博客的初衷。我知道自己文笔不行，但我还是想写点东西，想记录点生活。论文学，读了《红楼梦》便知道什么才是大家之作，这样的奇书需要怎么的积淀才能写就。很明显，一般人都达不到这样的高度，但这并不妨碍我继续输出自己的想法，学编程也一样，当一个人学编程只看书看视频听课，却从不自己不敲代码，那么注定是失败的学习者，而敲代码的过程，其实也就是输出的过程。 回到正题，为什么要把素媛和熔炉放到一起，一个显然的原因就是这两部都是反映未成年人被性侵的黑现实题材，我不清楚是因为自己接触的电影太少，还是不了解国内状况，为什么中国相应的题材电影没有令我印象深刻的，难道我们国家已经社会和谐，大家都生活在了一个幸福美满的国度里了吗，甚至已经没必要在去关注未成年人的成长问题？素媛和熔炉都是根据真实事件改编的电影，韩国在反映黑暗面现实题材的电影方面似乎做得比较好，有些放在国内怕是审批都过不了，两部电影最后的结局让人痛心与无奈，但这也是电影出彩的一个方面之一吧。以往很多电影，剧情发展到后期，基本就是坏蛋绳之以法，恶有恶报。但不得不承认，现实中很多人的恶报来的并没那么快，被害人可能死不瞑目，犯人却依旧逍遥法外的情况并不少，冤判，错判，更恶劣的，权钱交易，有钱有势的才是爹，普通人的生命就如草芥一般。寒假看的红楼梦，其实曹公也写到了很多底层人的生活，起初读红楼梦可能只关注到宝玉、宝钗、黛玉三者恋为主线的少男少女之间的情情爱爱，但这其实就低估了曹公的作品了，从繁华到幻灭，情确实是红楼梦的一大主题，但其实里面写到了很多卑微者的命运，很多人无力反抗这样命运，最终只能认命。 2012年夏天，7岁女童独自在家睡觉，半夜被一男子入室掳走，实施了强奸和殴打，事后该男子用树枝和其他条状硬物捅女童的阴道和肠道，女童被附近的居民发现在一条小河边，当时下着雨，女童重度昏迷，大小便失禁，血肉模糊。送医治疗后经诊断，肠道没有一处完好的地方，手术几乎把肠子全部切除，阴道和肠道中间的部分全部破坏，阴道在外伤的情况下又被粪便感染，子宫受损，也就是说，子宫，阴道，肠道都受到重创，安装了人造肛门之后，终身都要带着便便袋生活，有可能无月经无生育能力。孩子很惨，但凶手抓到后拒不认罪，不赔偿，孩子的父母都是普通老百姓，支付医药费都很困难，一直申诉，一方面是为女儿讨公道，一方面是想得到赔偿给孩子更好的治疗。这就是素媛背后的真实事件，其实比起熔炉，素媛这部电影倒是让人感到更加温暖。影片其实可以注意到很多人物心理、行为等在事发前后发生了巨大的变化。素媛的爸爸就令人感动，在平常日子里，从吃饭时的自顾自，对素媛的生活，学习等等虽不能说毫不在意吧，但确实没花多少心思在自己的女儿身上，事发后，后悔自然无用，但我们看到了一个父亲应有的担当，你能想象一个大男人，在大夏天穿着那种厚厚的卡通套装，只为陪伴在女儿身边，为了接触他，让她开心，安心，试问生活中的父亲都表现的如何？之所以说这部电影暖心，不仅仅是事发家庭成员自身的坚强，当然其实他们也已经到了崩溃的边缘，记得素媛的母亲甚至抱怨，为什么那么多小孩，这种事为什么偏偏发生在自己的女儿身上，我宁愿所有人的小孩都遭受同样的伤害！这其实也是痛苦的一种发泄。 素媛其实除了批判，总体上格调还是偏暖的。其中有很多震撼的地方，尤其是素媛，这个9岁的小女孩竟然能这么懂事，心智竟然已经如此成熟。发生不幸，他仍能想到自己的爸妈，能体会到爸妈的痛苦，甚至知道为自己治病家里要花不少钱，他会内疚。素媛与夙愿，这是一个寓意着希望的女孩，活着就是希望，更何况还能看到她灿烂的笑容。最后判决如此不公，冲动的父亲甚至打算与凶手同归于尽，但就在砸向凶手的瞬间，冲动的父亲被素媛抱住了，她不希望父亲做傻事。事发后，身边的朋友捐款的捐款，素媛的同学也在默默支持着他。这里有个叫荣植的小胖子很可爱，他后面来到素媛的店门口，对他父亲说，当时如果等素媛一起上学，素媛就不会出这种事了，他觉得很自责，然后嚎啕大哭，这是一个小孩的真性情。回到主旋律，还是反映了社会对未成年人的淡漠，素媛其实是一个非常单纯善良的小女孩，即是自己上学迟到了，但不给坏叔叔撑伞却还是于心不忍，注意到这里他只是认为想帮助别人，但实际上身边的人非但没有夸她，反认为是她的错。也许很多人心想，你何苦这么好心，自己都要来不及上课了，还想着别人？另外，事发后还有一帮人很令人淡漠，一帮是那群媒体记者，于他们而言，这是热点，当然得蜂拥往上挤，可是除了采访，他们几乎完全没有顾及当事人的感受。另一帮人就是法庭上那帮家伙了，我很好奇为嫌疑人辩护的律师内心是什么想法，当她对着一个9岁的受害女孩提问时能如此正气？ 而《熔炉》怕是就比较沉重了。完全反应的是人性的黑暗面，格调悲凉而沉重。 《熔炉》，是根据韩国光州一所聋哑学校校长性侵儿童的真实事件改编的电影，真实事件中，从校长到老师共10余人，先后对超过30名聋哑儿童进行性侵，有很多连10岁都还不到。其实小说和电影的改编免不了要进行艺术方面的加工，现实中的黑暗恐怕更是令人难以想象。为什么于我而言，素媛偏向温暖，而熔炉却是令人沉痛。事实上，两者之间的社会危害性的强度也是显然有强弱之分的。素媛里的犯人仅仅只是一个普通的无奈，一个有前科的混混，另外素媛还有很多关系她的人，不仅仅只是她的父母。而熔炉不同，熔炉事件的双方是差距悬殊的，一方是有权有势的聋哑学校校长，另一方很多甚至都是无父无母的残障儿童，在这样差距悬殊的情况下，一旦人性黑暗面涌现，受害的一方是显然并且是毫无还手之力的。影片中孩子们唯一的幸运是遇到了一个好老师，男主和女主为了救孩子确实尽了全力，我影片结尾我们都看到了，罪恶的一方并没有受到相应的处罚，其实这也是很多现实事件的真实写照。倘若，这些孩子一直没有遇到善良的能帮助他们的人，结果又会如何，惨遭毒手的孩子只会继续增加。社会上好人确实不少，但坏人不能说已经没有了，尤其是一些有权有势的坏人克服不了自己人性黑暗的一面，那么造成的后果必然是灾难性的，弱势群体得不到保护，一方面作为法治社会体现了制度上的欠缺，法律不够完善，另一方面，这是一起社会事件，更大程度上反映了集体意识的淡漠。事不关己高高挂起，何苦自讨没趣去得罪哪些大人物呢？越得不到重视，黑暗面便越猖狂，社会也就越畸形。 最后撇开电影，回到自己。说实话，影片中的事件都是我无法想象和体会的，或者说触动可能还不是特别强烈。因为我长这么大，都还算生活在一个相对阳光的环境里，认识了很多人，可以说有好有坏。但其实人性是复杂的，一般碰到的人很少回想小说或电影里讲人性展现的非常露骨，人们可能会不知不觉隐藏自己的某一面。无论怎么说，我接触到的同学，老师，长辈，陌生人，可能这个让你讨厌，那个令你烦恼，但不至于说他是一个坏人，未成年人受到欺凌的事件我遇到过，但也许并没有引起自己的关注，首先那时我自己也是个小孩，因为没碰到很严重的，我会以为他们只是一言不合，打起架来了。从小到大，由于自己多愁善感的性格，可以说是烦恼不断，但困扰自己的无非是些普普通通的小事，人生不如意事十之八九嘛。但如果电影中的事件发生在自己身边，自己会表现为一个怎样的角色，我甚至不敢想，为什么不敢想，因为很可能，如果受害者不是自己的亲人，可能也就是感叹一番，为自己茶余饭后多了点谈资罢了，我真的会去做些什么吗？会作为正义的化身，不顾生死与暗势力反抗吗？至于其他人，可能还在为自己的房贷车贷发愁呢。熔炉的真实事件是涉及到了暗杀的程度，没有勇气，只有一腔热血的你会不会坚持正义？再进步一步，如果受害者是自己或者是自己的亲人，你会怎么做，这时怕是做不到无动于衷了吧？你又能做些什么？注意到，一般受害的往往是弱势群体，也就是你没钱没权没话语权。你相信法庭吗？你相信律师吗？你相信警察吗？不瞎写了，代码还没敲完呢…回见]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[葬花词]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E8%91%AC%E8%8A%B1%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[程高通行本《葬花吟》 花谢花飞花满天，红消香断有谁怜？ 游丝软系飘春榭，落絮轻沾扑绣帘。 闺中女儿惜春暮，愁绪满怀无释处。 手把花锄出绣帘，忍踏落花来复去。 柳丝榆荚自芳菲，不管桃飘与李飞； 桃李明年能再发，明年闺中知有谁？ 三月香巢已垒成，梁间燕子太无情！ 明年花发虽可啄，却不道人去梁空巢也倾。 一年三百六十日，风刀霜剑严相逼； 明媚鲜妍能几时，一朝漂泊难寻觅。 花开易见落难寻，阶前愁杀葬花人， 独倚花锄泪暗洒，洒上空枝见血痕。 杜鹃无语正黄昏，荷锄归去掩重门； 青灯照壁人初睡，冷雨敲窗被未温。 怪奴底事倍伤神？半为怜春半恼春。 怜春忽至恼忽去，至又无言去未闻。 昨宵庭外悲歌发，知是花魂与鸟魂？ 花魂鸟魂总难留，鸟自无言花自羞； 愿侬此日生双翼，随花飞到天尽头。 天尽头，何处有香丘？ 未若锦囊收艳骨，一抔净土掩风流3。 质本洁来还洁去，强于污淖陷渠沟。 尔今死去侬收葬，未卜侬身何日丧？ 侬今葬花人笑痴，他年葬侬知是谁？ 试看春残花渐落，便是红颜老死时； 一朝春尽红颜老，花落人亡两不知！]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[组合数]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E7%BB%84%E5%90%88%E6%95%B0%2F</url>
    <content type="text"><![CDATA[例1：求n！中有多少质因子p 直观想法：计算从1~n的每个数各有多少个质因子p，然后将结果累加，时间复杂度为O(nlogn).123456789101112131415161718192021222324int cal(int n,int p)&#123; int ans=0; for(int i=2;i&lt;=n;i++)&#123; int temp=i; while(temp%p==0)&#123; ans++; temp/=p; &#125; &#125; return ans;&#125;///O(logn)的算法int cal(int n,int p)&#123; int ans=0; whil(n)&#123; ans+=n/p; n/=p; &#125; return ans;&#125;int cal(int n,int p)&#123; if(n&lt;p) return 0; return n/p+cal(n/p,p);&#125; 组合数的计算互补性质 即从m个不同元素中取出n个元素的组合数=从m个不同元素中取出 (m-n) 个元素的组合数； 这个性质很容易理解，例如C(9,2)=C(9,7)，即从9个元素里选择2个元素的方法与从9个元素里选择7个元素的方法是相等的。规定：C(n,0)=12.组合恒等式若表示在 n 个物品中选取 m 个物品，则如存在下述公式：C(n,m)=C(n,n-m)=C(n-1,m-1)+C(n-1,m)。 通过定义直接计算12345678910111213long long c(long long n,long long m)&#123; long long ans =1; for(long long i=1;i&lt;=n;i++)&#123; ans*=i; &#125; for(long long i=1;i&lt;=m;i++)&#123; ans/=i; &#125; for(long long i=1;i&lt;=n-m;i++)&#123; ans/=i; &#125; return ans;&#125; 通过递推公式计算12345678910111213141516171819long long res[67][67]=&#123;0&#125;;long long c(long long n,long long m)&#123; if(m==0||m==n) return 1; if(res[n][m]!=0) return res[n][m]; return res[n][m]=c(n-1,m)+c(n-1,m-1);&#125;///打表计算const int n=60;void calc()&#123; for(int i=0;i&lt;=n;i++)&#123; res[i][0]=res[i][i]=1; &#125; for(int i=2;i&lt;=n;i++)&#123; for(int j=0;j&lt;=i/2;j++)&#123; res[i][j]=res[i-1][j]+res[i-1][j-1];///递推计算c(i,j) res[i][i-j]=res[i][j];///c(i,i-j)=c(i,j) &#125; &#125;&#125; 通过定义式的变形计算12345678long long c(long long n,long long m)&#123; long long ans=1; for(long long i=1;i&lt;=m;i++)&#123; ans=ans*(n-m+i)/i; &#125; return ans;&#125; 计算C(n,m)%p通过递推公式计算12345678910111213141516171819递归：int res[1010][1010]=&#123;0&#125;;int c(int n,int m,int p)&#123; if(m==0||m==n) return 1; if(res[n][m]!=0) return res[n][m]; return res[n][m]=(c(n-1,m)+c(n-1,m-1))%p;&#125;递推：void calc()&#123;for(int i=0;i&lt;=n;i++)&#123; res[i][0]=res[i][i]=1;&#125;for(int i=2;i&lt;=n;i++)&#123; for(int j=0;j&lt;=i/2;j++)&#123; res[i][j]=(res[i-1][j]+res[i-1][j-1])%p; res[i][i-j]=res[i][j]; &#125;&#125;&#125; 根据定义式计算123456789int prime[maxn];int c(int ,n,int m,int p)&#123; int ans=1 for(int i=0;prime[i]&lt;=n;i++)&#123; int c=cal(n,prime[i])-cal(m,prime[i])-cal(n-m,prime[i]); ans=ans*binaryPow(prime[i],c,p)%p; &#125; return ans;&#125; 根据定义式的变形计算1234567891011121314151617181920212223242526272829///求c(n,m)%p,且m&lt;p,p为素数int c(int n,int m,int p)&#123; int ans=1; for(int i=1;i&lt;=m;i++)&#123; ans=ans*(n-m+1)%p; ans=ans*inverse(i,p)%p; &#125; return ans;&#125;///求c(n,m)%p,m任意,p为素数int c(int n,int m,int p)&#123; int ans=1,nump=0; for(int i=1;i&lt;=m;i++)&#123; int temp=n-m+i; while(temp%p==0)&#123; nump++; temp/=p; &#125; ans=ans*temp%p; temp=i; while(temp%p==0)&#123; nump--; temp/=p; &#125; ans=ans*inverse(temp,p)%p; &#125; if(nump&gt;0) return 0; else return ans;&#125; Lucas定理1234int Lucas(int n,int m)&#123; if(m==0) return 1; return c(n%p,m%p)*Lucas(n/p,m/p)%p;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[algorithm头文件下常用函数]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2Falgorithm%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[algorithm头文件下常用函数1. max(),min(),abs()max(x,y)和min(x,y)分别返回x和y中的最大值和最小值，且参数必须是两个。abs(x) 返回x的绝对值。x必须为整数，浮点型的绝对值要用math头文件下的fabs 2. swap()swap(x,y)用来交换x和y的值 3. reverse()reverse(it,it2) 可以将数组指针在[it,it2)之间的元素或容器的迭代器在[it,it2)范围内的元素进行反转。1234567891011121314151617181920212223242526#include&lt;stdio.h&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;10,11,12,13,14,15&#125;; reverse(a,a+4); for(int i=0;i&lt;6;i++)&#123; printf("%d ",a[i]); &#125; return 0;&#125;#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; string str="abcdefghi"; reverse(str.begin()+2,str.begin()+6); for(int i=0;i&lt;str.length();i++)&#123; printf("%c",str[i]); &#125; return 0;&#125; 4. next_permutation()next_permutation() 给出一个序列在全排列中的下一个序列123456789101112#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,3&#125;; do&#123; printf("%d %d %d\n",a[0],a[1],a[2]); &#125;while(next_permutation(a,a+3)); return 0;&#125; 5. fill()fill() 可以把数组或容器中的某一段区间赋为某个相同的值。和memset不同，这里的赋值可以使数组类型对应范围中的任意值。12345678910111213#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,3,4,5&#125;; fill(a,a+5,233); for(int i=0;i&lt;5;i++)&#123; printf("%d ",a[i]); &#125; return 0;&#125; 6. sort()默认为递增排序 若要递减排序，需要增加比较函数 1234bool cmp(int a,int b)&#123; return a&gt;b;&#125;sort(a,a+n,cmp); 结构体数组排序 1234567891011struct node&#123; int x,y;&#125;a[10];bool cmp(node a,node b)&#123; return a.x&gt;b.x; &#125;//bool cmp(int x,int y)&#123; if(a.x!=b.x) return a.x&gt;b.x; else return a.y&lt;b.y;&#125; 容器排序，在STL标砖容器中，只有vector/string/deque可以sort 1234567891011121314151617181920#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;bool cmp(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; vector&lt;int&gt; vi; vi.push_back(3); vi.push_back(1); vi.push_back(2); sort(vi.begin(),vi.end(),cmp); for(int i=0;i&lt;3;i++)&#123; printf("%d ",vi[i]); &#125; return 0;&#125; 7. lower_bound()和upper_bound()lower_bound 和 upper_bound()需要用在一个有序数组或容器中。lower_bound(first,last,val) 用来寻找在数组或容器的[first,last)范围内第一个值大于等于val元素的位置，如果是数组，返回该位置的指针；若果是容器，返回该位置的迭代器upper_bound(first,last,val) 用来寻找在数组或容器的[first,last)范围内第一个值大于val元素的位置，如果是数组，返回该位置的指针；若果是容器，返回该位置的迭代器1234567891011#include&lt;stdio.h&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int a[10]=&#123;1,2,2,3,3,3,5,5,5,5&#125;; printf("%d,%d\n",lower_bound(a,a+10,3)-a,upper_bound(a,a+10,3)-a); return 0;&#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[素数问题]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[素数 素数又称为质数，是指除了1和本身外，不能被其他数整除的一类数。 素数判断直接遍历循环复杂度为O(n);复杂度为O(sqrt(n))的算法;12345678910111213141516bool isprime(int n)&#123; if(n&lt;=1) return false; int sqr = (int)sqrt(1.0*n); for(int i=2;i&lt;=sqr;i++)&#123; if(n%i==0) return false; &#125; return true;&#125;//简洁写法bool isprime(int n)&#123; if(n&lt;=1) return false; for(int i=2;i*i&lt;=n;i++)&#123; if(n%i==0) return false; &#125; return true;&#125; 素数表的获取思路一： 根据判断素数的方法，直接从1~n进行枚举，若为素数则加入表中，枚举部分复杂度为O(n),判断素数部分复杂度为O(sqrt(n)),所以总复杂度为O(n*sqrt(n)),该算法对于n小于10^5可以承受;12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;#include&lt;math.h&gt;bool isprime(int n)&#123; if(n&lt;=1) return false; int sqr = (int)sqrt(1.0*n); for(int i=2;i&lt;=sqr;i++)&#123; if(n%i==0) return false; &#125; return true;&#125;int prime[101],num=0;bool p[101]=&#123;0&#125;;void Find_Prime()&#123; for(int i=1;i&lt;101;i++)&#123; if(isprime(i)) &#123; prime[num++]=i; p[i]=true; &#125; &#125;&#125;int main()&#123; Find_Prime(); for(int i=0;i&lt;num;i++)&#123; printf("%d ",prime[i]); &#125; return 0;&#125; 思路二：埃氏筛法，复杂度为O(nloglogn). 欧拉筛法，复杂度为O(n).素数筛法的关键在于筛字，即从小到大枚举所有数，对每一个素数，筛去它的所有倍数，剩下的均为素数。12345678910111213141516171819202122#include&lt;stdio.h&gt;const int maxn = 101;int prime[maxn],num=0;bool p[maxn]=&#123;0&#125;;//如果i为素数，则p[i]为false,否则，p[i]为truevoid Find_Prime()&#123; for(int i=2;i&lt;maxn;i++)&#123; if(p[i]==false)&#123; prime[num++]=i;//将素数i存入数组 for(int j=i+i;j&lt;maxn;j+=i)&#123;//筛去所有i的倍数，两个循环条件均不能加= p[j]=true; &#125; &#125; &#125;&#125;int main()&#123; Find_Prime(); for(int i=0;i&lt;num;i++)&#123; printf("%d ",prime[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[大整数运算]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%A4%A7%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[大整数运算 大整数的含义为：用基本数据类型无法存储其精度的整数，即没有办法用已有的数据类型来表示并计算，而需要去模拟加减乘除的过程， 大整数的存储 使用数组存储，即整数的高位存储在数组的高位，整数的低位存储在数组的低位。由于运算时都是从整数的低位到高位进行枚举， 所以顺序存储与该思维相合。 注意点：当整数按字符串%s读入时是逆位存储的，所以需要反转至另一数组。1234567891011121314151617181920212223242526272829struct bign&#123; int d[1000]; int len; bign()&#123; memset(d,0,sizeof(d)); len = 0; &#125;&#125;;bign change(char str[])&#123; bign a; a.len=strlen(str); for(int i=0;i&lt;a.len;i++)&#123; a.d[i]=str[a.len-i-1]-'0'; &#125; return a;&#125;比较两个bign变量的大小：先判断两者的len大小，如果不相等，以长的为大；如果相等，则从高位到低位进行比较，直到出现某一位不等，结束比较。int compare(bign a,bign b)&#123; if(a.len&gt;b.len) return 1; else if(a.len&lt;b.len) return -1; else&#123; for(int i=a.len-1;i&gt;=0;i--)&#123; if(a.d[i]&gt;b.d[i]) return 1; else if(a.d[i]&lt;b.d[i]) return -1; &#125; return 0; &#125;&#125; 高精度加法对两个数其中的每一位进行加法的步骤：将该位上的两个数字相加，得到的结果取个位数作为该位结果，取十位数作为新的进位1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;string.h&gt;struct bign&#123; int d[1000]; int len; bign()&#123; memset(d,0,sizeof(d)); len = 0; &#125;&#125;;bign change(char str[])&#123; bign a; a.len=strlen(str); for(int i=0;i&lt;a.len;i++)&#123; a.d[i]=str[a.len-i-1]-'0'; &#125; return a;&#125;bign add(bign a,bign b)&#123; bign c; int carry=0;//进位 for(int i=0;i&lt;a.len||i&lt;b.len;i++)&#123; int temp=a.d[i]+b.d[i]+carry; c.d[c.len++]=temp%10; carry=temp/10; &#125; if(carry!=0)&#123; c.d[c.len++]=carry; &#125; return c;&#125;void print(bign a)&#123; for(int i=a.len-1;i&gt;=0;i--)&#123; printf("%d",a.d[i]); &#125;&#125;int main()&#123; char str1[1000],str2[1000]; scanf("%s%s",str1,str2); bign a=change(str1); bign b=change(str2); print(add(a,b)); return 0;&#125;上述写法两个对象都是非负整数，如果有一方是负的，可以在转换到数组这一步时去掉其负号，然后采用高精度减法；如果两个都是负的，就都去掉负号后采用高精度加法，最后加上负号。 高精度减法步骤：对每一步，比较被减位和减位，如果不够减，则令被减位的高位减1，被减位加10在进行减法；如果够减，则直接减。减法后高位可能有多余的0，要除去它们，但也要保证结果至少有一位数。1234567891011121314bign sub(bign a,bign b)&#123; bign c; for(int i=0;i&lt;a.len||i&lt;b.len;i++)&#123; if(a.d[i]&lt;b.d[i])&#123; a.d[i+1]--; a.d[i]+=10; &#125; c.d[c.len++]=a.d[i]-b.d[i]; &#125; while(c.len-1&gt;=1&amp;&amp;c.d[c.len-1]==0)&#123; c.len--; &#125; return c;&#125; 高精度与低精度的乘法步骤：取bign的某位与int型整体相乘，再与进位相加，所得结果的个位数作为该位结果，高位作为新的进位。1234567891011121314bign multi(bign a,int b)&#123; bign c; int carry=0; for(int i=0;i&lt;a.len;i++)&#123; int temp=a.d[i]*b+carry; c.d[c.len++]=temp%10; carry=temp/10; &#125; while(carry!=0)&#123; c.d[c.len++]=carry%10; carry/=10; &#125; return c;&#125; 高精度与低精度的除法步骤：上一步的余数乘以10加上该步的位，得到该步临时的被除数，将其与除数比较：如果不够除，则该位的商为0；如果够除，则商即为对应的商，余数即为对应的余数。最后一步要注意高位可能有多余的0，要去除它们，但也要保证结果至少有一位数。12345678910111213141516bign divide(bign a,int b,int &amp;r)&#123;//r为余数 bign c; c.len=a.len; for(int i=a.len-1;i&gt;=0;i--)&#123; r=r*10+a.d[i]; if(r&lt;b) c.d[i]=0; else&#123; c.d[i]=r/b; r=r%b; &#125; &#125; while(c.len=1&gt;=1&amp;&amp;c.d[c.len-1]==0)&#123; c.len--; &#125; return c;&#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[模式匹配]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[BF算法1、 BF算法是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符与模式串P的第一个字符进行匹配，若相等，则继续比较S的第二个字符和P的第二个字符；若不相等，则比较S的第二个字符和P的第一个字符，其实相当于将整个模式串往后移了一位，依次比较下去，直到得出最后的匹配结果。1234567891011121314151617181920212223242526int BF_Find(string&amp; s,string&amp; t) &#123; int i=0,j=0,count=0;//初始化 while(i&lt;s.size()) //未比较到串尾 &#123; if(s.at(i)==t.at(j)) //继续比较后续字符 &#123; i++; j++; count++;&#125; else //指针后退重新匹配 &#123; i=i-j+1; j=0; count=0; &#125; if(count==t.size()) &#123; cout&lt;&lt;"BF算法模式匹配成功,起始位置是:"&lt;&lt;i-count+1&lt;&lt;endl; return (i-count+1); &#125; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; KMP算法2、KMP算法与BF算法的区别就在于KMP算法巧妙的消除了指针i的回溯问题，只需确定下次匹配j的位置即可，使得问题的复杂度由O(mn)下降到O(m+n)。 在KMP算法中，为了确定在匹配不成功时，下次匹配时j的位置，引入了next[]数组，next[j]的值表示P[1…j-1]中最长的后缀等于相同字符序列的前缀的长度。 对于next[]数组的定义如下： （1) next[j] = 0（ j = 1）（t1与Si比较不相等时，下一步进行t1与Si+1的比较） （2) next[j] = max(k)（1&lt;k&lt;j且 P[1…k-1]=P[j-k+1,j-1]） {设next[j]=k;(1&lt;k&lt;j) 若tk=tj 则next[j+1]=k+1;即next[j+1]=next[j]+1; 若tk!=tj 则next[j+1]=next[k]+1; } （3) next[j] = 1 (k=1)(不存在相同子串，下一步进行t1与si的比较) 因此KMP算法的思想就是：在匹配过程称，若发生不匹配的情况，则目标串的指针i不变，将模式串的指针j移动到next[j]的位置继续进行匹配；当指针j退至0时，指针i和指针j需同时增加1。也就是说，当发生不匹配的情况，让模式串继续往后移，而移动的位数就是模式串的长度-部分匹配值（最长相同前后缀的长度），因为BF里面每次指针i回溯，会导致符合匹配的字符再一次匹配，增大了时间开销。 求next数组是难点，一般有递推法（用一个while循环）和直接法两种。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt; using namespace std; int BF_Find(string&amp; s,string&amp; t) &#123; int i=0,j=0,count=0;//初始化 while(i&lt;s.size()) //未比较到串尾 &#123; if(s.at(i)==t.at(j)) //继续比较后续字符 &#123; i++; j++; count++;&#125; else //指针后退重新匹配 &#123; i=i-j+1; j=0; count=0; &#125; if(count==t.size()) &#123; cout&lt;&lt;"BF算法模式匹配成功,起始位置是:"&lt;&lt;i-count+1&lt;&lt;endl; return (i-count+1); &#125; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; void GetNext(string&amp; s,int *next) &#123; int len = s.size(); next[0] = 0; next[1] = 0; int i = 1; while(i &lt; len - 1) &#123; int j = next[i]; while(j &gt; 0 &amp;&amp; s.at(j) != s.at(i)) j = next[j]; if(s.at(j) == s.at(i)) next[i + 1] = j + 1;//根据next的定义推导出公式 else next[i + 1] = j; i++; &#125; &#125; void Getnextval(string &amp; s,int *next) &#123; int i=1; next[1]=0; int j=0; int len=s.size(); while(i&lt;len)&#123; if(j==0||s.at(i)==s.at(j))&#123; ++i;++j; if (s.at(i)!=s.at(j)) next[i]=j; else next[i]=next[j]; &#125; else j=next[j]; &#125; &#125; int KMP_Find(string&amp; s,string&amp;t) &#123; int i=0,j=0; int n =t.size(); int *next = new int[n]; GetNext(t,next); while(i&lt;s.size()&amp;&amp;j&lt;t.size()) //两个串均未比较到串尾 &#123; if((j == 0)||(s.at(i)==t.at(j))) //继续比较后续字符 &#123; i++; j++; &#125; else &#123; j = next[j];//模式串后移 &#125; &#125; if(j==t.size()) &#123; int index=i-t.size()+1; cout&lt;&lt;"KMP算法：子串从长串的第"&lt;&lt;index&lt;&lt;"位开始匹配成功!"&lt;&lt;endl; return index; &#125; cout&lt;&lt;"字符串匹配失败!"&lt;&lt;endl; return 0; &#125; int main() &#123; string str1,str2; cout&lt;&lt;"请输入主串:"&lt;&lt;endl; cin&gt;&gt;str1; cout&lt;&lt;"请输入子串:"&lt;&lt;endl; cin&gt;&gt;str2; KMP_Find(str1,str2); BF_Find(str1,str2); return 0; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[My movie list of 2017]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2FMy-movie-list-of-2017%2F</url>
    <content type="text"><![CDATA[17年看过的几部不错的电影 《肖申克的救赎》 《海边的曼彻斯特》 《梦与狂想的王国》 《辛德勒的名单》 《至爱梵高》 《熔炉》 《窃听风暴》 《美丽心灵》 《v字仇杀队》 《忠犬八公的故事》 《春光乍泄》 《钢琴家》 《阿甘正传》 《霸王别姬》 《沉默的羔羊系列》 《蝴蝶效应系列》 《杀人游戏》 《海洋》 《千钧一发》 《源代码》 《超脱》 《猫鼠游戏》 《心迷宫》 《寻梦环游记》 《猫妖记》 《芳华》 《奇幻森林》]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[八大排序]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[插入排序（直接插入排序、希尔排序） 交换排序（冒泡排序、快速排序） 选择排序（直接选择排序、堆排序） 归并排序 分配排序（基数排序）所需辅助空间最多：归并排序所需辅助空间最少：堆排序平均速度最快：快速排序不稳定：快速排序、希尔排序、堆排序直接插入排序基本思想：在要排序的一组数中，假设前面（n-1）个数已经有序，现在要把第n个数插到前面的有序数中，使得这n个数也是有序的。如此反复循环，直到全部有序。 12345678910111213141516171819import java.util.*;public class InsertSort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp = 0; for(int i=1;i&lt;a.length;i++)&#123; int j=i-1; temp=a[i]; for(;j&gt;=0&amp;&amp;temp&lt;a[j];j--)&#123; a[j+1]=a[j];//将大于temp的值整体后移一位 &#125; a[j+1]=temp; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 算法分析： 最佳情况：O(n) 最坏情况：O(n^2) 平均时间复杂度：O(n^2) 空间复杂度：O(1) 稳定排序算法 希尔排序（最小增量排序）基本思想：先将要排序的一组数按某个增量d分成若干组，每组中记录的下标相差d。对每组中全部元素进行直接插入排序，然后再用一个较小的增量对它进行分组，在每组中再进行直接插入排序。当增量减到1，进行直接插入排序后，排序完成。 123456789101112131415161718192021222324252627282930import java.util.*;public class ShellFort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp = 0; double d1=a.length; while(true)&#123; d1=Math.ceil(d1/2); int d = (int) d1; for(int x=0;x&lt;d;x++)&#123; for(int i=x+d;i&lt;a.length;i+=d)&#123; int j=i-d; temp=a[i]; for(;j&gt;=0&amp;&amp;temp&lt;a[j];j-=d)&#123; a[j+d]=a[j]; &#125; a[j+d]=temp; &#125; &#125; if(d==1)&#123; break; &#125; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 算法分析 最佳情况：O(nlogn) 最坏情况：O(nlogn) 平均时间复杂度：O(nlogn) 空间复杂度：O(1) 不稳定排序算法 简单选择排序基本思想：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止 123456789101112131415161718192021222324import java.util.*;public class SelectSort &#123; public static void main(String args[])&#123; int a[] = &#123;49,38,65,97,76&#125;; int position=0; for(int i=0;i&lt;a.length;i++)&#123; int j=i+1; position=i; int temp=a[i]; for(;j&lt;a.length;j++)&#123; if(a[j]&lt;temp)&#123; temp=a[j]; position=j; &#125; &#125; a[position]=a[i]; a[i]=temp; &#125; for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 算法分析 最佳情况：O(n^2) 最差情况：O(n^2) 平均时间复杂度：O(n^2) 空间复杂度：O(1) 不稳定排序算法 堆排序基本思想：堆排序是一种树形选择排序，是对直接选择排序的优化。堆的定义：具有n个元素的序列（h1,h2…hn）,当且仅当满足(hi&gt;=h2i,hi&gt;=2i+1)或(hi&lt;=h2i,hi&lt;=2i+1)(i=1,2,….,n/2)时称为堆。堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二叉树可以很直观地表示堆的结构。 堆排序需要两个过程 建堆 堆顶与堆的最后一个元素交换位置这就对应了堆排序的两个函数 建堆 交换，从堆中踢出最大数 剩余结点再建堆，再交换踢出最大数 以此类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。 12345678910111213141516171819202122232425262728293031323334353637383940414243import java.util.*;public class Test &#123; private static void swap(int[] data,int i,int j)&#123; int tmp=data[i]; data[i]=data[j]; data[j]=tmp; &#125; private static void buildMaxHeap(int[] data,int lastIndex)&#123; for(int i=(lastIndex-1)/2;i&gt;=0;i--)&#123; int k=i; while(k*2+1&lt;=lastIndex)&#123; int biggerIndex=2*k+1; if(biggerIndex&lt;lastIndex)&#123; if(data[biggerIndex]&lt;data[biggerIndex+1])&#123; biggerIndex++; &#125; &#125; if(data[k]&lt;data[biggerIndex])&#123; swap(data,k,biggerIndex); k=biggerIndex; &#125; else&#123; break; &#125; &#125; &#125; &#125; public static void heapSort(int[] a)&#123; System.out.println("开始排序"); int arrayLength=a.length; for(int i=0;i&lt;arrayLength-1;i++)&#123; buildMaxHeap(a,arrayLength-1-i); swap(a,0,arrayLength-1-i); System.out.println(Arrays.toString(a)); &#125; &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; heapSort(a); &#125;&#125; 算法分析 最佳情况：O(nlogn) 最坏情况：O(nlogn) 平均时间复杂度：O(nlogn) 空间复杂度：O(1) 不稳定排序算法 冒泡排序基本思想：在要排序的一组数中。对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。 12345678910111213141516171819import java.util.*;public class BubbleSort &#123; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; int temp=0; for(int i=0;i&lt;a.length-1;i++)&#123; for(int j=0;j&lt;a.length-1-i;j++)&#123; if(a[j]&gt;a[j+1])&#123; temp=a[j]; a[j]=a[j+1]; a[j+1]=temp; &#125; &#125; &#125;for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]);&#125; &#125;&#125; 算法分析 最佳情况：O(n) 最差情况：O(n^2) 平均时间复杂度：O(n^2) 空间复杂度为O(1) 稳定排序算法 快速排序基本思想：选择一个基准元素，通常选择第一个元素或者最后一个元素，通过一趟扫描，将待排序序列分成两部分，一部分比基准元素小，一部分大于等于基准元素，此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。 12345678910111213141516171819202122232425262728293031323334353637383940import java.util.*;public class Test &#123; public static int getMiddle(int[] list,int low,int high)&#123; int tmp=list[low]; while(low&lt;high)&#123; while(low&lt;high&amp;&amp;list[high]&gt;=tmp)&#123; high--; &#125; list[low]=list[high]; while(low&lt;high&amp;&amp;list[low]&lt;=tmp)&#123; low++; &#125; list[high]=list[low]; &#125; list[low]=tmp; return low; &#125; public static void quickSort(int[] list, int low,int high)&#123; if(low&lt;high)&#123; int middle=getMiddle(list, low, high); quickSort(list,low,middle-1); quickSort(list,middle+1,high); &#125; &#125; public static void quick(int[] a2)&#123; if(a2.length&gt;0)&#123; quickSort(a2,0,a2.length-1);; &#125; &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; quick(a); for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125; &#125;&#125; 算法分析： 最佳情况：O(nlogn) 最坏情况：O(n^2) 平均时间复杂度：O(nlogn) 空间复杂度：O(nlogn) 不稳定排序算法 归并排序基本思想：归并排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后把子序列合并成整体有序序列。 1234567891011121314151617181920212223242526272829303132333435363738394041import java.util.*;public class Test &#123; public static void sort(int[] data,int left,int right)&#123; if(left&lt;right)&#123; int center=(left+right)/2; sort(data,left,center); sort(data, center+1, right); merge(data,left,center,right); &#125; &#125; public static void merge(int[] data,int left,int center,int right)&#123; int [] tmpArr=new int[data.length]; int mid=center+1; int third=left; int tmp=left; while(left&lt;=center&amp;&amp;mid&lt;=right)&#123; if(data[left]&lt;=data[mid])&#123; tmpArr[third++]=data[left++]; &#125; else&#123; tmpArr[third++]=data[mid++]; &#125; &#125; while(mid&lt;=right)&#123; tmpArr[third++]=data[mid++]; &#125; while(left&lt;=center)&#123; tmpArr[third++]=data[left++]; &#125; while(tmp&lt;=right)&#123; data[tmp]=tmpArr[tmp++]; &#125; System.out.println(Arrays.toString(data)); &#125; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; sort(a,0,a.length-1); for(int i=0;i&lt;a.length;i++) System.out.println(a[i]); &#125;&#125; 算法分析 最佳情况：O(n) 最坏情况：O(nlogn) 平均时间复杂度：O(nlogn) 空间复杂度：O(n) 稳定排序算法 基数排序基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.util.*;public class Test &#123; public static void main(String[] args)&#123; int a[] = &#123;49,38,65,97,76&#125;; sort(a); for(int i=0;i&lt;a.length;i++)&#123; System.out.println(a[i]); &#125;&#125;public static void sort(int[] array)&#123; int max=array[0]; for(int i=1;i&lt;array.length;i++)&#123; if(array[i]&gt;max)&#123; max=array[i]; &#125; &#125; int time=0; while(max&gt;0)&#123; max/=10; time++; &#125; List&lt;ArrayList&gt;queue=new ArrayList&lt;ArrayList&gt;(); for(int i=0;i&lt;10;i++)&#123; ArrayList&lt;Integer&gt;queue1=new ArrayList&lt;Integer&gt;(); queue.add(queue1); &#125; for(int i=0;i&lt;time;i++)&#123; for(int j=0;j&lt;array.length;j++)&#123; int x= array[j]%(int)Math.pow(10, i+1)/(int)Math.pow(10, i); ArrayList&lt;Integer&gt;queue2=queue.get(x); queue2.add(array[j]); queue.set(x,queue2); &#125; int count=0; for(int k=0;k&lt;10;k++)&#123; while(queue.get(k).size()&gt;0)&#123; ArrayList&lt;Integer&gt;queue3=queue.get(k); array[count]=queue3.get(0); queue3.remove(0); count++; &#125; &#125; &#125;&#125;&#125; 算法分析： 最佳情况：O(n*k) 最坏情况：O(n*k) 平均时间复杂度：O(n*k) 空间复杂度：O(n) 稳定排序算法]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛神赋]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E6%B4%9B%E7%A5%9E%E8%B5%8B%2F</url>
    <content type="text"><![CDATA[洛神赋 【作者】曹植 【朝代】魏晋黄初三年，余朝京师，还济洛川。古人有言，斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其辞曰： 余从京域，言归东藩。背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则末察，仰以殊观，睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯？若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王所见，无乃日乎？其状若何？臣愿闻之。” 余告之曰：“其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。仿佛兮若轻云之蔽月，飘摇兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜，明眸善睐，靥辅承权。瑰姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。 于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。壤皓腕于神浒兮，采湍濑之玄芝。余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修，羌习礼而明诗。抗琼［王弟］以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。 于是洛灵感焉，徙倚彷徨，神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。 尔乃众灵杂遢，命俦啸侣，或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神，凌波微步，罗袜生尘。动无常则，若危若安。进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。 于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉鸾以偕逝。六龙俨其齐首，载云车之容裔，鲸鲵踊而夹毂，水禽翔而为卫。 于是越北沚。过南冈，纡素领，回清阳，动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮。哀一逝而异乡。无微情以效爱兮，献江南之明。虽潜处于太阳，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。 于是背下陵高，足往神留，遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘返，思绵绵督。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。 备注：赋，是我国古代的一种文体，它讲究文采，韵律，兼具诗歌和散文性质。是以“铺采摛文，体物写志”为手段，侧重于写景，借景抒情。以“颂美”和“讽喻”为目的的一种有韵文体。它多用铺陈叙事的手法，赋必须押韵，这是赋区别于其他文体的一个主要特征。 起于战国，盛于两汉。赋最早出现于诸子散文中，叫”短赋“；以屈原为代表的”骚体“是诗向赋的过渡，叫”骚赋“；汉代正式确立了赋的体例，称为“辞赋”；魏晋以后，赋日益向骈文方向发展，叫做“骈赋”；唐代又由骈体转为律体，叫“律赋”；宋代用散文的形式写赋，称“文赋”。著名的赋体文章有司马相如的《子虚赋》，杜牧的《阿房宫赋》，欧阳修的《秋声赋》，苏轼的《赤壁赋》等。作者曹植以浪漫主义的手法，通过梦幻的境界，描写人神之间的真挚爱情，但终因“人神殊道”无从结合而惆怅分离。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[长恨歌]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E9%95%BF%E6%81%A8%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[长恨歌 【唐】 白居易 汉皇重色思倾国，御宇多年求不得。 杨家有女初长成，养在深闺人未识。 天生丽质难自弃，一朝选在君王侧。 回眸一笑百媚生，六宫粉黛无颜色。 春寒赐浴华清池，温泉水滑洗凝脂。 侍儿扶起娇无力，始是新承恩泽时。 云鬓花颜金步摇，芙蓉帐暖度春宵。 春宵苦短日高起，从此君王不早朝。 承欢侍宴无闲暇，春从春游夜专夜。 后宫佳丽三千人，三千宠爱在一身。 金屋妆成娇侍夜，玉楼宴罢醉和春。 姊妹弟兄皆列土，可怜光彩生门户。 遂令天下父母心，不重生男重生女。 骊宫高处入青云，仙乐风飘处处闻。 缓歌谩舞凝丝竹，尽日君王看不足。 渔阳鼙鼓动地来，惊破霓裳羽衣曲。 九重城阙烟尘生，千乘万骑西南行。 翠华摇摇行复止，西出都门百余里。 六军不发无奈何，宛转蛾眉马前死。 花钿委地无人收，翠翘金雀玉搔头。 君王掩面救不得，回看血泪相和流。 黄埃散漫风萧索，云栈萦纡登剑阁。 峨嵋山下少人行，旌旗无光日色薄。 蜀江水碧蜀山青，圣主朝朝暮暮情。 行宫见月伤心色，夜雨闻铃肠断声。 天旋地转回龙驭，到此踌躇不能去。 马嵬坡下泥土中，不见玉颜空死处。 君臣相顾尽沾衣，东望都门信马归。 归来池苑皆依旧，太液芙蓉未央柳。 芙蓉如面柳如眉，对此如何不泪垂。 春风桃李花开日，秋雨梧桐叶落时。 西宫南内多秋草，落叶满阶红不扫。 梨园弟子白发新，椒房阿监青娥老。 夕殿萤飞思悄然，孤灯挑尽未成眠。 迟迟钟鼓初长夜，耿耿星河欲曙天。 鸳鸯瓦冷霜华重，翡翠衾寒谁与共。 悠悠生死别经年，魂魄不曾来入梦。 临邛道士鸿都客，能以精诚致魂魄。 为感君王辗转思，遂教方士殷勤觅。 排空驭气奔如电，升天入地求之遍。 上穷碧落下黄泉，两处茫茫皆不见。 忽闻海上有仙山，山在虚无缥渺间。 楼阁玲珑五云起，其中绰约多仙子。 中有一人字太真，雪肤花貌参差是。 金阙西厢叩玉扃，转教小玉报双成。 闻道汉家天子使，九华帐里梦魂惊。 揽衣推枕起徘徊，珠箔银屏迤逦开。 云鬓半偏新睡觉，花冠不整下堂来。 风吹仙袂飘飘举，犹似霓裳羽衣舞。 玉容寂寞泪阑干，梨花一枝春带雨。 含情凝睇谢君王，一别音容两渺茫。 昭阳殿里恩爱绝，蓬莱宫中日月长。 回头下望人寰处，不见长安见尘雾。 惟将旧物表深情，钿合金钗寄将去。 钗留一股合一扇，钗擘黄金合分钿。 但教心似金钿坚，天上人间会相见。 临别殷勤重寄词，词中有誓两心知。 七月七日长生殿，夜半无人私语时。 在天愿作比翼鸟，在地愿为连理枝。 天长地久有时尽，此恨绵绵无绝期。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好了歌]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E5%A5%BD%E4%BA%86%E6%AD%8C%2F</url>
    <content type="text"><![CDATA[红楼梦原文甄士隐知投人不著，心中未免悔恨，再兼上年惊唬，急忿怨痛已伤，暮年之人，贫病交攻，竟渐渐的露出那下世的光景来。可巧这日拄了拐杖挣到街前散散心时，忽见那边来了一个跛足道人，疯癫落拓，麻鞋鹑衣，口内念着几句言词道：世人都晓神仙好，惟有功名忘不了！古今将相在何方？荒冢一堆草没了。世人都晓神仙好，只有金银忘不了！终朝只恨聚无多，及到多时眼闭了。世人都晓神仙好，只有娇妻忘不了！君生日日说恩情，君死又随人去了。世人都晓神仙好，只有儿孙忘不了！痴心父母古来多，孝顺儿孙谁见了？ 士隐听了，便迎上来道：“你满口说些甚么？只听见些‘好了’‘好了’。”那道人笑道：“你若果听见‘好了’二字，还算你明白。可知世上万般，好便是了，了便是好。若不了，便不好；若要好，须是了。我这歌儿便名《好了歌》。”士隐本是有夙慧的，一闻此言，心中早已彻悟，因笑道：“且住！待我将你这《好了歌》注解出来何如？”道人笑道：“你就请解。”士隐乃说道：陋室空堂，当年笏满床。衰草枯杨，曾为歌舞场。蛛丝儿结满雕梁，绿纱今又糊在蓬窗上。说甚么脂正浓、粉正香，如何两鬓又成霜？昨日黄土陇头送白骨，今宵红灯帐底卧鸳鸯。金满箱，银满箱，展眼乞丐人皆谤。正叹他人命不长，那知自己归来丧！训有方，保不定日后作强梁。择膏粱，谁承望流落在烟花巷！因嫌纱帽小，致使锁枷杠，昨怜破袄寒，今嫌紫蟒长。乱烘烘你方唱罢我登场，反认他乡是故乡。甚荒唐，到头来都是为他人作嫁衣裳。]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[归并排序]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[归并排序 最基本的2-路归并排序。 原理：将序列两两分组，将序列归并为[n/2]个组，组内单独排序；然后将这些组再两两归并， 生成[n/4]个组，组内在单独排序；以此内推，直到只剩下一个组为止。 时间复杂度为O(nlogn)例：将序列{66,12,33,57,64,27,18}进行2路归并排序 第一趟 { { 12,66 },{ 33,57 },{ 27,64 },{ 18 } } 第二题 { { 12,33,57,66 },{ 18,27,64 } } 第三趟{12,18,27,33,57,64,66} 递归实现 1234567891011121314151617181920212223242526const int maxn=100;void merge(int a[],int l1,int r1,int l2,int r2)&#123; int i=l1,j=l2; int temp[maxn],index=0;//temp临时存放合并后的数组，index为其下标 while(i&lt;=r1&amp;&amp;j&lt;=r2)&#123; if(a[i]&lt;=a[j])&#123; temp[index++]=a[i++]; &#125; else&#123; temp[index++]=a[j++]; &#125; &#125; while(i&lt;=r1) temp[index++]=a[i++]; while(j&lt;=r2) temp[index++]=a[j++]; for(i=0;i&lt;index;i++)&#123; a[l1+i]=temp[i]; &#125;&#125;void mergeSort(int a[],int left,int right)&#123; if(left&lt;right)&#123; int mid=(left+right)/2; mergeSort(a,left,mid); //左子区间归并排序 mergeSort(a,mid+1,right);//右子区间归并排序 merge(a,left,mid,mid+1,right); 将左右子区间合并 &#125;&#125; 非递归实现 12345678910void mergeSort(int a[])&#123; for(int step=2;step/2&lt;=n;step*=2)&#123; for(int i=1;i&lt;=n;i+=step)&#123; int mid=i+step/2-1; if(mid+1&lt;=n)&#123; //sort(a+i,a+min(i+step,n+1)); merge(a,i,mid,mid+1,min(i+step-1,n)) &#125; &#125; &#125; &#125;]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[区间贪心]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83%2F</url>
    <content type="text"><![CDATA[贪心 贪心是用来解决一类最优化问题，并希望由局部最优策略来推得全局最优结果的算法思想。 贪心算法使用的问题一定满足最优子结构性质，即一个问题的最优解可以由它的子问题的最优解有效地构造出来。 区间不相交问题： 给出n个开区间(x,y),从中选择尽可能多的区间，使得这些开区间两两没有交集。 首先考虑最简单的情况，即开区间I1被开区间I2包含，那么I1显然是最好的选择，因为这样就有更大的空间去容纳其他区间。 之后将所有开区间按左端点x从大到小排序，总是先选择左端点最大的区间。当然也可以考虑选择右端点最小的区间。123456789101112131415161718192021222324252627282930#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=110;struct Inteval&#123; int x,y;&#125;q[maxn];bool cmp(Inteval a,Inteval b)&#123; if(a.x!=b.x) return a.x&gt;b.x; else return a.y&lt;b.y;&#125;int main()&#123; int n; while(scanf("%d",&amp;n),n!=0)&#123; for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;q[i].x,&amp;q[i].y); &#125; sort(q,q+n,cmp); int ans = 1,lastx = q[0].x; for(int i=1;i&lt;n;i++)&#123; if(q[i].y&lt;=lastx)&#123; lastx=q[i].x; ans++; &#125; &#125; printf("%d\n",ans); &#125; return 0;&#125; 区间选点问题： 给出n个闭区间[x,y],求最少需要确定多少个点，才能使每个闭区间中都至少存在一个点。]]></content>
      <categories>
        <category>算法和数据结构</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ZCMU2034]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FZCMU-2034%2F</url>
    <content type="text"><![CDATA[阶乘计算Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 43 Solved: 34[Submit][Status][Web Board]Description输入一个正整数n，输出n!的值。其中n!=1 2 3 …n。算法描述n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。 Input 输入包含一个正整数n，n&lt;=1000。 Output 输出n!的准确值。 Sample Input10Sample Output3628800HINTSource基础练习 相当于是大数的阶乘，也就是基本类型存不下，需要用数组来进行模拟。123456789101112131415161718192021222324252627#include&lt;stdio.h&gt; #include&lt;string.h&gt; int main() &#123; int a[3000],i,j,n; int c=0,s; memset(a,0,sizeof(a)); scanf("%d",&amp;n); a[0]=1; for(i=2;i&lt;=n;i++) &#123; for(j=0;j&lt;3000;j++) &#123; s=a[j]*i+c; a[j]=s%10; c=s/10;//保留进位 &#125; &#125; for(i=2999;i&gt;=0;i--) if(a[i]) break; for(j=i;j&gt;=0;j--) &#123; printf("%d",a[j]); &#125; return 0; &#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZCMU-1620]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3%E9%9B%86%2FZCMU-1620%2F</url>
    <content type="text"><![CDATA[1620: 全排列Time Limit: 1 Sec Memory Limit: 128 MBSubmit: 198 Solved: 89[Submit][Status][Web Board]Description给定n个数 a[0] , a[1] …….. a[n-1], 输出其全排列。 Input第一行输入一个数n，（n&lt;7） 接下来一行输入n个数。 Output按字典序从小到大输出全排列 Sample Input31 2 331 2 2Sample Output1 2 31 3 22 1 32 3 13 1 23 2 11 2 22 1 22 2 1HINT 全排列，枚举排列常用的方法有两种：一种是递归枚举，另一种是用STL中的next_permutation 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;void print_permutation(int n,int *p,int *a,int cur)&#123; if(cur==n) &#123; for(int i=0;i&lt;n-1;i++) &#123; printf("%d ",a[i]); &#125; printf("%d\n",a[n-1]); &#125; else for(int i=0;i&lt;n;i++) if(!i||p[i]!=p[i-1]) &#123; int ok=1; int c1=0,c2=0; for(int j=0;j&lt;cur;j++)if(a[j]==p[i]) c1++; for(int j=0;j&lt;n;j++) if(p[i]==p[j]) c2++; if(c1&lt;c2)&#123; a[cur]=p[i]; print_permutation(n,p,a,cur+1); &#125; &#125;&#125;int main()&#123; int n,p[10],a[1000]; while(~scanf("%d",&amp;n)) &#123; memset(a,0,sizeof(a)); for(int i=0;i&lt;n;i++) &#123; scanf("%d",&amp;p[i]); &#125; sort(p,p+n); print_permutation(n,p,a,0); &#125; return 0;&#125; 123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,a[10]; while(cin&gt;&gt;n) &#123; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n); do &#123; for(int i=0;i&lt;n-1;i++) printf("%d ",a[i]); printf("%d\n",a[n-1]); &#125;while(next_permutation(a,a+n)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解集</category>
      </categories>
      <tags>
        <tag>ZCMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《控方证人》观后感]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E3%80%8A%E6%8E%A7%E6%96%B9%E8%AF%81%E4%BA%BA%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[这个周末有点小忙哈哈，没办法，得准备Ｊａｖａ课件呀，好歹也是个愚人节呢，得让自己放松下，于是花了点时间看了部老电影《控方证人》，一部上世纪６０年代的电影，一部黑白片。我一般不大会特意去找某部电影，一些早已被广为认可的经典我会时不时抽几部欣赏欣赏，很少有令我失望过，当然，这次也不例外。 很好的一部剧情片，惊悚我倒没怎么感觉到，但不得不说，一流的演员以及一流的剧本让我佩服不已，至少我是被骗到了，结局在我的意料之外，当然中间确实有些困惑的地方，我很理解为什么沃尔的妻子竟然当起了控方证人。影片开始，个性鲜明的律师威尔弗里德爵士便出现在荧幕上，很有意思的一个家伙，一看到雪茄就耐不住想吸上一口，看似嘴不饶人，其实内心善良热诚。他身边的护士尽管一天到晚啰里啰嗦招人烦，却也是真正为威尔弗里德爵士的健康着想。紧接着，剧情展开，控方与被告的辩论也即将展开。 我为什么说我被骗到了，起初我真的认为沃尔是无辜的，是被冤枉的，富婆的死只是被某个入室抢劫犯误杀了，紧接着，伟大的威尔弗里德爵士作为正义的化身，冒着身体旧病复发的风险为沃尔展开辩护，然后一步步过关斩将，去的胜利，沃尔无罪释放！看，结局多么美好，但细想一番，若真是如此，这剧情片恐怕也难成为经典了。开头的警巡，包括之后的女佣，这两人的证词在我看来都很正常，警巡，按照职业习惯进行了正常的回答。至于女佣，势利的姿态可以说是展现的很充分，哈哈，这世上没有无缘无故的恨，沃尔的出现让本该属于她的遗产瞬间成为一场空，他恨透了沃尔，巴不得看着他上绞刑架．．但后一位控方证人让我难以理解，那就是沃尔的妻子克里斯汀，她的出现让我困惑，我相信威尔弗里德爵士当时也是和我相似的心情。看似恩爱的夫妻有什么理由说反目就反目呢，难道之前的感情本就是虚假的？没看到结尾，我真的没猜到这对夫妻竟然都在演戏，在法庭上演了一出精彩的戏。只不过人人喊打的克里斯汀确是陷入爱情的有心人，而看似无辜的沃尔才是花心大萝卜，才是真凶。法律规定，嫌疑人的妻子是无法为其辩护的，证词无效，于是克里斯汀就想到了该当控告，直到最后决定判决的那几分情书信纸，也不过只是她的计划一部分。好可怕的一个女人，竟然铁定了心犯伪证罪也要救这样一个花心大萝卜，难以理解。两个人一唱一和的一出戏，骗过了整个法庭，我没有想到，沃尔竟然真的杀了富婆，更没想到克里斯汀知道是他杀了富婆还要牺牲自己就他，更没想到两人的感情，谁是真心，谁是假意让我一脸蒙蔽，人生如戏，全靠演技呀！哈哈哈～～]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2017书单]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E6%88%91%E7%9A%842017%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[你好,这是我的2017书单。1、《平凡的世界》2、《霜冷长河》3、《霍乱时期的爱情》4、《文化苦旅》5、《千年一叹》6、《许三观卖血记》7、《白夜行》8、《嫌疑人X的献身》9、《解忧杂货店》10、《资治通鉴》11、《活着》12、《三体》13、《百年孤独》14、《活着为了讲述》15、《人生》16、《偷影子的人》17、《黄金时代》18、《无声告白》19、《小王子》20、《夜莺与玫瑰》21、《飘》22、《海边的卡夫卡》23、《东方快车上的谋杀案》24、《挪威的森林》25、《雪国》26、《不能承受的生命之轻》27、《恶意》28、《陶庵梦忆》29、《红楼梦》30、《沉默的大多数》31、《少年维特的烦恼》32、《傲慢与偏见》33、《麦田里的守望者》34、《北岛诗集》35、《顾城诗集》36、《海子诗集》37、《余光中散文诗集》38、《鳄鱼街》39、《自由在高处》40、《愿你与这世界温暖相拥》41、《很高兴见到你》42、《无证之罪》43、《白马山庄杀人事件》44、《浮士德》45、《老人与海》46、《北鸢》47、《菜根谭》48、《单恋》49、《鬼谷子》50、《人类群星闪耀时》51、《人间词话》52、《古文观止》53、《假面饭店》54、《幻夜》55、《看见》56、《撒哈拉的故事》57、《月亮和六便士》58、《漫漫自由路》59、《1984》60、《1980年代的爱情》61、《本草纲目》62、《傅雷家书》63、《我们三》64、《围城》65、《钱钟书传》66、《草房子》67、《我的职业是小说家》68、《爱你就像爱生命》69、《这些人那些事》70、《明朝那些事》]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++字符串操作]]></title>
    <url>%2F%E8%AF%AD%E8%A8%80%2FC%2B%2B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1）字符串操作strcpy(p, p1) 复制字符串strncpy(p, p1, n) 复制指定长度字符串strcat(p, p1) 附加字符串strncat(p, p1, n) 附加指定长度字符串strlen(p) 取字符串长度strcmp(p, p1) 比较字符串strcasecmp忽略大小写比较字符串strncmp(p, p1, n) 比较指定长度字符串strchr(p, c) 在字符串中查找指定字符strrchr(p, c) 在字符串中反向查找strstr(p, p1) 查找字符串strpbrk(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找该集合的任一元素strspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找不属于该集合的任一元素的偏移strcspn(p, p1) 以目标字符串的所有字符作为集合，在当前字符串查找属于该集合的任一元素的偏移 具有指定长度的字符串处理函数在已处理的字符串之后填补零结尾符 2）字符串到数值类型的转换strtod(p, ppend) 从字符串 p 中转换 double 类型数值，并将后续的字符串指针存储到 ppend 指向的 char* 类型存储。strtol(p, ppend, base) 从字符串 p 中转换 long 类型整型数值，base 显式设置转换的整型进制，设置为 0 以根据特定格式判断所用进制，0x, 0X 前缀以解释为十六进制格式整型，0 前缀以解释为八进制格式整型atoi(p) 字符串转换到 int 整型atof(p) 字符串转换到 double 符点数atol(p) 字符串转换到 long 整型 12345678910111213141516void *memset(void *dest, int c, size_t count); 将dest前面count个字符置为字符c. 返回dest的值.void *memmove(void *dest, const void *src, size_t count); 从src复制count字节的字符到dest. 如果src和dest出现重叠, 函数会自动处理. 返回dest的值.void *memcpy(void *dest, const void *src, size_t count); 从src复制count字节的字符到dest. 与memmove功能一样, 只是不能处理src和dest出现重叠. 返回dest的值.void *memchr(const void *buf, int c, size_t count); 在buf前面count字节中查找首次出现字符c的位置. 找到了字符c或者已经搜寻了count个字节, 查找即停止. 操作成功则返回buf中首次出现c的位置指针, 否则返回NULL.void *_memccpy(void *dest, const void *src, int c, size_t count); 从src复制0个或多个字节的字符到dest. 当字符c被复制或者count个字符被复制时, 复制停止.如果字符c被复制, 函数返回这个字符后面紧挨一个字符位置的指针. 否则返回NULL. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950实现strcpy函数,将源串strSrc的内容复制到目标串strDest，返回值为指向目标串的指针char *strcpy(char *strDest,const char *strSrc)//源字符串+const，表明其为输入参数&#123; assert((strDest!=NULL&amp;&amp;(strSrc!=NULL))); //对源地址和目的地址加非0判断 char *address=strDest; while((*strDest++=*strSrc++)!='\0'); return address;&#125;实现strcat函数：将源串添加到str1的末尾，同时覆盖旧串末尾的'\0',在新串末尾+'\0',返回指向str1的指针。char *strcat(char *str1,char *str2)&#123; char *p=str1; assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(*str1!='\0') str1++; while(*str1++=*str2++); return p;&#125;strcmp函数：比较str1和str2两个字符串的大小，若str1&gt;str2，则返回正数；若str1&lt;str2，则返回负数；若str1==str2，则返回0。int strcmp(const char *str1,const char *str2)&#123; assert((str1!=NULL)&amp;&amp;(str2!=NULL)); while(*str1&amp;&amp;*str2&amp;&amp;(*str1==*str2)) &#123; str1++; str2++; &#125; return *str1-*str2;&#125;void memset(void *s,int c,size_t n) //将已开辟内存空间s的首n个字节的值设为c&#123; assert(s!=NULL); char *tmp=(char *)s; while(n--) &#123; *tmp++=(char)c; &#125; return s;&#125;void memcpy(void *dest,const void *src,size_t n)//从源src所指的内存地址的起始位置开始拷贝n个字节到目标dest所指的内存地址的起始位置中&#123; assert(dest!=NULL&amp;&amp;src!=NULL); char *tmpdest=(char *)dest; char *tmpsrc=(char *)src; while(n-- &gt;0) *tmpdest++=*tmpsrc++; return dest;&#125; 实现C的strstr功能：从字符串str1中查找是否有字符串str2， -如果有，从str1中的str2位置起，返回str1中str2起始位置的指针，如果没有，返回null。12345678910111213141516171819202122232425262728293031323334353637383940414243char *mystrstr(char *s1 , char *s2) &#123; if(*s1==0) &#123; if(*s2) return(char*)NULL; return (char*)s1; &#125; while(*s1) &#123; int i=0; while(1) &#123; if(s2[i]==0) return s1; if(s2[i]!=s1[i]) break; i++; &#125; s1++; &#125; return (char*)NULL; &#125; class Solution &#123; public: char *strStr(char *haystack, char *needle) &#123; // Start typing your C/C++ solution below // DO NOT write int main() function int i,j; for (i = j = 0; haystack[i] &amp;&amp; needle[j];) &#123; if (haystack[i] == needle[j]) &#123; ++i; ++j; &#125; else &#123; i = i - j + 1; j = 0; &#125; &#125; return needle[j]?0:(haystack + i - j); &#125; &#125;; 用C语言实现函数void memmove(void dest, const void *src, size_t n)。memmove函数的功能死拷贝src所指向内存内容前n个字节到dest所指的地址上。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;void * my_memmove( void * const dest, const char * const src, size_t n )&#123; // check parameters if( 0 == n ) &#123; return NULL; &#125; if( NULL == dest || NULL == src ) &#123; return NULL; &#125; char * psrc = (char *)src; char * pdest = (char *)dest; if( pdest &lt;= psrc || pdest &gt; psrc + n ) &#123; std::cout &lt;&lt; "forward overlapping" &lt;&lt; std::endl; // copy forward direction for( size_t i = 0; i &lt; n; i++ ) &#123; *pdest = *psrc; pdest++; psrc++; &#125; &#125; else &#123; std::cout &lt;&lt; "backward overlapping" &lt;&lt; std::endl; // copy backward direction pdest = pdest + n; psrc = psrc + n; for( size_t i = 0; i&lt; n; i++ ) &#123; *pdest = *psrc; pdest--; psrc--; &#125; &#125; return dest;&#125;int main( int argc, char ** argv )&#123; char *src = new char[100]; sprintf( src, "%s", "hello world!" ); char * dest = new char[100]; memset( dest, 0, 100*sizeof(char ) ); std::cout &lt;&lt; src &lt;&lt; std::endl; char * result = (char*)my_memmove( dest, src, strlen(src) ); std::cout &lt;&lt; result &lt;&lt; std::endl; delete src; delete dest; return 0;&#125; 设计一个反转字符串的函数 char reverse_str(char str),不使用系统函数。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 递归实现字符串反转 char *reverse(char *str) &#123; if( !str ) &#123; return NULL; &#125; int len = strlen(str); if( len &gt; 1 ) &#123; char ctemp =str[0]; str[0] = str[len-1]; str[len-1] = '/0';// 最后一个字符在下次递归时不再处理 reverse(str+1); // 递归调用 str[len-1] = ctemp; &#125; return str; &#125; // 非递归实现字符串反转 char *reverse(char *str) &#123; if( !str ) &#123; return NULL; &#125; int len = strlen(str); char temp; for( int i = 0; i &lt; len / 2; i++ ) &#123; // 交换前后两个相应位置的字符 temp = *(str + i); *(str + i) = *(str + len - 1 - i); *(str + len - 1 - i) = temp; &#125; return str; &#125; int _tmain(int argc, _TCHAR* argv[]) &#123; char src[] = &#123;"abcdef"&#125;; char *pdest = reverse(src); getchar(); return 0; &#125;]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016电影]]></title>
    <url>%2F%E5%BD%B1%E9%9F%B3%2F%E6%88%91%E7%9A%842016%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[你好,这是我的2016电影列表。1、《马力和马克思》2、《怦然心动》3、《天堂电影院》4、《海上钢琴师》5、《教父系列》6、《控方证人》7、《千与千寻》8、《从你的全世界路过》9、《战狼2》10、《金刚狼3》11、《大话西游系列》12、《鬼子来了》13、《让子弹飞》14、《天才枪手》15、《比利比恩的中场战事》16、《麦兜的故事》17、《美国丽人》18、《泰坦尼克号》19、《阿飞正传》20、《x森林系列》21、《辩护人》22、《记忆碎片》23、《哈尔的移动城堡》24、《烈日灼心》25、《一条狗的使命》26、《致命魔术》27、《星际穿越》28、《驯龙高手》29、《幸福终点站》30、《时空恋旅人》31、《致命ID》32、《你的名字》33、《幽灵公主》34、《盗梦空间》]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的2016书单]]></title>
    <url>%2F%E9%98%85%E8%AF%BB%2F%E6%88%91%E7%9A%842016%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[你好,这是我的2016书单。1、《一句顶一万句》2、《寻路中国》3、《人类简史》4、《一只特立独行的猪》5、《三国演义》6、《世说新语》7、《战国策》8、《春风沉醉的夜晚》9、《水浒传》10、《茶花女》11、《天黑以后》12、《悟空传》13、《苦妓回忆录》14、《不属于我们的世纪》15、《身份的焦虑》16、《追忆似水年华》17、《约翰克里斯多夫》18、《无名的裘德》19、《高老头》20、《浮生六记》21、《二手时间》22、《洗澡》23、《爱情和其他魔鬼》24、《芳华》25、《冰与火之歌》26、《远山淡影》27、《目送》28、《自深深处》29、《巨人的陨落》30、《余华短篇集》31、《基督山伯爵》32、《三个火枪手》33、《和喜欢的一切在一起》34、《弗兰克尔自传》35、《重新认识你自己》36、《二十四史》37、《长恨歌》38、《面包树上的女人》39、《追随你的心》40、《不能不去爱的两件事》41、《在这复杂世界里》42、《坏小孩》43、《季羡林私人史》44、《金瓶梅》45、《孤独六讲》46、《我们生活在巨大的差距里》47、《分身》48、《宿命》49、《快乐是在心里》50、《我的精神家园》51、《万历十五年》52、《撒切尔夫人传》53、《飞鸟集》54、《幻灭》55、《当我跑步时我谈些什么》56、《富爸爸、穷爸爸》57、《雅舍小品》58、《一个女子恋爱的时候》59、《从一到无穷大》60、《虚无的十字架》61、《资本论》62、《白说》63、《在细雨中呼喊》]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
</search>
