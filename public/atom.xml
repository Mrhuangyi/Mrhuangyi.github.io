<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你的小黄^_^</title>
  <icon>https://www.gravatar.com/avatar/3a25a3ab34305615e80247defadfd4f6</icon>
  <subtitle>做一名有情怀的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huangyiblog.com/"/>
  <updated>2018-10-22T13:36:40.547Z</updated>
  <id>http://huangyiblog.com/</id>
  
  <author>
    <name>Mr.Huangyi</name>
    <email>18757163093@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java容器概述</title>
    <link href="http://huangyiblog.com/%E8%AF%AD%E8%A8%80/Java%E5%AE%B9%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://huangyiblog.com/语言/Java容器概述/</id>
    <published>2018-10-22T08:39:48.000Z</published>
    <updated>2018-10-22T13:36:40.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java容器-Container"><a href="#Java容器-Container" class="headerlink" title="Java容器(Container)"></a>Java容器(Container)</h1><h2 id="什么是容器？"><a href="#什么是容器？" class="headerlink" title="什么是容器？"></a>什么是容器？</h2><p>容器可以管理对象的生命周期、对象与对象之间的依赖关系。<br>直白点说容器就是一段Java程序，能够帮助你管理对象间的关系，而不需要你自行编写程序处理。<br>维基百科定义：</p><blockquote><p>在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。<br>潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。</p></blockquote><a id="more"></a><h2 id="Java内部的容器类"><a href="#Java内部的容器类" class="headerlink" title="Java内部的容器类"></a>Java内部的容器类</h2><p>Java内部的容器类主要分为两类：Collection(集合)与Map(图)</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p><img src="http://pc5wd3ju6.bkt.clouddn.com/java-collections.png" alt="alt"></p><p><strong>Set</strong></p><ul><li><strong><em>HashSet</em></strong></li></ul><ol><li>基于哈希表实现，底层使用HashMap来保存所有元素。</li><li>不能保证迭代顺序</li><li>允许使用null元素</li></ol><ul><li><strong><em>LinkedHashSet</em></strong></li></ul><ol><li>LinkedHashSet底层使用LinkedHashMap来保存所有元素，它继承于HashSet。</li><li>内部使用双向链表维护插入顺序。</li></ol><ul><li><strong><em>TreeSet</em></strong></li></ul><ol><li>基于（TreeMap）红黑树实现</li><li>TreeSet非同步，线程不安全</li><li>TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。</li></ol><p><strong>List</strong></p><ul><li><strong><em>ArrayList</em></strong></li></ul><ol><li>实现 List 接口、底层使用数组保存所有元素。</li><li>相当于动态数组，支持动态扩容。</li><li>不同步</li></ol><ul><li><strong><em>vector</em></strong></li></ul><ol><li>Vector 可以实现可增长的对象数组。</li><li>Vector 实现 List 接口，继承 AbstractList 类，同时还实现RandmoAccess 接口，Cloneable 接口</li><li>Vector 是线程安全的</li></ol><ul><li><strong><em>LinkedList</em></strong><br>LinkedList 是基于链表实现的（通过名字也能区分开来），<br>所以它的插入和删除操作比 ArrayList 更加高效。但也是由于其为基于链表的，所以随机访问的效率要比 ArrayList 差。</li></ul><p><strong>Queue</strong></p><ul><li><p><strong><em>LinkedList</em></strong><br>可以用于实现双向队列</p></li><li><p><strong><em>PriorityQueue</em></strong><br>通过二叉小顶堆实现，可以用一棵完全二叉树表示。<br>可以用于实现优先队列。优先队列的作用是能保证每次取出的元素都是队列中权值最小的（Java的优先队列每次取最小元素，C++的优先队列每次取最大元素）。</p><h3 id="Map-用于映射（键值对）问题处理"><a href="#Map-用于映射（键值对）问题处理" class="headerlink" title="Map(用于映射（键值对）问题处理)"></a>Map(用于映射（键值对）问题处理)</h3></li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/java-collections1.png" alt="alt"></p><p><strong>HashMap</strong></p><ol><li>HashMap根据键的HashCode来实现，访问速度较快，遍历顺序并不确定。</li><li>HashMap最多只允许一条记录的键为null，允许多条记录的值为null。</li><li>HashMap线程不安全，也就是说任意时刻可以有多个线程同时写HashMap，所以可能会导致数据的不一致。</li><li>如何确保线程安全？可以用 Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</li></ol><p><strong>HashTable</strong></p><ol><li>HashTable是遗留类，多数功能与HashMap类似，继承自Dictionary类。</li><li>HashTable是线程安全的。也就是说任意时刻只有一个线程能够写HashTable。</li><li>HashTable的并发性不如ConcurrentHashMap，因为ConcurrentHashMap引入了分段锁。</li></ol><p><strong>LinkedHashMap</strong><br>基于哈希表和链表实现，借助双向链表确保迭代顺序是插入的顺序。</p><p><strong>TreeMap</strong></p><ol><li>基于红黑树实现</li><li>默认按照键值得升序进行排序。</li><li>在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，<br>否则会在运行时抛出java.lang.ClassCastException类型的异常。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java容器-Container&quot;&gt;&lt;a href=&quot;#Java容器-Container&quot; class=&quot;headerlink&quot; title=&quot;Java容器(Container)&quot;&gt;&lt;/a&gt;Java容器(Container)&lt;/h1&gt;&lt;h2 id=&quot;什么是容器？&quot;&gt;&lt;a href=&quot;#什么是容器？&quot; class=&quot;headerlink&quot; title=&quot;什么是容器？&quot;&gt;&lt;/a&gt;什么是容器？&lt;/h2&gt;&lt;p&gt;容器可以管理对象的生命周期、对象与对象之间的依赖关系。&lt;br&gt;直白点说容器就是一段Java程序，能够帮助你管理对象间的关系，而不需要你自行编写程序处理。&lt;br&gt;维基百科定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在计算机科学中，容器是指实例为其他类的对象的集合的类、数据结构、[1][2]或者抽象数据类型。换言之，它们以一种遵循特定访问规则的系统的方法来存储对象。容器的大小取决于其包含的对象（或元素）的数目。&lt;br&gt;潜在的不同容器类型的实现可能在空间和时间复杂度上有所差别，这使得在给定应用场景中选择合适的某种实现具有灵活性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="语言" scheme="http://huangyiblog.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://huangyiblog.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>24. 两两交换链表中的节点</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://huangyiblog.com/题解集/24-两两交换链表中的节点/</id>
    <published>2018-10-19T13:12:06.000Z</published>
    <updated>2018-10-19T13:39:12.731Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>示例:</p><p>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.<br>说明:</p><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>分析：<br>解法一：<br>题目要求两两链表中的结点，比较好想得应该还是直接遍历整个链表list，每次swap(list-&gt;val,list-&gt;next-&gt;val),但是题目明确要求了不能只是单纯的改变结点的数据域，所以上述方法尽管输出一样，但并不符合要求。<br>解法二：<br>首先定义一个dummy哑结点指向head作为首结点来辅助操作。<br>之后定义一个current指向给定链表，定义一个前去指针pre指向dummy，定义一个临时链表temp储存每次要进行操作的两个结点。例如给定链表{1,2,3,4},先让temp指向3，然后分割{1,2}和{3,4},<br>让2的后继指针指向1，之后让dummy指向2，让1指向3，最后让pre指向1，current指向3继续遍历。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  swapNodes.cpp</span></span><br><span class="line"><span class="comment">//  LeetCode</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by a on 2018/10/19.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018 Leetcode. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">creat</span><span class="params">( <span class="keyword">int</span> Array[])</span> </span>&#123;</span><br><span class="line">    ListNode *p, *pre, *head;</span><br><span class="line">    head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    pre = head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        p = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        p-&gt;val = Array[i];</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pre-&gt;next = p;</span><br><span class="line">        pre = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">( ListNode* head )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;next) &#123;</span><br><span class="line">        swap(p-&gt;val, p-&gt;next-&gt;val);</span><br><span class="line">        p = p-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs2</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    ListNode* current = head;</span><br><span class="line">    ListNode* pre = dummy;</span><br><span class="line">    ListNode* temp;</span><br><span class="line">    <span class="keyword">while</span>(current &amp;&amp; current-&gt;next) &#123;</span><br><span class="line">        temp = current-&gt;next-&gt;next;</span><br><span class="line">        current-&gt;next-&gt;next = current;</span><br><span class="line">        pre-&gt;next = current-&gt;next;</span><br><span class="line">        current-&gt;next = temp;</span><br><span class="line">        pre = current;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Array[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    ListNode* head1 = creat(Array);</span><br><span class="line">    ListNode* head2 = creat(Array);</span><br><span class="line">    ListNode* L = swapPairs(head1);</span><br><span class="line">    <span class="comment">//L = L-&gt;next;</span></span><br><span class="line">    ListNode* res = swapPairs2(head2);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(L != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, L-&gt;val);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(res != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, res-&gt;val);</span><br><span class="line">        res = res-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;br&gt;说明:&lt;/p&gt;
&lt;p&gt;你的算法只能使用常数的额外空间。&lt;br&gt;你不能只
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>支持推理小说家紫金陈</title>
    <link href="http://huangyiblog.com/%E9%98%85%E8%AF%BB/%E6%94%AF%E6%8C%81%E6%8E%A8%E7%90%86%E5%B0%8F%E8%AF%B4%E5%AE%B6%E7%B4%AB%E9%87%91%E9%99%88/"/>
    <id>http://huangyiblog.com/阅读/支持推理小说家紫金陈/</id>
    <published>2018-10-19T06:29:55.000Z</published>
    <updated>2018-10-20T05:53:21.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="紫金陈主要作品"><a href="#紫金陈主要作品" class="headerlink" title="紫金陈主要作品"></a>紫金陈主要作品</h1><ul><li>《推理之王1：无证之罪》（2014年实体书出版）</li><li>《推理之王2：坏小孩》（2014年实体书出版）</li><li>《推理之王3：长夜难明》（2017年出版）</li><li>《浙大夜惊魂》（2010年出版改名《禁忌之地》）</li><li>《谋杀官员1》（2012年）</li><li>《谋杀官员2：化工女王的逆袭》（2012年）</li><li>《谋杀官员3：物理教师的时空诡计》（2013年1月更新完）</li><li>《谋杀官员4：代上帝之手(完结)》（2013年）<blockquote><p>因为我自己主要就阅读了他的上述作品，所以其他书没有全都一一例举。 </p></blockquote></li></ul><a id="more"></a><p>　　一提到推理小说，估计很多人又想到了我们的邻居－－岛国日本，推理小说早期兴起于欧美，后来在日本也有了极大的发展。平时我们读的很多推理或者侦探小说相比大多都是欧美或者日本的作品比较多吧。著名的作者比如美国的埃德加·爱伦·坡，英国的阿加莎·克里斯蒂，日本的江川户乱步、东野圭吾等都是推理小说界的大神，不仅高产还高质量，我已开始读的也是日本的推理小说比较多。大一看了几本东野大神的作品后无意中接触到了国内紫金陈写的《无证之罪》，顿时来了兴趣，陆陆续续的也看了他的一些代表作，就我个人而言还是蛮喜欢他的推理作品，虽然不像有些大神那么高产，也不是每一本都布局十分巧妙，但吸引人的点还是很多的。<br>　　我已开始接触《无证之罪》后就顺便看完了他的推理之王系列的另外两本，《坏小孩》与《长夜难明》，之后又看了他较早的几部作品，从《浙大惊魂夜》（后来再版改名为《禁忌之地》）到《谋杀官员系列》，可以看出作者在每部作品的布局构思上都花了很大心思。紫金陈本名陈徐，毕业于浙江大学，主要走的是社会派本格推理路线，比如《谋杀官员系列》就是他的本格推理代表作。他的作品里的主要人物背景很多也是浙大毕业的校友，至于社会背景大多在以浙江各个市为模板进行创作。《无证之罪》很多人会拿来与东野圭吾的《嫌疑人Ｘ的献身》进行对比，认为在情节完善和人物塑造等方面还有很多不足之处，作者融入中国社会的背景，但同样是一位高智商大神为了帮助失误犯了罪的可怜人摆脱警察的故事。《坏小孩》的故事我大都忘了，比较早看的一本，其实说起来推理之王系列我最推崇的是《长夜难明》，他的说我也就这本买过实体说。不过说起来《长夜难明》或许并算不上推理吧，情节也不悬疑，只能说属于社会派推理比较好，但反映的社会问题还是很沉重的，虽然是小说，但现实生活中有没有类似的案情或者更为残酷的事实恐怕很难说，或许黑暗一直存在只是没有笼罩在你身上罢了。很多人应该看过韩国的一部电影《熔炉》，内容很沉重，在韩国法律界社会界都引起了极大的反响。《长夜难明》反应了类似的社会法律问题，书中直至结局也没能揪出幕后大老虎，尽管已经有人为此献出了生命的代价，但是在权利的悬殊面前你很难立马冲破黑暗。甚至很有可能一味的付出却给自己带来了毁灭的报复。总感觉现实中这么正义凛然的人很少，大家内心都有自己的想法，为什么要为了不相干的人去得罪人，做吃力不讨好的事？但如果人人都这么想，那些弱势群体就一直被压榨下去吗？<br>　　《谋杀官员系列》也不是每本都很精彩，有很多欠缺的地方还是明显的，尽管作为推理小说，或许不是非得文笔一流，但文笔不足的间接影响就是导致了人物造型，性格塑造方面不够鲜活，包括一些悬疑的点也很牵强。另外第二部和第四部都写到了屌丝对女神的爱，我就想说作者就不能放过广大屌丝吗，另外我想着尽管矮穷丑，但好歹是浙大高材生至于这么自卑吗，还是真的爱得真切，无法自拔。第四部结尾的有点牵强，竟然又扯出来了同性恋，但好在不是个完美的结尾，最后提到女神骆慧慧的孩子既不是李卫平也不是王红名的时候，估计很多人也蒙了，人性的复杂也只在这种时刻才能感受到。第二部又是一个单相思的家伙为了自己喜欢的人不惜付出一切为她犯罪，书名《化工女王的逆袭》估计误导了很多人，一直以为所谓的“同伙”就是化工女甘佳宁，结果这只是个幌子，但是“同伙”这个点设计的还是比较好的。另外这部反映的官场腐败等政治问题也挺厉害的，官场的腐败从上到下，从一手遮天的大老虎到仗势欺人的看家狗都让人不寒而栗，权利没有约束是很恐怖的。<br>　　我一般看这种推理小说并不怎么较真，不会太计较情节上的漏洞，除非是太明显的，毕竟自己只是个门外汉，娱乐为主哈哈。上述几本书看完倒也没花掉我多少时间，想想自己书架上的几本技术方面的恐龙📚，我内心就拔凉拔凉了，若是真想一本本从头看到尾，我又能吸收到少呢．．．　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;紫金陈主要作品&quot;&gt;&lt;a href=&quot;#紫金陈主要作品&quot; class=&quot;headerlink&quot; title=&quot;紫金陈主要作品&quot;&gt;&lt;/a&gt;紫金陈主要作品&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;《推理之王1：无证之罪》（2014年实体书出版）&lt;/li&gt;
&lt;li&gt;《推理之王2：坏小孩》（2014年实体书出版）&lt;/li&gt;
&lt;li&gt;《推理之王3：长夜难明》（2017年出版）&lt;/li&gt;
&lt;li&gt;《浙大夜惊魂》（2010年出版改名《禁忌之地》）&lt;/li&gt;
&lt;li&gt;《谋杀官员1》（2012年）&lt;/li&gt;
&lt;li&gt;《谋杀官员2：化工女王的逆袭》（2012年）&lt;/li&gt;
&lt;li&gt;《谋杀官员3：物理教师的时空诡计》（2013年1月更新完）&lt;/li&gt;
&lt;li&gt;《谋杀官员4：代上帝之手(完结)》（2013年）&lt;blockquote&gt;
&lt;p&gt;因为我自己主要就阅读了他的上述作品，所以其他书没有全都一一例举。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://huangyiblog.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="小说" scheme="http://huangyiblog.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>137. 只出现一次的数字 II</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/137-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97-II/"/>
    <id>http://huangyiblog.com/题解集/137-只出现一次的数字-II/</id>
    <published>2018-10-17T13:16:44.000Z</published>
    <updated>2018-10-17T13:17:49.969Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p>示例 1:</p><p>输入: [2,2,3,2]<br>输出: 3<br>示例 2:</p><p>输入: [0,1,0,1,0,1,99]<br>输出: 99<br>解法一：<br>创建一个长度为sizeof(int)的数组count[sizeof(int)]，用count[i]来表示在i位出现的1的次数，如果count[i]是3的倍数，跳过，否则，取出该位。<br>时间复杂度O(n),空间复杂度O(1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> count[w];</span><br><span class="line">        fill_n(&amp;count[<span class="number">0</span>], w, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w; j++) &#123;</span><br><span class="line">                count[j] += (nums[i] &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">                count[j] %= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; i++) &#123;</span><br><span class="line">            res += count[i] &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解法二：<br>用二进制模拟三进制运算。<br>用one记录到当前处理的元素为止，二进制1出现“1次”（mod 3 之后的 1）的有哪些二进制位；用two记录到当前计算的变量为止，二进制1出现“2次”（mod 3 之后的 2）的有哪些二进制位。当one和two中的某一位同时为1时表示该二进制位上1出现了3次，此时需要清零。<br>时间复杂度O(n),空间复杂度O(1)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> one  = <span class="number">0</span>, two = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line">            two |= (one &amp; i);</span><br><span class="line">            one ^= i;</span><br><span class="line">            three = ~(one &amp; two);</span><br><span class="line">            one &amp;= three;</span><br><span class="line">            two &amp;= three;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>解法三：<br>我们把数组中数字的每一位累加起来对3取余，剩下的结果就是那个单独数组该位上的数字.<br>用二进制表示的过程为00-&gt;01-&gt;10-&gt;00,用a 和 b来表示一开始的状态的十位和个位：<br>b = b ^ r &amp; ~a;<br>a = a ^ r &amp; ~b;<br>刚开始的时候，a和b都是0，当遇到数字1的时候，b更新为1，a更新为0，就是01的状态；再次遇到1的时候，b更新为0，a更新为1，就是10的状态；再次遇到1的时候，b更新为0，a更新为0，就是00的状态，相当于重置了；所以最后的结果保存在b中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            b = (b ^ nums[i]) &amp; ~a;</span><br><span class="line">            a = (a ^ nums[i]) &amp; ~b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://soulmachine.gitbooks.io/algorithm-essentials/java/bitwise-operations/single-number-ii.html" target="_blank" rel="noopener">https://soulmachine.gitbooks.io/algorithm-essentials/java/bitwise-operations/single-number-ii.html</a></p><p><a href="https://leetcode.com/problems/single-number-ii/discuss/43294/challenge-me-thx" target="_blank" rel="noopener">https://leetcode.com/problems/single-number-ii/discuss/43294/challenge-me-thx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [2,2,3,2]
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>谈谈一部争议较大的日漫《缘之空》</title>
    <link href="http://huangyiblog.com/%E5%BD%B1%E9%9F%B3/%E8%B0%88%E8%B0%88%E4%B8%80%E9%83%A8%E4%BA%89%E8%AE%AE%E8%BE%83%E5%A4%A7%E7%9A%84%E6%97%A5%E6%BC%AB%E3%80%8A%E7%BC%98%E4%B9%8B%E7%A9%BA%E3%80%8B/"/>
    <id>http://huangyiblog.com/影音/谈谈一部争议较大的日漫《缘之空》/</id>
    <published>2018-10-16T08:33:45.000Z</published>
    <updated>2018-10-17T08:49:44.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我先给出自己的主要观点："><a href="#我先给出自己的主要观点：" class="headerlink" title="我先给出自己的主要观点："></a>我先给出自己的主要观点：</h2><ul><li>我不认为悠是渣男，恰恰相反，整部番里我觉得悠才是内心最纠结的可怜人。</li><li>我不支持兄妹乱伦的爱情，但我相信可能会有这样真实的感情。</li><li>我支持平行世界的剧情设计。</li><li>对我而言这部番吸引我的是BGM。</li><li>我不赞同有人纯粹拿这部番当里番来看，我不觉得这是部里番。</li><li>我不相信柏拉图式的爱情，完全没有性的爱情我觉得不存在。</li></ul><a id="more"></a><p>　　日本动漫产业一直以来都是其他国家难以匹敌的一块，我平时看的动漫虽然不能说很少吧，但多是完全谈不上，你可能无法想象一些宅男腐女追番有多么疯狂，其实在其他方面我也是这种状况，看书，看电影，似乎各种都有所投入，但都只是了解很少一部分。动漫能吸引人主要有几个点：剧情、画风、配音、ＢＧＭ。有时我是真佩服那些声优和作曲家，明明剧情狗血的要命，也能让我感动起来．．．我这次想写关于缘之空的故事，其实是因为三轮学创作的ｂｇｍ太好听了（×……————……×）　嘻嘻……<br>　　缘之空算是一部比较早期的作品了，是根据游戏改变过来的。当初游戏本就是分线路展开剧情的。所以后面改编成动画采用平行世界也没什么好奇怪的。游戏里主要有５条线，分别是宆悠线（也就是争议最大的兄妹线）、奈绪线、一叶线、悠瑛线、班长线。不过动漫里好像把班长那条线去掉了，只讲述了４条线。首先我们先来科普下平行世界的问题，我是在看之前就已经了解了剧情的构造，所以很多地方并不会觉得很奇怪或是难以理解。百度百科的定义如下：多元宇宙是一个理论上的无限个或有限个可能的宇宙的集合，包括了一切存在和可能存在的事物：所有的空间、时间、物质、能量以及描述它们的物理定律和物理常数。多元宇宙所包含的各个宇宙被称为平行宇宙（parallel universes）。好吧说实话我没怎么看明白，平行世界是否存在我也不知道，我这种物理渣渣还是就不要太纠结于这个了，一部动漫而已，太较真吃不消。按照字面意思来理解，缘之空其实就是讲述了男主悠在不同宇宙和一群相同的人之间发生的不同的故事。有和穹之间的故事，和奈绪之间的故事，和一叶之间的故事，还有瑛。<br>　　也许是改编成动漫时衔接的处理有些瑕疵，很多人认为悠是个渣男，脚踩都不止两只船了，可其实按照剧情设计，悠并没有脚踩两只船，他有同时在和两个女生交往吗？他有花心般的欺骗吗？和其他几个女生的交集更像是普通中学少男少女的青涩的爱情，只是到后来悠才意识的自己真正喜欢的是谁。穹妹给人的感觉有种红楼梦里林黛玉的影子，柔弱，多病，少话，内心却又感情丰富，有脾气有个性。这双胞胎兄妹的父母死于交通事故，两人相依为命，一起来到了祖父曾经生活过的奥木尔町生活，也是在这里发生了一系列的故事。<br>　　穹悠线饱受争议，就是因为双胞胎兄妹之间产生了情愫并甚至接受这样的情感。现实生活中包括我自己，想必很多人也是一样，很难想象或者说理解亲兄妹之间怎么能萌生出爱情的火花呢，从小一起长大。不知道你们有没有了解过韦斯特马效应，韦斯特马效应由芬兰人类学家爱德华·韦斯特马克在他的著作《The History of Human Marriage》（人类婚姻史）中提出，指出两个早年共同长大的儿童在成年后通常不会对彼此产生性吸引力：有血缘关系者也会存在亲缘监测机制（亲缘监测机制异常除外，三代以内越近越明显。）来保护；无血缘关系者由于生活在一起或可不会成年后产生性吸引；出生后六年的成长环境是一个关键时间点，其间生活在一起二者性吸引几率全会大大降低。但穹和悠却并不满足韦斯特马效应的前提，之前穹生病，兄妹二人长时间并未生活在一起，但突然间双亲离世，两人再次相遇，也许真有可能产生喜欢的情愫也说不定。但是兄妹恋终究是不被人认可的，所以可以感受悠的挣扎，悠和穹不一样，穹什么都不在乎，在乎的只有悠而已，悠作为哥哥，需要负起的应当是父亲般的责任，但却喜欢上了自己的妹妹，说出来谁能接受，不光会被人以异样的眼光看待，也没有做好一个哥哥的本分。动漫最后的处理是两人从湖中死里逃生最后一起移居他乡。我不知道这样的结局如何，如何确实互相爱慕，即使是兄妹，那么该不该在一起呢？我不知道，我不支持乱伦恋，但真实的感情并不能由外力改变，这是我相信的。<br>　　最后关于尺度问题，的确，这部动漫里有一些暴露的镜头，但我个人觉得并不过分，如果是爱情的话，这本也就是爱情的一部分，何必去特意躲闪。我大一暑假花了很长时间看完《金瓶梅》，好吧，我没那么纯洁，做不到看金瓶梅看出圣经来，但还是不否认这是一部伟大的文化作品，很多人认为金瓶梅的格调不如红楼梦，红楼梦当之无愧是我国古典文学的巅峰，但如果仅仅只是因为一个重点讲情、一个重点讲欲来评判高低那就太不公平了。缘之空很多人还是无法接受的，被禁我觉得也正常，有时也不能一天到晚黑广电，从国家层面来说，还是需要宣扬社会主义核心价值观比较好~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我先给出自己的主要观点：&quot;&gt;&lt;a href=&quot;#我先给出自己的主要观点：&quot; class=&quot;headerlink&quot; title=&quot;我先给出自己的主要观点：&quot;&gt;&lt;/a&gt;我先给出自己的主要观点：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我不认为悠是渣男，恰恰相反，整部番里我觉得悠才是内心最纠结的可怜人。&lt;/li&gt;
&lt;li&gt;我不支持兄妹乱伦的爱情，但我相信可能会有这样真实的感情。&lt;/li&gt;
&lt;li&gt;我支持平行世界的剧情设计。&lt;/li&gt;
&lt;li&gt;对我而言这部番吸引我的是BGM。&lt;/li&gt;
&lt;li&gt;我不赞同有人纯粹拿这部番当里番来看，我不觉得这是部里番。&lt;/li&gt;
&lt;li&gt;我不相信柏拉图式的爱情，完全没有性的爱情我觉得不存在。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="影音" scheme="http://huangyiblog.com/categories/%E5%BD%B1%E9%9F%B3/"/>
    
    
      <category term="动漫" scheme="http://huangyiblog.com/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>19. 删除链表的倒数第N个节点</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>http://huangyiblog.com/题解集/19-删除链表的倒数第N个节点/</id>
    <published>2018-10-14T14:06:13.000Z</published>
    <updated>2018-10-14T14:07:43.332Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><p>示例：</p><p>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</p><p>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.<br>说明：</p><p>给定的 n 保证是有效的。</p><p>进阶：</p><p>你能尝试使用一趟扫描实现吗？</p><p>分析：删除倒数第n个链表结点，两种想法。<br>解法一：正向扫描，删除倒数第n个结点，就是删除第(len - n + 1)个结点（len 为链表长度）,可以先扫描整个链表，求出链表长度，然后再次扫描链表，找到len - n 的位置，最后删除该位置的后一个结点。</p><p>解法二：双指针，定义两个指针都指向链表首结点，第一个指针先走n + 1步，之后两个指针同步前进，当第一个指针到达表尾时，第二个指针指向的就是要删除的倒数第n个结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line">ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveNthFromEnd</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        addVal(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//ListNode res = removeNth(head, 3);</span></span><br><span class="line">        ListNode res = removeNth2(head, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span>(res != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.print(res.val + <span class="string">" "</span>);</span><br><span class="line">        res = res.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addVal</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">ListNode node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">ListNode current = head;</span><br><span class="line"><span class="keyword">while</span>(current.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">current.next = node;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNth</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间复杂度O(n)，空间复杂度O(1）</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode first = dummy;</span><br><span class="line">    ListNode second = dummy;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(first != <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = first.next;</span><br><span class="line">    second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNth2</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间复杂度O(n),空间复杂度O(1)</span></span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">while</span>(first != <span class="keyword">null</span>) &#123;</span><br><span class="line">    len++;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    len = len - n;</span><br><span class="line">    first = dummy;</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    len--;</span><br><span class="line">    first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    first.next = first.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2.&lt;/p&gt;
&lt;p&gt;当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;g
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>如何在Windows和Mac平台上协同管理hexo博客</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E5%92%8CMac%E5%B9%B3%E5%8F%B0%E4%B8%8A%E5%8D%8F%E5%90%8C%E7%AE%A1%E7%90%86hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://huangyiblog.com/业务开发/如何在Windows和Mac平台上协同管理hexo博客/</id>
    <published>2018-10-10T09:12:56.000Z</published>
    <updated>2018-10-15T04:18:39.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在多台电脑协同管理hexo博客"><a href="#如何在多台电脑协同管理hexo博客" class="headerlink" title="如何在多台电脑协同管理hexo博客"></a>如何在多台电脑协同管理hexo博客</h1><p>我很早就想搞个个人博客，其实写博客主要有3种选择：</p><ul><li>1 在第三方平台注册账号，直接在平台上写作并发布，例如博客圆，CSDN，新浪，网易等,这种方式最简单方便。</li><li>2 自己搭建博客。这种看个人需求，能力强的，可以完全前后端都自己代码实现，但大多数人一般也是直接采用模版的，简单省事。不过自己搭建的话需要去云服务商购买域名和云服务器，服务器的话学生优惠还是比较大的，阿里云，腾讯云上面都能买。</li><li>3 利用GitHub pages和hexo搭建静态博客，本地编写md文件，然后部署到github转化为html，相当于是托管于github。这种方法至少不用花钱买服务器，当然，你要是想绑定域名的话也可以照样去云服务商买一个，然后绑定到你的XXX.github.io上面。</li></ul><a id="more"></a><p>现在假设你已经在之前的Windows平台上搭好了hexo博客，并且能够正常部署运行。但因为需要，你要在另一台Mac系统的电脑上也能够管理你的hexo博客，可以利用Git分支来实现。</p><h1 id="在另一设备上管理博客"><a href="#在另一设备上管理博客" class="headerlink" title="在另一设备上管理博客"></a>在另一设备上管理博客</h1><ol><li>配置好环境</li></ol><ul><li>安装Node.js</li><li>安装Git</li><li>安装hexo<br>node.js可以直接去官网下载相应的匹配版本，Git的话，如果你的电脑安装是Mac并且安装了xcode，那么便不用再重新安装，xcode里便已经装有Git。</li></ul><ol start="2"><li>配置GitHub的SSH key<br>在新电脑上使用GitHub都需要先进行SSH key的配置，来获得GitHub的权限，以便本地和服务器之间数据的连接。</li></ol><ul><li>先测试你的电脑上是否已有ssh密钥,打开终端输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure></li></ul><p>如果没有，则进入下一步，生成ssh key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>将你的ssh key复制到GitHub上，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将ssh key复制进去。</li><li>最后测试你的ssh是否配置成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>具体如何配置hexo博客可以参考：<a href="https://www.titanjun.top/2018/03/08/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">使用hexo快速搭建个人博客</a></p><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><ol><li><p>进入你的username.github.io仓库主要，新建一个分支，名字可以自定义，下面以hexo为例：<br><img src="http://pc5wd3ju6.bkt.clouddn.com/hexo1.jpg" alt="alt"></p></li><li><p>切换到hexo分支，并将该分支设置为默认分支后并保存。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/hexo2.jpg" alt="alt"></p></li></ol><h1 id="上传配置文件到GitHub"><a href="#上传配置文件到GitHub" class="headerlink" title="上传配置文件到GitHub"></a>上传配置文件到GitHub</h1><ol><li>克隆hexo分支<br>将之前新建的分支克隆到本地<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b hexo git@github.com/username/username.github.io</span><br></pre></td></tr></table></figure></li></ol><p>查看当前所在分支是否为新建的hexo分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></p><ol start="2"><li>上传部署文件</li></ol><ul><li><p>将你原先电脑里的配置文件拷贝到你的username.github.io文件目录下，这里的拷贝有几个文件或文件夹是必须要拷贝的：<br><strong>拷贝文件时要注意如果你的themes主题文件下下面有.git文件夹，要先将.git文件夹删除，否则主题文件会上传失败，一个GitHub仓库只能有一个.git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"> package.json</span><br><span class="line"> scaffolds/</span><br><span class="line"> source/</span><br><span class="line"> themes/</span><br></pre></td></tr></table></figure></li><li><p>拷贝完以后执行npm install 安装必要的组件</p></li><li><p>执行如下命令更新分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add new files&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>测试是否成功<br>可以执行hexo new “post”,hexo s预览是否有效，之后便用hexo d -g上传部署。</p></li></ul><ul><li>使用Mac系统操作hexo命令是要求在最前面加上sudo，否则会报错，提示你权限不足。<blockquote><p>master分支和hexo分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；hexo分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内也不会有任何冲突</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在多台电脑协同管理hexo博客&quot;&gt;&lt;a href=&quot;#如何在多台电脑协同管理hexo博客&quot; class=&quot;headerlink&quot; title=&quot;如何在多台电脑协同管理hexo博客&quot;&gt;&lt;/a&gt;如何在多台电脑协同管理hexo博客&lt;/h1&gt;&lt;p&gt;我很早就想搞个个人博客，其实写博客主要有3种选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 在第三方平台注册账号，直接在平台上写作并发布，例如博客圆，CSDN，新浪，网易等,这种方式最简单方便。&lt;/li&gt;
&lt;li&gt;2 自己搭建博客。这种看个人需求，能力强的，可以完全前后端都自己代码实现，但大多数人一般也是直接采用模版的，简单省事。不过自己搭建的话需要去云服务商购买域名和云服务器，服务器的话学生优惠还是比较大的，阿里云，腾讯云上面都能买。&lt;/li&gt;
&lt;li&gt;3 利用GitHub pages和hexo搭建静态博客，本地编写md文件，然后部署到github转化为html，相当于是托管于github。这种方法至少不用花钱买服务器，当然，你要是想绑定域名的话也可以照样去云服务商买一个，然后绑定到你的XXX.github.io上面。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Github" scheme="http://huangyiblog.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>来普陀山拜观音了</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E6%9D%A5%E6%99%AE%E9%99%80%E5%B1%B1%E6%8B%9C%E8%A7%82%E9%9F%B3%E4%BA%86/"/>
    <id>http://huangyiblog.com/随笔/来普陀山拜观音了/</id>
    <published>2018-10-04T10:48:41.000Z</published>
    <updated>2018-10-18T07:58:34.622Z</updated>
    
    <content type="html"><![CDATA[<p>　　鉴于中国国情，一直以来我都是十分抵触国庆出游的，原因你懂得。但这次可能有点坐不住了，我姐说要带母亲去泰国旅游，家里没了人，我咋办呀～不行，我也得出去玩，我想了想，恩，爬山挺不错的，我喜欢。然后就去找高中同学商量着一起国庆去爬山。爬什么山呢，浙江附近有名的山还是有不少的，黄山，三清山，庐山，雁荡山．．．这些我都考虑过，后来同学提了句普陀山怎么样，我立马便决定，好，就去普陀山，顺便看看大海，拜拜观音。从后面看来，我的决定还是比较正确的。<br>　　那时还没到中秋，我们俩就提前把去舟山的车票，民宿订好了，民宿订的是个混合旅馆，住两晚。国庆景区人山人海，这是一直被人诟病的事实，但我这次总体体验还行，天公作美呀，这两天天气出奇的好，温度适宜，海风凉爽。起初我还有点担心台风的问题，但最后收到预警通知时我们都已经准备返程了。你说运气好不好。当然唯一有点遗憾的就是没去东极岛，我只知道这是韩寒拍后会无期的取景地，中国的第一缕阳光照射的地方，不过东极岛本就不在我的计划范围内，真说遗憾到也谈不上，毕竟是个小岛，而且也远，票都不一定抢的到。<br>　　２号一大早起床，我就屁颠屁颠坐地铁来到杭州东站等大巴，坐着大巴离开杭州后的高速路上都很顺水，没发生什么堵车的问题，一直到了宁波镇海那边，速度有所减缓，真正发生堵车的地方就是在金塘大桥。这座桥是通往舟山的关键道路，也是图中碰到的第一座并且也是最长的一座跨海大桥。当然，比杭州湾跨海大桥要小点。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs2.jpg" alt="alt"><br>看到大海以后最大的感慨就是为何如此混黄不清，与我心目中蔚蓝色大海相去甚远。但稍微想想，浙江的海应该都是灰黄灰黄的吧，不知道是因为地处钱塘江入海口还是其他原因。但浩瀚的气势还是有的，和我看惯了的千岛湖、西湖完全就是两种风格。<br>进入舟山以后车子就开的较慢了，一路时停时走的来到了舟山普陀区，我当时也不记得自己买了到哪里的车票，结果就一路坐着过了观音大桥来到了朱家尖慈航广场，我一看，这哪行，我们定的民宿是在普陀区大岭下呀，然后有坐上车回程，司机带我们到彩虹广场放我们下来，我就顺便吃了饭再去民宿。<br>　　到了民宿后，我们结识了这次出行的第一位室友，聊了几句，发现他和我们一样也是大三学生，是个高高瘦瘦还有些帅气的萧山小伙子。我看到脖子上手臂上通红通红的，估计是被晒成这样的，当时他刚好玩累了回来，一脸虚脱样。他和我们不一样，我们是第一次来舟山，去普陀山拜观音的，他可不是第一次来了，他有两个大学同学是舟山人，这次放假就顺便陪他们来舟山玩两天再回家。到了傍晚，我们都没怎么饿，我就和同学商量着晚上去哪玩，这时萧山小哥说：“听说沈家门那边的鲁家峙大桥夜景挺不错的，我们一起去逛逛吧”，我们也没其他主意，于是在手机地图上查了查鲁家峙大桥的位置，写着距离２.４公里，我们一看，那也没多少路吗，直接走过去就得了。从大岭下出发，我们三人没走多久就遇到了个山洞，没想到这山洞出乎意料的长，我们三一前一后的排成一列，足足走了将近２０分钟才走到另一头，边上时不时几辆电瓶车飞驰而过，让我们老老实实贴着边缘走着，还真是不容易。没多久我们就来到了鲁家峙大桥桥底，上桥还得走个楼梯，从桥上往下望还是挺高的，桥下就是大海，这要掉下去可不是开玩笑的，我也不敢走太边上。我们在桥上赏了赏夜景，吹了吹海风，就返程了，返程我们可吃不消再走回去了，是坐公交回去的。回到民宿后，又和这位萧山小哥聊了聊，他在临安的浙江农林大学学法学，还准备要考研，司法考什么的，他倒是和我们聊起了昨晚和它住一起的室友，他说那位老哥昨晚大半夜的还在打电话，一个劲的拿头撞墙。我们听了一惊，只是咋回事呀，有啥想不开的？原来是被女朋友放了鸽子，放了鸽子还不算，他女朋友还要和他分手，而他早早地订好住宿，昨晚却在那电话里拼了命的求复合，一直闹腾到了大半夜，哎。我们那天也真是累了，第二天还得早起买票去，于是早早就上床休息了。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs1.jpg" alt="alt"></p><p>　　第二天６点多，我和同学起床吃了碗馄饨后就坐着公交来到慈航广场买船票了，那时还好，虽然已经有不少人在排队了，但还不算夸张，总之我们还是很庆幸自己出发的比较早。从朱家尖到普陀山的普通客船是３０元一人，普陀山进山门票是１８０，我们买了学生票９０元。进山后，我们往左开始游山，依次游览了百花园，观音<img src="http://pc5wd3ju6.bkt.clouddn.com/zs3.jpg" alt="alt">古洞，磐陀石等，那时人还不多，所以游览起来还是蛮舒服的。普陀山应该也是个佛教圣地，山上寺庙众多，经常看到一些墙上写着喃无哦米投佛，我们一路翻山，来到百步沙，这是个沙滩，我们随即脱了鞋子去沙滩玩了，这时我又想到了天气好的好处，大暑假的你让我在这沙滩上晒太阳我怕是不大吃得消。我们俩走沙滩上都留了好久，捐起裤脚走在海边，看着海浪一波波涌来，但不敢走太里面，万一一不当心海浪盖过膝盖，那我的裤子是得湿透了。这之后已经快中午了，人山人海的架势也有点显现了，我们之后绕到了不肯去观音院和紫竹林，我一开始还以为这紫竹林是一大片竹林呢，结果到了以后半根竹子都没见着…逛了大半天，真事还没干，来普陀山怎么也得拜下南海观音吧，但是当我们到了南海观音雕像时已经是人山人海了，还有不少拿着香在哪虔诚的拜观音，我们就走在人群里，都不知道他们是在拜观音还是在拜我了。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/zs4.jpg" alt="alt"></p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/zs5.jpg" alt="alt"><br>我们的最后一站是南天门，二石壁立如门，所以不要以为南天门真的是扇门，只是三块大石头，两边各一块，顶上一块，状似一扇门，也就是所谓的南天门。南天门逛完后我们便返程了，还真是挺累的，走了大半天的路。<br>　　到了晚上，我们又结识了一位新室友，昨晚那位萧山小哥回家去了，今天搬进来了另一位小伙子。这小伙子更有意思，我们一直聊天聊到后半夜都意犹未尽。他也是个大三学生，还和我一样学的是计算机，你说巧不巧，同行遇同行，两眼泪汪汪，我们竟然开始聊起来了学习．．对的，你没听错，我们一开始聊得是学习．．我问他有什么打算，准备走什么方向，他是在江西读书，想考研，以后走算法方向，不过不是ＡＩ算法，而是数据处理那方面的。但我们聊学习没聊多久就转移了话题，你也知道两个学渣聊不出多大花头。我对这位小哥倒是很感兴趣，慢慢慢慢兴致也就上来了，首先，他是新疆人，这就足以勾起我很大好奇心了，平时我可是很少接触到新疆人呢。而且他有些想法我也比较认同。我告诉我们他这次从江西那边过来，先在宁波玩了两天然后又来舟山玩，他已经去了全国很多地方，他对我们说他出去旅游很多时候并不是为了看景点啥的，而是接触各种各样的人，到四处游玩可以让他接触很多没见过的东西，碰到很多不一样的人，这些人都有自己的一些习俗，想法，和他们聊天是件很有意思的事。我们之后聊了很多很多，有关于他中学是谈对象的故事，有关于他一个土豪室友的故事，还有很多关于新疆的故事，我们俩真是第一次听说新疆竟然是这样的。据他说新疆治安那时真的厉害，目标就是震慑一些犯罪分子，恐怖分子。记得之前发生了一件什么事，整个新疆整整半年停网停通讯，当然他没具体说什么事，毕竟属于机密事件，我也不敢乱写，不然得惹上不小麻烦。而且他们那边你可不能偷偷翻墙，一翻墙你就得接受“教育”了．．．总是我们各种瞎扯，时不时发点感慨，哇，土豪的世界我理解不了，哇，新疆竟然发生过这种事，我们听来就更听故事似的。<br>　　最后大家都累了，便熄灯安稳入睡了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　鉴于中国国情，一直以来我都是十分抵触国庆出游的，原因你懂得。但这次可能有点坐不住了，我姐说要带母亲去泰国旅游，家里没了人，我咋办呀～不行，我也得出去玩，我想了想，恩，爬山挺不错的，我喜欢。然后就去找高中同学商量着一起国庆去爬山。爬什么山呢，浙江附近有名的山还是有不少的，
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="旅游记" scheme="http://huangyiblog.com/tags/%E6%97%85%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>128. 最长连续序列</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://huangyiblog.com/题解集/128-最长连续序列/</id>
    <published>2018-10-01T12:40:57.000Z</published>
    <updated>2018-10-09T14:43:20.627Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [100, 4, 200, 1, 3, 2]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure></p><p>分析：如果先进行排序在遍历求最长连续序列的长度，那么时间复杂度需要O(nlogn)，但是这题要求时间复杂度为O(n).考虑用哈希表的想法，用一个哈希表unordered_map&lt;int,bool&gt; used来记录每个元素是否使用，以该元素在中心，向左右遍历，直到不连续为止，每次记录下向左向右扩张的最长长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; used;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            used[nums[i]] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(used[nums[i]]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">            used[nums[i]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = nums[i] + <span class="number">1</span>; used.find(j) != used.end(); ++j) &#123;</span><br><span class="line">                used[j] = <span class="literal">true</span>;</span><br><span class="line">                ++length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = nums[i] - <span class="number">1</span>; used.find(j) != used.end(); --j) &#123;</span><br><span class="line">                used[j] = <span class="literal">true</span>;</span><br><span class="line">                ++length;</span><br><span class="line">            &#125;</span><br><span class="line">            longest = max(longest, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;示例:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>4. 两个排序数组的中位数</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/4-%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://huangyiblog.com/题解集/4-两个排序数组的中位数/</id>
    <published>2018-10-01T12:25:52.000Z</published>
    <updated>2018-10-09T14:43:20.639Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。</p><p>请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。</p><p>你可以假设 nums1 和 nums2 不同时为空。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">中位数是 2.0</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">中位数是 (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure></p><p>分析：题目要求求出两个有序数组的中位数，其实这个问题属于TOPKth问题的一个特例，就是让你求两个有序数组的第k大数。<br>思路：比较直观简单的想法就是合并两个有序数组然后再求中位数，但这种做法时间复杂度为O(m + n).可是题目里面要求时间复杂度控制为O(log(m + n)).换一种双指针想法，首先用一个计数器记录当前已找到的第m大的元素，同时让两个指针pA和pB分别指向两个数组的第一个元素，使用类似于归并排序的思想，如果数组nums1当前元素较小，那么pA++，同时m++；反之，pB++，同时m++。当m == k 遍历结束。时间复杂度O(k),空间复杂度O(1).但是如果k很接近m + n ,那么时间复杂度还是O(m + n)的。<br>在换一种想法，要求O(log(m + n))复杂度，我们想到二分查找，但是直接用二分，时间复杂度在O(log(m*n))，只能说用类似二分的做法。<br>我们假设nums1和nums2的元素个数都大于k / 2.我们比较nums1[k/2-1]和nums2[k/2-1]，有以下三种情况：</p><ul><li>nums1[k/2-1] == nums2[k/2-1]</li><li>nums1[k/2-1] &gt; nums2[k/2-1]</li><li>nums1[k/2-1] &lt; nums2[k/2-1]</li><li>如果nums1[k/2-1] &lt; nums2[k/2-1]，则nums1[0]~nums1[k/2-1]之间肯定在topK元素范围内，同理，如果nums1[k/2-1] &gt; nums2[k/2-1],则nums2[0] – nums2[k/2-1]肯定在topK元素范围内；如果nums1[k/2-1] == nums2[k/2-1] ，说明已找到第k大元素。<br>采用递归写法的话，终止条件为：</li><li>当nums1或nums2为空时，直接返回nums1[k-1]或nums2[k-1]</li><li>当k == 1时，返回min(nums1[0],nums2[0]);</li><li>当nums1[k/2-1]  == nums2[k/2-1],返回nums1[k/2-1]或nums2[k/2-1]</li></ul><p>关于具体的数学证明可以参考下官网给出的提解，蛮详细的。<br><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lenA = nums1.size();</span><br><span class="line">        <span class="keyword">int</span> lenB = nums2.size();</span><br><span class="line">        <span class="keyword">if</span>((lenA + lenB) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> r1 = (<span class="keyword">double</span>) findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">double</span> r2 = (<span class="keyword">double</span>) findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB) / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> (r1 + r2) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1, <span class="number">0</span>, lenA, nums2, <span class="number">0</span>, lenB, (lenA + lenB + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> startA, <span class="keyword">int</span> endA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B,<span class="keyword">int</span> startB, <span class="keyword">int</span> endB, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = endA - startA;</span><br><span class="line">        <span class="keyword">int</span> m = endB - startB;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> B[startB + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[startA + k - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> A[startA] &lt; B[startB] ? A[startA] : B[startB];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> midA = (startA + endA) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> midB = (startB + endB) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[midA] &lt;= B[midB]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n / <span class="number">2</span> + m / <span class="number">2</span> + <span class="number">1</span> &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, endA, B, startB, midB, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, midA + <span class="number">1</span>, endA, B, startB, endB, k - n / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(n / <span class="number">2</span> + m / <span class="number">2</span> + <span class="number">1</span> &gt;= k) &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, midA, B, startB, endB, k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> findKth(A, startA, endA, B, midB + <span class="number">1</span>, endB, k - m / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。&lt;/p&gt;
&lt;p&gt;请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) 。&lt;/p&gt;
&lt;p&gt;你可以假设 nums1 和 nums2 不同时为空。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;f
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>关于Ubuntu与win10双系统引导修复的问题</title>
    <link href="http://huangyiblog.com/%E9%9A%8F%E7%AC%94/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%8Ewin10%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://huangyiblog.com/随笔/关于Ubuntu与win10双系统引导修复的问题/</id>
    <published>2018-10-01T07:30:50.000Z</published>
    <updated>2018-10-09T14:43:20.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h1><p>我的电脑之前是在Windows10系统上装了一个Fedora版本的linux，基本上使用都没什么问题，说实话，因为我大部分软件或开发工具啥的主要都装在Windows系统上，所以平时还是win10用的比较多。但最近听说国内有一款仿Ubuntu的深度deepin系统也挺不错的，而且界面还挺像mac，所以就急着将自己电脑上的Fedora换成了deepin，但估计就是在安装deepin的时候出了叉子。我到现在也没搞清楚是哪里出了问题，动了什么不该动的东西，导致win10的启动引导程序坏了，最后结果就是按下开机键只能进入deepin了。即是你在刚开机时按下ESC进入系统选择界面选择Windows也是照样进不了。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>发现进不了Windows只能进deepin我就开始有点慌了，要知道我很多软件和工具都是装在Windows上面，而linux还只是个壳子。我可不想重装系统，当然也不得不做好这最坏的打算。当时试了很多方法行不通，就又将deepin换成了Ubuntu，但结果还是一样，这倒是在意料之中。起初以为只是Ubuntu与win10不兼容，需要修复一下引导就行，但按理说不应该的，我室友的组装机用的就是这两个系统，从来没出什么问题。我上网查了查，有人说直接进入Ubuntu终端，运行sudo -updategrub，更新一下grub就行了，但我试了好几次，包括修改grub.cfg文件，但都行不通，每次update以后根本不显示found Windows这样的字眼。这是便意识到想必是win10的引导已经损坏了，再在linux上面瞎搞估计也无济于事。这样一来，我就去网上找资料，查如何修复win10引导。主要步骤如下：</p><ul><li>首先你得有个win64位的PE系统启动U盘，在开机的时候按下ESC键进入系统选择界面（我的电脑是ESC，这个不同版本电脑可能有所不同，也有可能你是F11，F12）,之后选择你的U盘启动系统进入。</li><li>进入系统后，打开你的DG（DiskGenuis）分区工具</li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg1.PNG" alt="alt"></p><p>使用这个工具之前需要注意一个问题，那就是你的硬盘是什么格式的，是GPT还是MBR？<br>-</p><p>很多人写的修复方法都是针对硬盘类型为mbr的，就是直接选中的系统盘，如下图：点击硬盘选项下的重建主引导记录。</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg2.png" alt="alt"></p><p>然而问题出现了，当我点击 硬盘选项后，重建主引导记录这一栏是灰色的，无法选中。原因就是我的硬盘类型是GPT的。</p><ul><li><p>接下来要做的就是修复GPT格式的引导，首先我们注意到ESP分区没有盘符，我们需要给他指定一个盘符：<br><img src="http://pc5wd3ju6.bkt.clouddn.com/dg3.PNG" alt="alt"></p></li><li><p>指派好了就关闭DG工具，回到桌面，</p></li></ul><p>打开cmd命令行，输入以下命令并运行</p><p>　　bcdboot c:\windows /s g: /f uefi /l zh-cn</p><p>　　其中：c:\windows  硬盘系统目录，根据实际情况修改</p><p>　　/s g:     指定esp分区所在磁盘，根据实际情况修改</p><p>　　/f uefi   指定启动方式为uefi</p><p>　　/l zh-cn  指定uefi启动界面语言为简体中文</p><p>　　注：64位7PE不带/s参数，故7PE不支持bios启动下修复</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/dg4.PNG" alt="alt"></p><ul><li>创建成功后重新启动电脑，选择Windows boot manager进入系统，到这里win10的引导也就修复完成。</li></ul><h1 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h1><p>win10引导修复完成后的结果是，每次开机都是默认直接进入Windows，如果想要进入Ubuntu，还是要刚开机时按下ESC手动选择进入，而不是和之前一样，出现一个双系统选择界面供你直接选择。我进入Ubuntu之后尝试修复此问题，主要进行了如下操作：<br>1 进入Ubuntu终端，输入如下命令利用bootrepair修复引导<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进入root用户</span><br><span class="line">sudo -i </span><br><span class="line"># 添加软件源并更新</span><br><span class="line">add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp;　apt-get update</span><br><span class="line">＃　安装boot-repair并启动软件</span><br><span class="line">apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure></p><p>2 查看Windows10磁盘所在引导，然后继续进入Ubuntu终端，修改引导</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">vim /boot/grub/grub.cfg</span><br><span class="line">//再该文件末尾修改win10引导信息。</span><br><span class="line">//之后再更新引导</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>3 庆幸的是更新引导之后的确出现了found Windows的字眼，但是当我重启电脑，发现并没有改变什么，还是只能直接进入Windows，所以挺困惑的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;问题来源&lt;/h1&gt;&lt;p&gt;我的电脑之前是在Windows10系统上装了一个Fedora版本的linux，基本上使用都没什么问题，说实话，因为我大部分软
      
    
    </summary>
    
      <category term="随笔" scheme="http://huangyiblog.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaWeb开发环境设置</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/JavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/"/>
    <id>http://huangyiblog.com/业务开发/JavaWeb开发环境设置/</id>
    <published>2018-10-01T05:39:58.000Z</published>
    <updated>2018-10-09T14:43:20.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：下载所需要的开发工具"><a href="#第一步：下载所需要的开发工具" class="headerlink" title="第一步：下载所需要的开发工具"></a>第一步：下载所需要的开发工具</h1><ul><li>我这里的javaweb项目选择eclipse的javaee，下载网站：<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/packages/</a></li><li>服务器下载Tomcat，下载网站：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li><li>java jdk下载：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>jdk的环境配置这里我就不写了。</li><li>注意点：版本问题，每个软件版本都不是随便下的，首先不提倡急着下载最新版的，容易出bug。另外尤其要注意jdk版本和Tomcat版本的兼容问题，有一个版本过高或过低都是不行的。<br>关于版本匹配：可以参考下图（Tomcat官网有介绍）<br><img src="http://pc5wd3ju6.bkt.clouddn.com/tomcatversion.PNG" alt="alt"></li></ul><h1 id="第二步：eclipse配置"><a href="#第二步：eclipse配置" class="headerlink" title="第二步：eclipse配置"></a>第二步：eclipse配置</h1><p>1 如下图：<br>进入preferences<br><img src="http://pc5wd3ju6.bkt.clouddn.com/jw1.PNG" alt="alt"></p><p>2 进入java选项下的installed JREs配置jdk目录</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw2.PNG" alt="alt"></p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw3.PNG" alt="alt"></p><p>3 进入server配置tomcat的运行环境</p><p><img src="http://pc5wd3ju6.bkt.clouddn.com/jw4.PNG" alt="alt"></p><h1 id="第三步，新建一个javaweb项目，验证"><a href="#第三步，新建一个javaweb项目，验证" class="headerlink" title="第三步，新建一个javaweb项目，验证"></a>第三步，新建一个javaweb项目，验证</h1><p>如下图，在web选项新建一个Dynamic Web Project,并新建一个jsp，在里面任意输入内容后并允许，若能够正常输出，则配置成功。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/jw5.PNG" alt="alt"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一步：下载所需要的开发工具&quot;&gt;&lt;a href=&quot;#第一步：下载所需要的开发工具&quot; class=&quot;headerlink&quot; title=&quot;第一步：下载所需要的开发工具&quot;&gt;&lt;/a&gt;第一步：下载所需要的开发工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我这里的javaweb项目选择e
      
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Java" scheme="http://huangyiblog.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git 与Ｇithub入门介绍</title>
    <link href="http://huangyiblog.com/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/Git-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://huangyiblog.com/业务开发/Git-入门介绍/</id>
    <published>2018-09-27T14:22:17.000Z</published>
    <updated>2018-10-09T14:43:20.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h1><p>　　Git 是一款免费、开源的分布式版本控制系统，最早由 LinilusTorvalds 创建，用于管理 Linux 内核开发， 现已成为分布式版本控制的主流工具。版本控制系统（VCS）： 一种可以管理和追逐软件代码或其他类似类容的不同版本的工具。我们知道一旦启动一个项目，数据短暂且易失，对于相关的文本和代码，我们需要寻找合适的备份策略。而版本控制系统就是很好的备份策略，方便开发人员对变更进行追踪管理。。Git 由 Linus Torvalds 发明，起初是为了方便管理 Linux1内核的开发工作。如今，Git 已经在大量的项目中得到了 非常成功的应用。 　　</p><h1 id="Git常见功能"><a href="#Git常见功能" class="headerlink" title="Ｇｉｔ常见功能"></a>Ｇｉｔ常见功能</h1><ol><li>从服务器上克隆数据库（包括代码和版本信息）到单机上。 </li><li>在自己的机器上创建分支，修改代码。</li><li>在本地上自己创建的分支上提交代码。</li><li>在单机上合并分支。</li><li>新建⼀个分⽀，把服务器上最新版的代码fetch下来，然后跟⾃⼰的主分⽀合并。 </li><li>⽣成补丁（patch），把补丁发送给主开发者。   </li><li>看主开发者的反馈，如果主开发者发现两个⼀般开发者之间有冲突（他们之间可 以合作解决的冲突），就会要求他们先解决冲突，然后再由其中⼀个⼈提交。如果 主开发者可以⾃⼰解决，或者没有冲突，就通过。 </li><li>⼀般开发者之间解决冲突的⽅法，开发者之间可以使⽤ pull 命令解决冲突，解决 完冲突之后再向主开发者提交补丁</li></ol><h1 id="Git初步入门"><a href="#Git初步入门" class="headerlink" title="Git初步入门"></a>Git初步入门</h1><ul><li><p>如果你是第一次安装使用Git，你需要设置署名和邮箱：</p><pre><code>$ git config --global user.name &quot;⽤户名&quot; $ git config --global user.email &quot;电⼦邮箱&quot;</code></pre></li></ul><h2 id="关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。"><a href="#关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。" class="headerlink" title="关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。"></a>关于git的常用命令，阮一峰老师有一篇博客讲的蛮好的。</h2><p>  链接：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><p>阮老师用了一张图介绍了最常用的6个命令。<br><img src="http://pc5wd3ju6.bkt.clouddn.com/git.png" alt="alt"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* Workspace：工作区</span><br><span class="line">* Index / Stage：暂存区</span><br><span class="line">* Repository：仓库区（或本地仓库）</span><br><span class="line">* Remote：远程仓库</span><br></pre></td></tr></table></figure></p><ul><li><p>将代码仓库clone到本地，其实就是将代码复制到你的机器⾥，并交由Git来管理：</p><pre><code>$ git clone git@github.com:someone/symfony-docs-chs.git</code></pre></li><li><p>初始化本地仓库，当前目录下会出现一个名为 .git 的目录</p><p>  $ git init</p></li><li><p>新建一个目录，将其初始化为Git代码库</p><p>  $ git init [project-name]</p></li><li><p>下载一个项目和它的整个代码历史</p><p>   $ git clone [url]</p></li><li><p>删除工作区文件，并将这次删除放入暂存区</p><p>  $ git rm [file1] [file2] …</p></li><li><p>向这个本地的代码仓库添加当前目录的所有改动。</p><pre><code>$ git add .</code></pre></li><li><p>提交文件到本地仓库</p><p>   $ git commit -m “Hello”   </p></li><li><p>提交暂存区的指定文件到仓库</p><p>   $ git commit [file1] [file2] … -m [message]</p></li><li><p>添加某个文件</p><p>   $ git add -p</p></li><li><p>查看现在的状态</p><p>  $ git status</p></li><li><p>推送所有分支到远程仓库</p><p>   $ git push [remote] –all</p><h1 id="Github是什么"><a href="#Github是什么" class="headerlink" title="Github是什么"></a>Github是什么</h1></li><li><p>维基百科的说明：</p></li></ul><p>GitHub 是⼀个共享虚拟主机服务，⽤于存放使⽤ Git 版本控制的软件代码 和内容项⽬。它由 GitHub 公司（曾称 Logical Awesome）的开发者 Chris Wanstrath、PJHyett和TomPreston-Werner使⽤RubyonRails编写⽽成。</p><ul><li><p>官方介绍：<br>GitHubisthebestplacetosharecodewithfriends,co-workers,classmates, andcompletestrangers. OvereightmillionpeopleuseGitHubtobuildamazingthingstogether.</p></li><li><p>对普通用户来说，它还可以是：<br>1 网站<br>2 静态博客<br>3 管理配置文件<br>4 资料收集库<br>5 简历<br>6 管理代码片段<br>7 托管的编程环境<br>8 写作<br>……</p></li><li>界面主要功能<br>1 Git仓库<br>2 Organization<br>可以统一管理账户和权 限，还能统一支付一些费用。<br>3 Issue<br>Issue功能，是将一个任务或问题分配给一个 Issue进行追踪和管理的功能。每一个功能更改或修正都对应一个Issue，讨论或修正都以这个 Issue为中心进行。只要查看Issue，就能知道和这个更改相关的一切信 息，并以此进行管理。<br>4 Wiki<br>通过Wiki功能，任何人都能随时对一篇文章进行更改并保存，因 此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写 中。<br>5 Pull Request<br>开发者向GitHub的仓库推送更改或功能添加后，可以通过Pull Request 功能向别人的仓库提出申请，请求对方合并。</li></ul><p>GitHub可以托管各种git库，并提供⼀个web界⾯，但与其它像SourceForge 或 GoogleCode 这样的服务不同，GitHub 的独特卖点在于从另外⼀个项⽬ 进⾏分⽀的简易性。为⼀个项⽬贡献代码⾮常简单：⾸先点击项⽬站点的 “fork” 的按钮，然后将代码检出并将修改加⼊到刚才分出的代码库中，最后通过内建的 “pullrequest” 机制向项⽬负责⼈申请代码合并。</p><h1 id="GitHub项目创建"><a href="#GitHub项目创建" class="headerlink" title="GitHub项目创建"></a>GitHub项目创建</h1><p>可以直接在web页面new repository。<br>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;first commit&quot; </span><br><span class="line">$ git remote add origin 地址</span><br><span class="line">$ git push -u origin master //将代码由本地仓库上传到Github远程仓库</span><br></pre></td></tr></table></figure></p><h1 id="Pull-Request-的概要"><a href="#Pull-Request-的概要" class="headerlink" title="Pull Request 的概要"></a>Pull Request 的概要</h1><ul><li>Pull Request 是自己修改源代 码后，请求对方仓库采纳该修改时采取的一种行为。</li></ul><p><img src="http://pc5wd3ju6.bkt.clouddn.com/pushrequest.PNG" alt="alt"></p><p>PR流程：<br>1 fork对方的repository<br>2 clone你之前fork的repository到你的本地电脑</p><pre><code>git clone git@url</code></pre><p>3 与对方GitHub的repository建立连接</p><pre><code>git remote add upstream url</code></pre><p>4 建立工作分支</p><pre><code>git checkout -b xiaoming-branch</code></pre><p>5 添加代码</p><p>6 提交修改<br>用 git diff命令查看修改是否已经正确进行。<br>使用 git add PRTest ，git commit ,git push等系列命令提交</p><p>7 发起Pull Request</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git是什么？&quot;&gt;&lt;a href=&quot;#Git是什么？&quot; class=&quot;headerlink&quot; title=&quot;Git是什么？&quot;&gt;&lt;/a&gt;Git是什么？&lt;/h1&gt;&lt;p&gt;　　Git 是一款免费、开源的分布式版本控制系统，最早由 LinilusTorvalds 创建，用于
      
    
    </summary>
    
      <category term="业务开发" scheme="http://huangyiblog.com/categories/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Github" scheme="http://huangyiblog.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>2018上半年的阅读整理</title>
    <link href="http://huangyiblog.com/%E9%98%85%E8%AF%BB/2018%E4%B8%8A%E5%8D%8A%E5%B9%B4%E7%9A%84%E9%98%85%E8%AF%BB%E6%95%B4%E7%90%86/"/>
    <id>http://huangyiblog.com/阅读/2018上半年的阅读整理/</id>
    <published>2018-09-20T02:52:28.000Z</published>
    <updated>2018-10-14T08:53:20.616Z</updated>
    
    <content type="html"><![CDATA[<p>　　转眼间，２０１８大半年就过去了，今天想把自己这半年来的一些阅读整理下，也想让自己有个概念，这么长时间的浑浑噩噩，自己都干了些啥，都读了些啥。看看哪些书自个感觉还不错，哪些书虽不错但因自己能力有限无法深读，哪些书只是为了消遣时间。<br>　　１《卑鄙的圣人：曹操》<br>　　这本书姑且可算作是本历史书吧，至少让我从另一个视角了解到了曹操，其实说起来，读三国的时候，其他人暂且不提，你若是问我曹操和刘备你喜欢哪个，毫无疑问我更看好曹操。三国乱世，枭雄方能立足，假仁假义的君子有何用。你说曹操奸诈也好，卑鄙也好，但你得承认他很牛，对用兵为政有自己的一套见解，作诗也是一把好手。曹操若非奸雄，别说后来的三国鼎立，怕是都活不到那时就已命丧黄泉了。<br>　　２《包法利夫人》<br>　　《包法利夫人》是法国作家福楼拜创作的长篇小说。<br>　　小说描写包法利夫人爱玛为摆脱不幸婚姻，追求不正当爱情而导致堕落毁灭的悲剧。表面上是一个淫妇不满婚后情感而渴望爱情因此通奸偷晴，但确实一个真正可怜的角色，不光是情感上的，同时也是当时所处社会的悲剧。<br>　　３《红楼梦评论》王国维<br>　　因为对红楼梦特别着迷，所以有些人写的一些关于红楼梦我的看法我也会去了解下，这本书或许也不算不上是本书吧，有点像是一篇论文，简要的论述了红楼梦在伦理，美术，艺术、哲学等方面的价值。<br>　　４《依偎》<br>　　依偎是丁捷写的一部爱情小说，有点悲剧色彩。这本小说剧情展开也挺特别，主要根据安芬和小天互相讲故事来展开，最后一步步发现两人之间竟然还有着不为人知的联系并且深深相爱。<br>　　５《陪安东尼度过漫长岁月》<br>　　这本书的写法也挺奇葩，至少很少看到，算是挺治愈的一本书。<br>　　６《罗密欧与朱丽叶》<br>　　莎士比亚的一部很经典的悲剧。<br>　　７《奥赛罗》<br>　　同样是莎士比亚的一部悲剧<br>　　８《道德经》<br>　　．．．篇幅不长，我看的是一段古文后面一段白话文解释的，有些倒还能理解，有些看着就有点玄乎了，或许是自己水平太差。<br>　　９《伊豆的舞女》<br>　　《伊豆的舞女》是川端康成早期的代表作和成名作，也是一篇杰出的中篇小说。<br>　　展现了少男少女初恋时的朦胧与美好，挺清新的。<br>　　１０《告白》<br>　　挺好的剧情小说，人物角色多面性，而不是单的纯谁善谁恶，刻画出人性的复杂多面。<br>　　１１《少年的你，如此美丽》<br>　　玖月晞写的一本青春言情小说吧，剧情上感觉有一些地方有点雷同《白夜行》，但这部小说还是很大胆的刻画了青少年女生的校园欺凌事件，反映了弱势群体如何自保以及法律相关的问题。<br>　　１２《妻妾成群》<br>　　《妻妾成群》是作家苏童创作的一部中篇小说。这部作品通过描写一个“受过新时代教育”的女学生颂莲，自愿嫁入到高墙深院秩序井然的封建家族陈府，最终又在“妻妾成群”明争暗斗中走向精神崩溃的悲惨命运，艺术化地再现了中国封建礼教吞噬人性的恐怖景象。<br>　　１３《老婆，跟我回家吧》<br>　　酒小七写的网络言情小说，还算有点幽默吧<br>　　１４《魔道祖师》<br>　　这部小说是因为先看了动漫，好奇剧情发展而去看的。我是挺喜欢的，故事线完整，人物性格分明。最开始夷陵老祖魏无羡复活，我以为受尽冤屈与不公的他会走浩浩荡荡的复仇路线，但却并没有，内心依旧洒脱，和蓝忘机一同维护心中的正义。<br>　　１５《窦娥冤》<br>　　窦娥冤的冤情今天动地，但我一直不清楚窦娥冤在何处，但现在总算明白了。<br>　　１６《莺莺传》<br>　　读了西厢记，就顺便把元稹的莺莺传也读了<br>　　１７《斗破苍穹》<br>　　玄幻小说<br>　　１８《基都山伯爵》<br>　　复仇曲。我爱爱我的人，我很恨我的人。<br>　　１９《人间失格》太宰治<br>　　２０《我的晃荡的青春》<br>　　东野圭吾的故事<br>　　２１《富爸爸，穷爸爸》<br>　　这本书倒是略为提到了理财的方面，钱的重要性在现今社会不言而喻。<br>　　富爸爸喜欢买入资产，穷爸爸喜欢买入负债。<br>　　２２《堂吉诃德》<br>　　骑士小说<br>　　２３《罗生门》<br>　　《罗生门》以风雨不透的布局将人推向生死抉择的极限，从而展示了“恶”的无可回避，第一次传递出作者对人的理解，对人的无奈与绝望。<br>　　２４《爱情和其他魔鬼》<br>　　加西亚马尔克斯眼中魔鬼般的爱情。<br>　　２５《红顶商人胡雪岩》<br>　　商圣的传奇人生<br>　　２６《韩寒的ｏｎｅ系列》<br>　　２７《半小时漫画中国史》<br>　　有意思的漫画历史作品<br>　　２８《死刑今夜执行》<br>　　思婷写的一部推理小说<br>　　２９《革命时期的爱情》<br>　　３０《杨绛传》<br>　　３１《蒋勋说红楼梦》<br>　　３２《理想国》<br>　　３３《婉约词》<br>　　一本词集，只有词，没有注释解释啥的，你可以把自己想象成古人，嘻嘻，陶冶一番。<br>　　３４《小王子的领悟》<br>　　３５《邻人之妻》<br>　　由两性视角，诸多人物实例，反映美国社会这些年的发展。<br>　　３６古典四大名剧《西厢记》《牡丹亭》《桃花扇》《长生殿》<br>　　３７《战国策》<br>　　３８《资治通鉴》原著<br>　　３９《红手指》<br>　　东野圭吾较早的一部推理小说，但是也反映了家庭关系之间出现的一些问题<br>　　４０《聊斋志异》<br>以上主要是上半年看的一些书，其他的还有一些是关于编程的专业技能书，以及修仙玄幻言情等等网络小说，说白了，很多时候也就是为了消磨消磨时间，阅读就是挺能满足我的方式之一，嘻嘻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　转眼间，２０１８大半年就过去了，今天想把自己这半年来的一些阅读整理下，也想让自己有个概念，这么长时间的浑浑噩噩，自己都干了些啥，都读了些啥。看看哪些书自个感觉还不错，哪些书虽不错但因自己能力有限无法深读，哪些书只是为了消遣时间。&lt;br&gt;　　１《卑鄙的圣人：曹操》&lt;br&gt;
      
    
    </summary>
    
      <category term="阅读" scheme="http://huangyiblog.com/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="书单" scheme="http://huangyiblog.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>154. 寻找旋转排序数组中的最小值 II</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/154-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-II/"/>
    <id>http://huangyiblog.com/题解集/154-寻找旋转排序数组中的最小值-II/</id>
    <published>2018-09-08T07:35:45.000Z</published>
    <updated>2018-10-09T14:43:20.629Z</updated>
    
    <content type="html"><![CDATA[<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>请找出其中最小的元素。</p><p>注意数组中可能存在重复的元素。</p><p>示例 1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5]</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure></p><p>示例 2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,2,0,1]</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></p><p>分析：查找旋转了的排序数组，数组里允许存在重复元素，我们知道在一个数组里求最小元素，遍历整个数组肯定能求出，但一般时间复杂度都不是最优的，所以采用二分查找，当然对于这道题，如果数组里重复元素过多，二分的优势也并不明显。<br>分以下三种情况遍历：</p><ul><li>nums[mid] &gt; nums[left],查找右半区间</li><li>nums[mid] &lt; nums[left],查找左半区间</li><li>nums[mid] = nums[left] ，left++，跳过继续查找</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(size == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> min(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] &lt; nums[right]) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[left];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt; nums[left]) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; nums[left]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min(nums[left], nums[right]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。&lt;/p&gt;
&lt;p&gt;请找出其中最小的元素。&lt;/p&gt;
&lt;p&gt;注意数组中可能存在重复的元素。&lt;/p&gt;
&lt;p&gt;示例 1：
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>18. 四数之和</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://huangyiblog.com/题解集/18-四数之和/</id>
    <published>2018-09-08T06:19:04.000Z</published>
    <updated>2018-10-09T14:43:20.630Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p>注意：</p><p>答案中不可以包含重复的四元组。</p><p>示例：</p><p>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</p><p>满足要求的四元组集合为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>分析：这道题和三数之和思路类似，无非是多了一个数，首先对给定数组进行排序，是最后答案数组有序，用两个do while循环去重。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size() - <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> k = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> l = nums.size() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(k &lt; l) &#123;</span><br><span class="line">                    <span class="keyword">int</span> sum = nums[i] + nums[j] + nums[k] + nums[l];</span><br><span class="line">                    <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">                        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">                        curr.push_back(nums[i]);</span><br><span class="line">                        curr.push_back(nums[j]);</span><br><span class="line">                        curr.push_back(nums[k]);</span><br><span class="line">                        curr.push_back(nums[l]);</span><br><span class="line">                        res.push_back(curr);</span><br><span class="line">                        <span class="keyword">do</span>&#123;++k;&#125;</span><br><span class="line">                        <span class="keyword">while</span>(k &lt; l &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]);</span><br><span class="line">                        <span class="keyword">do</span>&#123;--l;&#125;</span><br><span class="line">                        <span class="keyword">while</span>(k &lt; l &amp;&amp; nums[l] == nums[l + <span class="number">1</span>]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) &#123;</span><br><span class="line">                        ++k;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        --l;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;答案中不可以
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>16. 最接近的三数之和</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/16-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://huangyiblog.com/题解集/16-最接近的三数之和/</id>
    <published>2018-09-06T07:53:18.000Z</published>
    <updated>2018-10-09T14:43:20.629Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><p>分析：还是双指针思想，类似之前的三数之和解法，设定3个指针，固定两个，根据和的大小移动另一个。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> distance = INT_MAX;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = nums.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; k) &#123;</span><br><span class="line">                <span class="keyword">int</span> tempVal = nums[i] + nums[j] + nums[k];</span><br><span class="line">                <span class="keyword">int</span> tempDis;</span><br><span class="line">                <span class="keyword">if</span>(tempVal &lt; target) &#123;</span><br><span class="line">                    tempDis = target - tempVal;</span><br><span class="line">                    <span class="keyword">if</span>(tempDis &lt; distance) &#123;</span><br><span class="line">                        distance = tempDis;</span><br><span class="line">                        res = nums[i] + nums[j] + nums[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(tempVal &gt; target) &#123;</span><br><span class="line">                    tempDis = tempVal - target;</span><br><span class="line">                    <span class="keyword">if</span>(tempDis &lt; distance) &#123;</span><br><span class="line">                        distance = tempDis;</span><br><span class="line">                        res = nums[i] + nums[j] + nums[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    --k;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res = nums[i] + nums[j] + nums[k];</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。&lt;/p&gt;
&lt;p&gt;例如，给定数组 nums = [-1，2，1，-4], 和 target
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>15. 三数之和</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://huangyiblog.com/题解集/15-三数之和/</id>
    <published>2018-09-06T05:45:08.000Z</published>
    <updated>2018-10-09T14:43:20.628Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>分析：双指针思想，定位其中两个指针，根据和的大小来移动第三个指针。由于要求每个答案数组中的元素是升序排列的，所以在开始要对原数组进行排序，另外题目要求不能包含重复的答案数组，所以要有相应的去重操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = nums.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; k) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; curr;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                    curr.push_back(nums[i]);</span><br><span class="line">                    curr.push_back(nums[j]);</span><br><span class="line">                    curr.push_back(nums[k]);</span><br><span class="line">                    res.push_back(curr);</span><br><span class="line">                    ++j;</span><br><span class="line">                    --k;</span><br><span class="line">                    <span class="keyword">while</span>(j &lt; k &amp;&amp; nums[j - <span class="number">1</span>] == nums[j]) &#123;</span><br><span class="line">                        ++j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</span><br><span class="line">                        --k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] + nums[j] + nums[k] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    ++j;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    --k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; nums.size() - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。&lt;/p&gt;
&lt;p&gt;注意：答案中不可以包含重复的三元组。&lt;/p&gt;
&lt;p&gt;例如, 给定数组 nums = [-1, 0
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="LeetCode" scheme="http://huangyiblog.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>1057 Stack（30 分）</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/1057-Stack%EF%BC%8830-%E5%88%86%EF%BC%89/"/>
    <id>http://huangyiblog.com/题解集/1057-Stack（30-分）/</id>
    <published>2018-09-04T06:29:57.000Z</published>
    <updated>2018-10-09T14:43:20.610Z</updated>
    
    <content type="html"><![CDATA[<p>1057 Stack（30 分）<br>Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). The basic operations include Push (inserting an element onto the top position) and Pop (deleting the top element). Now you are supposed to implement a stack with an extra operation: PeekMedian – return the median value of all the elements in the stack. With N elements, the median value is defined to be the (N/2)-th smallest element if N is even, or ((N+1)/2)-th if N is odd.</p><p>Input Specification:<br>Each input file contains one test case. For each case, the first line contains a positive integer N (≤10<br>​5<br>​​ ). Then N lines follow, each contains a command in one of the following 3 formats:</p><p>Push key<br>Pop<br>PeekMedian<br>where key is a positive integer no more than 10<br>​5<br>​​ .</p><p>Output Specification:<br>For each Push command, insert key into the stack and output nothing. For each Pop or PeekMedian command, print in a line the corresponding returned value. If the command is invalid, print Invalid instead.</p><p>Sample Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">Pop</span><br><span class="line">PeekMedian</span><br><span class="line">Push 3</span><br><span class="line">PeekMedian</span><br><span class="line">Push 2</span><br><span class="line">PeekMedian</span><br><span class="line">Push 1</span><br><span class="line">PeekMedian</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Push 5</span><br><span class="line">Push 4</span><br><span class="line">PeekMedian</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br><span class="line">Pop</span><br></pre></td></tr></table></figure></p><p>Sample Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Invalid</span><br><span class="line">Invalid</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">Invalid</span><br></pre></td></tr></table></figure></p><p>分析：这道题除了要求实现栈的弹入和弹出操作，还要求查询栈内元素第k大（k是中位数），为了缩减时间复杂度，可以考虑分快思想，或者直接用树状数组<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sqrn = <span class="number">316</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">int</span> block[sqrn];</span><br><span class="line"><span class="keyword">int</span> table[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">peekMedian</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(sum + block[idx] &lt; k) &#123;</span><br><span class="line">        sum += block[idx++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num = idx * sqrn;</span><br><span class="line">    <span class="keyword">while</span>(sum + table[num] &lt; k) &#123;</span><br><span class="line">        sum += table[num++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    st.push(x);</span><br><span class="line">    block[x / sqrn]++;</span><br><span class="line">    table[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = st.top();</span><br><span class="line">    st.pop();</span><br><span class="line">    block[x / sqrn]--;</span><br><span class="line">    table[x]--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, query;</span><br><span class="line">    <span class="built_in">memset</span>(block, <span class="number">0</span>, <span class="keyword">sizeof</span>(block));</span><br><span class="line">    <span class="built_in">memset</span>(table, <span class="number">0</span>, <span class="keyword">sizeof</span>(table));</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;query);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; query; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd, <span class="string">"Push"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            Push(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmd, <span class="string">"Pop"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty() == <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(st.empty() == <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Invalid\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k = st.size();</span><br><span class="line">                <span class="keyword">if</span>(k % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    k = (k + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    k = k / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                peekMedian(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1057 Stack（30 分）&lt;br&gt;Stack is one of the most fundamental data structures, which is based on the principle of Last In First Out (LIFO). Th
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="PAT" scheme="http://huangyiblog.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>1068 Find More Coins（30 分）</title>
    <link href="http://huangyiblog.com/%E9%A2%98%E8%A7%A3%E9%9B%86/1068-Find-More-Coins%EF%BC%8830-%E5%88%86%EF%BC%89/"/>
    <id>http://huangyiblog.com/题解集/1068-Find-More-Coins（30-分）/</id>
    <published>2018-09-04T06:04:13.000Z</published>
    <updated>2018-10-09T14:43:20.617Z</updated>
    
    <content type="html"><![CDATA[<p>1068 Find More Coins（30 分）<br>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she must pay the exact amount. Since she has as many as 10<br>​4<br>​​  coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find some coins to pay for it.</p><p>Input Specification:<br>Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (≤10<br>​4<br>​​ , the total number of coins) and M (≤10<br>​2<br>​​ , the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers. All the numbers in a line are separated by a space.</p><p>Output Specification:<br>For each test case, print in one line the face values V<br>​1<br>​​ ≤V<br>​2<br>​​ ≤⋯≤V<br>​k<br>​​  such that V<br>​1<br>​​ +V<br>​2<br>​​ +⋯+V<br>​k<br>​​ =M. All the numbers must be separated by a space, and there must be no extra space at the end of the line. If such a solution is not unique, output the smallest sequence. If there is no solution, output “No Solution” instead.</p><p>Note: sequence {A[1], A[2], …} is said to be “smaller” than sequence {B[1], B[2], …} if there exists k≥1 such that A[i]=B[i] for all i&lt;k, and A[k] &lt; B[k].</p><p>Sample Input 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 9</span><br><span class="line">5 9 8 7 2 3 4 1</span><br></pre></td></tr></table></figure></p><p>Sample Output 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5</span><br></pre></td></tr></table></figure></p><p>Sample Input 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 8</span><br><span class="line">7 2 4 3</span><br></pre></td></tr></table></figure></p><p>Sample Output 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure></p><p>题目大意：背包问题，有n枚硬币，给出每枚硬币的价值，现在要用这些硬币去支付价值为m的东西，问是否存在这样的方案使选择用来支付的硬币价值之和恰好为m，如果存在从小到大输出硬币的价值，如果有多种方案，则输出“字典序“”最小的</p><p>01背包问题：<br>状态转移方程：dp[i][v] = max{dp[i - 1][v], dp[i - 1][v - w[i] + c[i]}<br>开一个bool型二维数组choice[i][v]用来记录是选择了哪个策略，即是放第i件物品还是不放第i件物品。<br>无解条件为dp[m] != m<br>求解dp数组时，如果两种策略的大小相等，选择放第i件物品的策略。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn], dp[maxv] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> choice[maxn][maxv], flag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(w + <span class="number">1</span>, w + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v = m; v &gt;= w[i]; v--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[v] &lt;= dp[v - w[i]] + w[i]) &#123;</span><br><span class="line">                dp[v] = dp[v - w[i]] + w[i];</span><br><span class="line">                choice[i][v] = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                choice[i][v] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[m] != m) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No Solution"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> k = n, num = <span class="number">0</span>, v = m;</span><br><span class="line">        <span class="keyword">while</span>(k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(choice[k][v] == <span class="number">1</span>) &#123;</span><br><span class="line">                flag[k] = <span class="literal">true</span>;</span><br><span class="line">                v -= w[k];</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag[k] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[i] == <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, w[i]);</span><br><span class="line">                num--;</span><br><span class="line">                <span class="keyword">if</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1068 Find More Coins（30 分）&lt;br&gt;Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she 
      
    
    </summary>
    
      <category term="题解集" scheme="http://huangyiblog.com/categories/%E9%A2%98%E8%A7%A3%E9%9B%86/"/>
    
    
      <category term="PAT" scheme="http://huangyiblog.com/tags/PAT/"/>
    
  </entry>
  
</feed>
